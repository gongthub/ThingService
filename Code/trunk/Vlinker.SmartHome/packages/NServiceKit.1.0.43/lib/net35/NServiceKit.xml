<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NServiceKit</name>
    </assembly>
    <members>
        <member name="T:NServiceKit.CacheAccess.Providers.BasicPersistenceProviderCacheBase">
            <summary>A basic persistence provider cache base.</summary>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.BasicPersistenceProviderCacheBase.#ctor(NServiceKit.CacheAccess.ICacheClient)">
             <summary>Initializes a new instance of the NServiceKit.CacheAccess.Providers.BasicPersistenceProviderCacheBase class.</summary>
            
             <param name="cacheClient">The cache client.</param>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.BasicPersistenceProviderCacheBase.GetBasicPersistenceProvider">
             <summary>Gets basic persistence provider.</summary>
            
             <returns>The basic persistence provider.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.BasicPersistenceProviderCacheBase.GetById``1(System.Object)">
             <summary>Gets by identifier.</summary>
            
             <typeparam name="TEntity">Type of the entity.</typeparam>
             <param name="entityId">Identifier for the entity.</param>
            
             <returns>The by identifier.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.BasicPersistenceProviderCacheBase.SetCache``1(``0)">
             <summary>Sets a cache.</summary>
            
             <typeparam name="TEntity">Type of the entity.</typeparam>
             <param name="entity">The entity.</param>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.BasicPersistenceProviderCacheBase.Store``1(``0)">
             <summary>Stores the given entity.</summary>
            
             <typeparam name="TEntity">Type of the entity.</typeparam>
             <param name="entity">The entity.</param>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.BasicPersistenceProviderCacheBase.StoreAll``1(``0[])">
             <summary>Stores all.</summary>
            
             <typeparam name="TEntity">Type of the entity.</typeparam>
             <param name="entities">A variable-length parameters list containing entities.</param>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.BasicPersistenceProviderCacheBase.GetByIds``1(System.Collections.ICollection)">
             <summary>Gets by identifiers.</summary>
            
             <typeparam name="TEntity">Type of the entity.</typeparam>
             <param name="entityIds">List of identifiers for the entities.</param>
            
             <returns>The by identifiers.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.BasicPersistenceProviderCacheBase.ClearAll``1(System.Collections.ICollection)">
             <summary>Clears all described by entityIds.</summary>
            
             <typeparam name="TEntity">Type of the entity.</typeparam>
             <param name="entityIds">List of identifiers for the entities.</param>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.BasicPersistenceProviderCacheBase.Clear``1(System.Object[])">
             <summary>Clears this object to its blank/initial state.</summary>
            
             <typeparam name="TEntity">Type of the entity.</typeparam>
             <param name="entityIds">List of identifiers for the entities.</param>
        </member>
        <member name="P:NServiceKit.CacheAccess.Providers.BasicPersistenceProviderCacheBase.CacheClient">
             <summary>Gets or sets the cache client.</summary>
            
             <value>The cache client.</value>
        </member>
        <member name="T:NServiceKit.CacheAccess.Providers.CacheClientExtensions">
            <summary>A cache client extensions.</summary>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.CacheClientExtensions.Set``1(NServiceKit.CacheAccess.ICacheClient,System.String,``0,System.Nullable{System.TimeSpan})">
             <summary>An ICacheClient extension method that sets.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="cacheClient">  Cache client.</param>
             <param name="cacheKey">     The cache key.</param>
             <param name="value">        The value.</param>
             <param name="expireCacheIn">The expire cache in.</param>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.CacheClientExtensions.ResolveFromCache(NServiceKit.CacheAccess.ICacheClient,System.String,NServiceKit.ServiceHost.IRequestContext)">
             <summary>An ICacheClient extension method that resolve from cache.</summary>
            
             <param name="cacheClient">Cache client.</param>
             <param name="cacheKey">   The cache key.</param>
             <param name="context">    The context.</param>
            
             <returns>An object.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.CacheClientExtensions.Cache(NServiceKit.CacheAccess.ICacheClient,System.String,System.Object,NServiceKit.ServiceHost.IRequestContext,System.Nullable{System.TimeSpan})">
             <summary>An ICacheClient extension method that caches.</summary>
            
             <param name="cacheClient">  Cache client.</param>
             <param name="cacheKey">     The cache key.</param>
             <param name="responseDto">  The response dto.</param>
             <param name="context">      The context.</param>
             <param name="expireCacheIn">The expire cache in.</param>
            
             <returns>An object.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.CacheClientExtensions.ClearCaches(NServiceKit.CacheAccess.ICacheClient,System.String[])">
             <summary>An ICacheClient extension method that clears the caches.</summary>
            
             <param name="cacheClient">Cache client.</param>
             <param name="cacheKeys">  A variable-length parameters list containing cache keys.</param>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.CacheClientExtensions.GetCacheKeyForSerialized(System.String,System.String,System.String)">
             <summary>Gets cache key for serialized.</summary>
            
             <param name="cacheKey"> The cache key.</param>
             <param name="mimeType"> Type of the mime.</param>
             <param name="modifiers">The modifiers.</param>
            
             <returns>The cache key for serialized.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.CacheClientExtensions.GetCacheKeyForCompressed(System.String,System.String)">
             <summary>Gets cache key for compressed.</summary>
            
             <param name="cacheKeySerialized">The cache key serialized.</param>
             <param name="compressionType">   Type of the compression.</param>
            
             <returns>The cache key for compressed.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.CacheClientExtensions.RemoveByPattern(NServiceKit.CacheAccess.ICacheClient,System.String)">
            <summary>
            Removes items from cache that have keys matching the specified wildcard pattern
            </summary>
            <param name="cacheClient">Cache client</param>
            <param name="pattern">The wildcard, where "*" means any sequence of characters and "?" means any single character.</param>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.CacheClientExtensions.RemoveByRegex(NServiceKit.CacheAccess.ICacheClient,System.String)">
            <summary>
            Removes items from the cache based on the specified regular expression pattern
            </summary>
            <param name="cacheClient">Cache client</param>
            <param name="regex">Regular expression pattern to search cache keys</param>
        </member>
        <member name="T:NServiceKit.CacheAccess.Providers.FileAndCacheTextManager">
            <summary>
            Stores both 'compressed' and 'text' caches of the dto in the FileSystem and ICacheTextManager provided.
            The ContentType is inferred from the ICacheTextManager's ContentType.
            </summary>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.FileAndCacheTextManager.#ctor(System.String,NServiceKit.CacheAccess.ICacheTextManager)">
             <summary>Initializes a new instance of the NServiceKit.CacheAccess.Providers.FileAndCacheTextManager class.</summary>
            
             <param name="baseCachePath">Full pathname of the base cache file.</param>
             <param name="cacheManager"> Manager for cache.</param>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.FileAndCacheTextManager.Resolve``1(System.String,System.String,System.Func{``0})">
             <summary>Resolves.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="compressionType">Type of the compression.</param>
             <param name="cacheKey">       The cache key.</param>
             <param name="createCacheFn">  The create cache function.</param>
            
             <returns>An object.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.FileAndCacheTextManager.Clear(System.Collections.Generic.IEnumerable{System.String})">
             <summary>Clears this object to its blank/initial state.</summary>
            
             <param name="cacheKeys">A variable-length parameters list containing cache keys.</param>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.FileAndCacheTextManager.Clear(System.String[])">
             <summary>Clears this object to its blank/initial state.</summary>
            
             <param name="cacheKeys">A variable-length parameters list containing cache keys.</param>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.FileAndCacheTextManager.GetCompressedBytesFromCache(System.String,System.String)">
             <summary>Gets compressed bytes from cache.</summary>
            
             <param name="compressionType">Type of the compression.</param>
             <param name="cacheKey">       The cache key.</param>
            
             <returns>The compressed bytes from cache.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.FileAndCacheTextManager.GetCompressedBytesFromFile(System.String,System.String)">
             <summary>Gets compressed bytes from file.</summary>
            
             <param name="compressionType">Type of the compression.</param>
             <param name="cacheKey">       The cache key.</param>
            
             <returns>The compressed bytes from file.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.FileAndCacheTextManager.GetFromFile(System.String)">
             <summary>Gets from file.</summary>
            
             <param name="cacheKey">The cache key.</param>
            
             <returns>The data that was read from the file.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.FileAndCacheTextManager.WriteToFile(System.String,System.Byte[])">
             <summary>Writes to file.</summary>
            
             <param name="cacheKey">The cache key.</param>
             <param name="bytes">   The bytes.</param>
        </member>
        <member name="P:NServiceKit.CacheAccess.Providers.FileAndCacheTextManager.CacheClient">
             <summary>Gets the cache client.</summary>
            
             <value>The cache client.</value>
        </member>
        <member name="P:NServiceKit.CacheAccess.Providers.FileAndCacheTextManager.ContentType">
             <summary>Gets the type of the content.</summary>
            
             <value>The type of the content.</value>
        </member>
        <member name="T:NServiceKit.CacheAccess.Providers.FileSystemXmlCacheClient">
            <summary>
            Implements a very limited subset of ICacheClient, i.e.
            
            	- T Get[T]()
            	- Set(path, value)
            	- Remove(path)
            
            </summary>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.FileSystemXmlCacheClient.#ctor(System.String)">
             <summary>Initializes a new instance of the NServiceKit.CacheAccess.Providers.FileSystemXmlCacheClient class.</summary>
            
             <param name="baseFilePath">Full pathname of the base file.</param>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.FileSystemXmlCacheClient.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.FileSystemXmlCacheClient.Remove(System.String)">
             <summary>Removes the specified item from the cache.</summary>
            
             <param name="relativePath">The identifier for the item to delete.</param>
            
             <returns>true if the item was successfully removed from the cache; false otherwise.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.FileSystemXmlCacheClient.RemoveAll(System.Collections.Generic.IEnumerable{System.String})">
             <summary>Removes the cache for all the keys provided.</summary>
            
             <param name="keys">The keys.</param>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.FileSystemXmlCacheClient.Get``1(System.String)">
             <summary>Gets.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="relativePath">Full pathname of the relative file.</param>
            
             <returns>A T.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.FileSystemXmlCacheClient.Increment(System.String,System.UInt32)">
             <summary>Increments the value of the specified key by the given amount. The operation is atomic and happens on the server. A non existent value at key starts at 0.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <param name="key">   The identifier for the item to increment.</param>
             <param name="amount">The amount by which the client wants to increase the item.</param>
            
             <returns>The new value of the item or -1 if not found.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.FileSystemXmlCacheClient.Decrement(System.String,System.UInt32)">
             <summary>Increments the value of the specified key by the given amount. The operation is atomic and happens on the server. A non existent value at key starts at 0.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <param name="key">   The identifier for the item to increment.</param>
             <param name="amount">The amount by which the client wants to decrease the item.</param>
            
             <returns>The new value of the item or -1 if not found.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.FileSystemXmlCacheClient.Add``1(System.String,``0)">
             <summary>Adds key.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="key">  The key.</param>
             <param name="value">The value.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.FileSystemXmlCacheClient.Set``1(System.String,``0)">
             <summary>Sets.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="relativePath">Full pathname of the relative file.</param>
             <param name="value">       The value.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.FileSystemXmlCacheClient.Replace``1(System.String,``0)">
             <summary>Replaces.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="key">  The key.</param>
             <param name="value">The value.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.FileSystemXmlCacheClient.Add``1(System.String,``0,System.DateTime)">
             <summary>Adds key.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="key">      The key.</param>
             <param name="value">    The value.</param>
             <param name="expiresAt">The expires at Date/Time.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.FileSystemXmlCacheClient.Set``1(System.String,``0,System.DateTime)">
             <summary>Sets.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="key">      The key.</param>
             <param name="value">    The value.</param>
             <param name="expiresAt">The expires at Date/Time.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.FileSystemXmlCacheClient.Replace``1(System.String,``0,System.DateTime)">
             <summary>Replaces.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="key">      The key.</param>
             <param name="value">    The value.</param>
             <param name="expiresAt">The expires at Date/Time.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.FileSystemXmlCacheClient.Add``1(System.String,``0,System.TimeSpan)">
             <summary>Adds key.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="key">      The key.</param>
             <param name="value">    The value.</param>
             <param name="expiresIn">The expires in.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.FileSystemXmlCacheClient.Set``1(System.String,``0,System.TimeSpan)">
             <summary>Sets.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="key">      The key.</param>
             <param name="value">    The value.</param>
             <param name="expiresIn">The expires in.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.FileSystemXmlCacheClient.Replace``1(System.String,``0,System.TimeSpan)">
             <summary>Replaces.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="key">      The key.</param>
             <param name="value">    The value.</param>
             <param name="expiresIn">The expires in.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.FileSystemXmlCacheClient.FlushAll">
             <summary>Invalidates all data on the cache.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.FileSystemXmlCacheClient.GetAll``1(System.Collections.Generic.IEnumerable{System.String})">
             <summary>Gets all.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="keys">The keys.</param>
            
             <returns>all.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.FileSystemXmlCacheClient.SetAll``1(System.Collections.Generic.IDictionary{System.String,``0})">
             <summary>Sets all.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="values">The values.</param>
        </member>
        <member name="T:NServiceKit.CacheAccess.Providers.MemoryCacheClient">
            <summary>A memory cache client.</summary>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MemoryCacheClient.#ctor">
            <summary>Initializes a new instance of the NServiceKit.CacheAccess.Providers.MemoryCacheClient class.</summary>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MemoryCacheClient.CacheAdd(System.String,System.Object)">
            <summary>
            Add value with specified key to the cache, and set the cache entry to never expire.
            </summary>
            <param name="key">Key associated with value.</param>
            <param name="value">Value being cached.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MemoryCacheClient.CacheAdd(System.String,System.Object,System.DateTime)">
            <summary>
            Stores The value with key only if such key doesn't exist at the server yet. 
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="expiresAt">The UTC DateTime at which the cache entry expires.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MemoryCacheClient.CacheSet(System.String,System.Object)">
            <summary>
            Adds or replaces the value with key, and sets the cache entry to never expire.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MemoryCacheClient.CacheSet(System.String,System.Object,System.DateTime)">
            <summary>
            Adds or replaces the value with key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="expiresAt">The UTC DateTime at which the cache entry expires.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MemoryCacheClient.CacheSet(System.String,System.Object,System.DateTime,System.Nullable{System.Int64})">
            <summary>
            Adds or replaces the value with key. 
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="expiresAt">The UTC DateTime at which the cache entry expires.</param>
            <param name="checkLastModified">The check last modified.</param>
            <returns>True; if it succeeded</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MemoryCacheClient.CacheReplace(System.String,System.Object)">
            <summary>
            Replace the value with specified key if it exists, and set the cache entry to never expire.
            </summary>
            <param name="key">The key of the cache entry.</param>
            <param name="value">The value to be cached.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MemoryCacheClient.CacheReplace(System.String,System.Object,System.DateTime)">
            <summary>
            Replace the value with specified key if it exists.
            </summary>
            <param name="key">The key of the cache entry.</param>
            <param name="value">The value to be cached.</param>
            <param name="expiresAt">The UTC DateTime at which the cache entry expires.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MemoryCacheClient.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MemoryCacheClient.Remove(System.String)">
             <summary>Removes the specified item from the cache.</summary>
            
             <param name="key">The identifier for the item to delete.</param>
            
             <returns>true if the item was successfully removed from the cache; false otherwise.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MemoryCacheClient.RemoveAll(System.Collections.Generic.IEnumerable{System.String})">
             <summary>Removes the cache for all the keys provided.</summary>
            
             <param name="keys">The keys.</param>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MemoryCacheClient.Get(System.String)">
             <summary>Gets.</summary>
            
             <param name="key">Key associated with value.</param>
            
             <returns>An object.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MemoryCacheClient.Get(System.String,System.Int64@)">
             <summary>Gets.</summary>
            
             <param name="key">              Key associated with value.</param>
             <param name="lastModifiedTicks">The last modified ticks.</param>
            
             <returns>An object.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MemoryCacheClient.Get``1(System.String)">
             <summary>Gets.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="key">Key associated with value.</param>
            
             <returns>A T.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MemoryCacheClient.Increment(System.String,System.UInt32)">
             <summary>Increments the value of the specified key by the given amount. The operation is atomic and happens on the server. A non existent value at key starts at 0.</summary>
            
             <param name="key">   The identifier for the item to increment.</param>
             <param name="amount">The amount by which the client wants to increase the item.</param>
            
             <returns>The new value of the item or -1 if not found.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MemoryCacheClient.Decrement(System.String,System.UInt32)">
             <summary>Increments the value of the specified key by the given amount. The operation is atomic and happens on the server. A non existent value at key starts at 0.</summary>
            
             <param name="key">   The identifier for the item to increment.</param>
             <param name="amount">The amount by which the client wants to decrease the item.</param>
            
             <returns>The new value of the item or -1 if not found.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MemoryCacheClient.Add``1(System.String,``0)">
            <summary>
            Add the value with key to the cache, set to never expire.
            </summary>
            <param name="key">The key of the cache entry.</param>
            <param name="value">The value being cached.</param>
            <returns>True if Add succeeds, otherwise false.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MemoryCacheClient.Set``1(System.String,``0)">
            <summary>
            Add or replace the value with key to the cache, set to never expire.
            </summary>
            <param name="key">The key of the cache entry.</param>
            <param name="value">The value being cached.</param>
            <returns>True if Set succeeds, otherwise false.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MemoryCacheClient.Replace``1(System.String,``0)">
            <summary>
            Replace the value with key in the cache, set to never expire.
            </summary>
            <param name="key">The key of the cache entry.</param>
            <param name="value">The value being cached.</param>
            <returns>True if Replace succeeds, otherwise false.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MemoryCacheClient.Add``1(System.String,``0,System.DateTime)">
            <summary>
            Add the value with key to the cache, set to expire at specified DateTime.
            </summary>
            <remarks>This method examines the DateTimeKind of expiresAt to determine if conversion to
            universal time is needed. The version of Add that takes a TimeSpan expiration is faster 
            than using this method with a DateTime of Kind other than Utc, and is not affected by 
            ambiguous local time during daylight savings/standard time transition.</remarks>
            <param name="key">The key of the cache entry.</param>
            <param name="value">The value being cached.</param>
            <param name="expiresAt">The DateTime at which the cache entry expires.</param>
            <returns>True if Add succeeds, otherwise false.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MemoryCacheClient.Set``1(System.String,``0,System.DateTime)">
            <summary>
            Add or replace the value with key to the cache, set to expire at specified DateTime.
            </summary>
            <remarks>This method examines the DateTimeKind of expiresAt to determine if conversion to
            universal time is needed. The version of Set that takes a TimeSpan expiration is faster 
            than using this method with a DateTime of Kind other than Utc, and is not affected by 
            ambiguous local time during daylight savings/standard time transition.</remarks>
            <param name="key">The key of the cache entry.</param>
            <param name="value">The value being cached.</param>
            <param name="expiresAt">The DateTime at which the cache entry expires.</param>
            <returns>True if Set succeeds, otherwise false.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MemoryCacheClient.Replace``1(System.String,``0,System.DateTime)">
            <summary>
            Replace the value with key in the cache, set to expire at specified DateTime.
            </summary>
            <remarks>This method examines the DateTimeKind of expiresAt to determine if conversion to
            universal time is needed. The version of Replace that takes a TimeSpan expiration is faster 
            than using this method with a DateTime of Kind other than Utc, and is not affected by 
            ambiguous local time during daylight savings/standard time transition.</remarks>
            <param name="key">The key of the cache entry.</param>
            <param name="value">The value being cached.</param>
            <param name="expiresAt">The DateTime at which the cache entry expires.</param>
            <returns>True if Replace succeeds, otherwise false.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MemoryCacheClient.Add``1(System.String,``0,System.TimeSpan)">
            <summary>
            Add the value with key to the cache, set to expire after specified TimeSpan.
            </summary>
            <param name="key">The key of the cache entry.</param>
            <param name="value">The value being cached.</param>
            <param name="expiresIn">The TimeSpan at which the cache entry expires.</param>
            <returns>True if Add succeeds, otherwise false.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MemoryCacheClient.Set``1(System.String,``0,System.TimeSpan)">
            <summary>
            Add or replace the value with key to the cache, set to expire after specified TimeSpan.
            </summary>
            <param name="key">The key of the cache entry.</param>
            <param name="value">The value being cached.</param>
            <param name="expiresIn">The TimeSpan at which the cache entry expires.</param>
            <returns>True if Set succeeds, otherwise false.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MemoryCacheClient.Replace``1(System.String,``0,System.TimeSpan)">
            <summary>
            Replace the value with key in the cache, set to expire after specified TimeSpan.
            </summary>
            <param name="key">The key of the cache entry.</param>
            <param name="value">The value being cached.</param>
            <param name="expiresIn">The TimeSpan at which the cache entry expires.</param>
            <returns>True if Replace succeeds, otherwise false.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MemoryCacheClient.FlushAll">
            <summary>Invalidates all data on the cache.</summary>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MemoryCacheClient.GetAll``1(System.Collections.Generic.IEnumerable{System.String})">
             <summary>Gets all.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="keys">The keys.</param>
            
             <returns>all.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MemoryCacheClient.SetAll``1(System.Collections.Generic.IDictionary{System.String,``0})">
             <summary>Sets all.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="values">The values.</param>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MemoryCacheClient.RemoveByPattern(System.String)">
             <summary>Removes items from cache that have keys matching the specified wildcard pattern.</summary>
            
             <param name="pattern">The wildcard, where "*" means any sequence of characters and "?" means any single character.</param>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MemoryCacheClient.RemoveByRegex(System.String)">
             <summary>Removes items from the cache based on the specified regular expression pattern.</summary>
            
             <param name="pattern">Regular expression pattern to search cache keys.</param>
        </member>
        <member name="P:NServiceKit.CacheAccess.Providers.MemoryCacheClient.FlushOnDispose">
             <summary>Gets or sets a value indicating whether the on dispose should be flushed.</summary>
            
             <value>true if flush on dispose, false if not.</value>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MemoryCacheClient.CacheEntry.#ctor(System.Object,System.DateTime)">
            <summary>
            Create new instance of CacheEntry.
            </summary>
            <param name="value">The value being cached.</param>
            <param name="expiresAt">The UTC time at which CacheEntry expires.</param>
        </member>
        <member name="P:NServiceKit.CacheAccess.Providers.MemoryCacheClient.CacheEntry.ExpiresAt">
            <summary>UTC time at which CacheEntry expires.</summary>
        </member>
        <member name="T:NServiceKit.CacheAccess.Providers.MultiCacheClient">
            <summary>A multi cache client.</summary>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MultiCacheClient.#ctor(NServiceKit.CacheAccess.ICacheClient[])">
             <summary>Initializes a new instance of the NServiceKit.CacheAccess.Providers.MultiCacheClient class.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <param name="cacheClients">A variable-length parameters list containing cache clients.</param>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MultiCacheClient.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MultiCacheClient.Remove(System.String)">
             <summary>Removes the specified item from the cache.</summary>
            
             <param name="key">The identifier for the item to delete.</param>
            
             <returns>true if the item was successfully removed from the cache; false otherwise.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MultiCacheClient.Get``1(System.String)">
             <summary>Gets.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="key">The identifier for the item to increment.</param>
            
             <returns>A T.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MultiCacheClient.Increment(System.String,System.UInt32)">
             <summary>Increments the value of the specified key by the given amount. The operation is atomic and happens on the server. A non existent value at key starts at 0.</summary>
            
             <param name="key">   The identifier for the item to increment.</param>
             <param name="amount">The amount by which the client wants to increase the item.</param>
            
             <returns>The new value of the item or -1 if not found.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MultiCacheClient.Decrement(System.String,System.UInt32)">
             <summary>Increments the value of the specified key by the given amount. The operation is atomic and happens on the server. A non existent value at key starts at 0.</summary>
            
             <param name="key">   The identifier for the item to increment.</param>
             <param name="amount">The amount by which the client wants to decrease the item.</param>
            
             <returns>The new value of the item or -1 if not found.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MultiCacheClient.Add``1(System.String,``0)">
             <summary>Adds key.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="key">  The key.</param>
             <param name="value">The value.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MultiCacheClient.Set``1(System.String,``0)">
             <summary>Sets.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="key">  The key.</param>
             <param name="value">The value.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MultiCacheClient.Replace``1(System.String,``0)">
             <summary>Replaces.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="key">  The key.</param>
             <param name="value">The value.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MultiCacheClient.Add``1(System.String,``0,System.DateTime)">
             <summary>Adds key.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="key">      The key.</param>
             <param name="value">    The value.</param>
             <param name="expiresAt">The expires at Date/Time.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MultiCacheClient.Set``1(System.String,``0,System.DateTime)">
             <summary>Sets.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="key">      The key.</param>
             <param name="value">    The value.</param>
             <param name="expiresAt">The expires at Date/Time.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MultiCacheClient.Replace``1(System.String,``0,System.DateTime)">
             <summary>Replaces.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="key">      The key.</param>
             <param name="value">    The value.</param>
             <param name="expiresAt">The expires at Date/Time.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MultiCacheClient.Add``1(System.String,``0,System.TimeSpan)">
             <summary>Adds key.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="key">      The key.</param>
             <param name="value">    The value.</param>
             <param name="expiresIn">The expires in.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MultiCacheClient.Set``1(System.String,``0,System.TimeSpan)">
             <summary>Sets.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="key">      The key.</param>
             <param name="value">    The value.</param>
             <param name="expiresIn">The expires in.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MultiCacheClient.Replace``1(System.String,``0,System.TimeSpan)">
             <summary>Replaces.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="key">      The key.</param>
             <param name="value">    The value.</param>
             <param name="expiresIn">The expires in.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MultiCacheClient.FlushAll">
            <summary>Invalidates all data on the cache.</summary>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MultiCacheClient.GetAll``1(System.Collections.Generic.IEnumerable{System.String})">
             <summary>Gets all.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="keys">The keys.</param>
            
             <returns>all.</returns>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MultiCacheClient.RemoveAll(System.Collections.Generic.IEnumerable{System.String})">
             <summary>Removes the cache for all the keys provided.</summary>
            
             <param name="keys">The keys.</param>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.MultiCacheClient.SetAll``1(System.Collections.Generic.IDictionary{System.String,``0})">
             <summary>Sets all.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="values">The values.</param>
        </member>
        <member name="T:NServiceKit.CacheAccess.Providers.PersistenceProviderCache">
            <summary>A persistence provider cache.</summary>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.PersistenceProviderCache.#ctor(NServiceKit.CacheAccess.ICacheClient,NServiceKit.DataAccess.IPersistenceProviderManager)">
             <summary>Initializes a new instance of the NServiceKit.CacheAccess.Providers.PersistenceProviderCache class.</summary>
            
             <param name="cacheClient">    The cache client.</param>
             <param name="providerManager">Manager for provider.</param>
        </member>
        <member name="M:NServiceKit.CacheAccess.Providers.PersistenceProviderCache.GetBasicPersistenceProvider">
             <summary>Gets basic persistence provider.</summary>
            
             <returns>The basic persistence provider.</returns>
        </member>
        <member name="P:NServiceKit.CacheAccess.Providers.PersistenceProviderCache.ProviderManager">
             <summary>Gets or sets the manager for provider.</summary>
            
             <value>The provider manager.</value>
        </member>
        <member name="T:NServiceKit.Configuration.AppSettings">
            <summary>
            More familiar name for the new crowd.
            </summary>
        </member>
        <member name="T:NServiceKit.Configuration.AppSettingsBase">
            <summary>An application settings base.</summary>
        </member>
        <member name="F:NServiceKit.Configuration.AppSettingsBase.settings">
            <summary>Options for controlling the operation.</summary>
        </member>
        <member name="M:NServiceKit.Configuration.AppSettingsBase.#ctor(NServiceKit.Configuration.ISettings)">
             <summary>Initializes a new instance of the NServiceKit.Configuration.AppSettingsBase class.</summary>
            
             <param name="settings">Options for controlling the operation.</param>
        </member>
        <member name="M:NServiceKit.Configuration.AppSettingsBase.GetNullableString(System.String)">
             <summary>Gets nullable string.</summary>
            
             <param name="name">The name.</param>
            
             <returns>The nullable string.</returns>
        </member>
        <member name="M:NServiceKit.Configuration.AppSettingsBase.GetString(System.String)">
             <summary>Gets a string.</summary>
            
             <exception cref="T:System.Configuration.ConfigurationErrorsException">Thrown when a Configuration Errors error condition occurs.</exception>
            
             <param name="name">The name.</param>
            
             <returns>The string.</returns>
        </member>
        <member name="M:NServiceKit.Configuration.AppSettingsBase.GetList(System.String)">
             <summary>Gets a list.</summary>
            
             <param name="key">The key.</param>
            
             <returns>The list.</returns>
        </member>
        <member name="M:NServiceKit.Configuration.AppSettingsBase.GetDictionary(System.String)">
             <summary>Gets a dictionary.</summary>
            
             <exception cref="T:System.Configuration.ConfigurationErrorsException">Thrown when a Configuration Errors error condition occurs.</exception>
            
             <param name="key">The key.</param>
            
             <returns>The dictionary.</returns>
        </member>
        <member name="M:NServiceKit.Configuration.AppSettingsBase.Get``1(System.String,``0)">
             <summary>Gets.</summary>
            
             <exception cref="T:System.Configuration.ConfigurationErrorsException">Thrown when a Configuration Errors error condition occurs.</exception>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="name">        The name.</param>
             <param name="defaultValue">The default value.</param>
            
             <returns>A T.</returns>
        </member>
        <member name="M:NServiceKit.Configuration.AppSettings.#ctor">
            <summary>Initializes a new instance of the NServiceKit.Configuration.AppSettings class.</summary>
        </member>
        <member name="M:NServiceKit.Configuration.AppSettings.GetString(System.String)">
            <summary>
            Returns string if exists, otherwise null
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:NServiceKit.Configuration.ISettings">
            <summary>Interface for settings.</summary>
        </member>
        <member name="M:NServiceKit.Configuration.ISettings.Get(System.String)">
            <summary>
            Provides a common interface for Settings providers such as
            ConfigurationManager or Azure's RoleEnvironment. The only
            requirement is that if the implementation cannot find the
            specified key, the return value must be null
            </summary>
            <param name="key">The key for the setting</param>
            <returns>The string value of the specified key, or null if the key
            was invalid</returns>
        </member>
        <member name="M:NServiceKit.Configuration.AppSettings.ConfigurationManagerWrapper.Get(System.String)">
             <summary>
             Provides a common interface for Settings providers such as ConfigurationManager or Azure's RoleEnvironment. The only requirement is that if the implementation cannot find the specified key, the
             return value must be null.
             </summary>
            
             <param name="key">The key for the setting.</param>
            
             <returns>The string value of the specified key, or null if the key was invalid.</returns>
        </member>
        <member name="T:NServiceKit.Configuration.ConfigurationResourceManager">
            <summary>Manager for configuration resources.</summary>
        </member>
        <member name="T:NServiceKit.Configuration.ConfigUtils">
            <summary>A configuration utilities.</summary>
        </member>
        <member name="M:NServiceKit.Configuration.ConfigUtils.GetNullableAppSetting(System.String)">
            <summary>
            Gets the nullable app setting.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.Configuration.ConfigUtils.GetAppSetting(System.String)">
            <summary>
            Gets the app setting.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.Configuration.ConfigUtils.ConfigSectionExists(System.String)">
            <summary>
            Determines wheter the Config section identified by the sectionName exists.
            </summary>
            <param name="sectionName">Name of the section.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.Configuration.ConfigUtils.GetAppSetting(System.String,System.String)">
            <summary>
            Returns AppSetting[key] if exists otherwise defaultValue
            </summary>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.Configuration.ConfigUtils.GetAppSetting``1(System.String,``0)">
            <summary>
            Returns AppSetting[key] if exists otherwise defaultValue, for non-string values
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.Configuration.ConfigUtils.GetConnectionStringSetting(System.String)">
            <summary>
            Gets the connection string setting.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.Configuration.ConfigUtils.GetConnectionString(System.String)">
            <summary>
            Gets the connection string.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.Configuration.ConfigUtils.GetListFromAppSetting(System.String)">
            <summary>
            Gets the list from app setting.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.Configuration.ConfigUtils.GetListFromAppSettingValue(System.String)">
             <summary>Gets list from application setting value.</summary>
            
             <param name="appSettingValue">The application setting value.</param>
            
             <returns>The list from application setting value.</returns>
        </member>
        <member name="M:NServiceKit.Configuration.ConfigUtils.GetDictionaryFromAppSetting(System.String)">
            <summary>
            Gets the dictionary from app setting.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.Configuration.ConfigUtils.GetDictionaryFromAppSettingValue(System.String)">
             <summary>Gets dictionary from application setting value.</summary>
            
             <param name="appSettingValue">The application setting value.</param>
            
             <returns>The dictionary from application setting value.</returns>
        </member>
        <member name="M:NServiceKit.Configuration.ConfigUtils.GetParseMethod(System.Type)">
            <summary>
            Get the static Parse(string) method on the type supplied
            </summary>
            <param name="type"></param>
            <returns>A delegate to the type's Parse(string) if it has one</returns>
        </member>
        <member name="M:NServiceKit.Configuration.ConfigUtils.GetConstructorInfo(System.Type)">
            <summary>
            Gets the constructor info for T(string) if exists.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.Configuration.ConfigUtils.ParseTextValue``1(System.String)">
            <summary>
            Returns the value returned by the 'T.Parse(string)' method if exists otherwise 'new T(string)'. 
            e.g. if T was a TimeSpan it will return TimeSpan.Parse(textValue).
            If there is no Parse Method it will attempt to create a new instance of the destined type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="textValue">The default value.</param>
            <returns>T.Parse(string) or new T(string) value</returns>
        </member>
        <member name="T:NServiceKit.Configuration.DictionarySettings">
            <summary>A dictionary settings.</summary>
        </member>
        <member name="M:NServiceKit.Configuration.DictionarySettings.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
             <summary>Initializes a new instance of the NServiceKit.Configuration.DictionarySettings class.</summary>
            
             <param name="map">The map.</param>
        </member>
        <member name="M:NServiceKit.Configuration.DictionarySettings.Get(System.String)">
             <summary>
             Provides a common interface for Settings providers such as ConfigurationManager or Azure's RoleEnvironment. The only requirement is that if the implementation cannot find the specified key, the
             return value must be null.
             </summary>
            
             <param name="key">The key for the setting.</param>
            
             <returns>The string value of the specified key, or null if the key was invalid.</returns>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.IPlugin">
            <summary>Interface for plugin.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.IPlugin.Register(NServiceKit.WebHost.Endpoints.IAppHost)">
             <summary>Registers this object.</summary>
            
             <param name="appHost">The application host.</param>
        </member>
        <member name="M:NServiceKit.ContentTypeCheckerFeature.Register(NServiceKit.WebHost.Endpoints.IAppHost)">
            <summary> Adds a request filter to apphost </summary>
            <param name="appHost"> the app host</param>
        </member>
        <member name="T:NServiceKit.Html.AntiXsrf.AntiForgery">
            <summary>
            Provides access to the anti-forgery system, which provides protection against
            Cross-site Request Forgery (XSRF, also called CSRF) attacks.
            </summary>
        </member>
        <member name="M:NServiceKit.Html.AntiXsrf.AntiForgery.GetHtml">
            <summary>
            Generates an anti-forgery token for this request. This token can
            be validated by calling the Validate() method.
            </summary>
            <returns>An HTML string corresponding to an &lt;input type="hidden"&gt;
            element. This element should be put inside a &lt;form&gt;.</returns>
            <remarks>
            This method has a side effect: it may set a response cookie.
            </remarks>
        </member>
        <member name="M:NServiceKit.Html.AntiXsrf.AntiForgery.GetTokens(System.String,System.String@,System.String@)">
            <summary>
            Generates an anti-forgery token pair (cookie and form token) for this request.
            This method is similar to GetHtml(), but this method gives the caller control
            over how to persist the returned values. To validate these tokens, call the
            appropriate overload of Validate.
            </summary>
            <param name="oldCookieToken">The anti-forgery token - if any - that already existed
            for this request. May be null. The anti-forgery system will try to reuse this cookie
            value when generating a matching form token.</param>
            <param name="newCookieToken">Will contain a new cookie value if the old cookie token
            was null or invalid. If this value is non-null when the method completes, the caller
            must persist this value in the form of a response cookie, and the existing cookie value
            should be discarded. If this value is null when the method completes, the existing
            cookie value was valid and needn't be modified.</param>
            <param name="formToken">The value that should be stored in the &lt;form&gt;. The caller
            should take care not to accidentally swap the cookie and form tokens.</param>
            <remarks>
            Unlike the GetHtml() method, this method has no side effect. The caller
            is responsible for setting the response cookie and injecting the returned
            form token as appropriate.
            </remarks>
        </member>
        <member name="M:NServiceKit.Html.AntiXsrf.AntiForgery.Validate">
            <summary>
            Validates an anti-forgery token that was supplied for this request.
            The anti-forgery token may be generated by calling GetHtml().
            </summary>
            <remarks>
            Throws an HttpAntiForgeryException if validation fails.
            </remarks>
        </member>
        <member name="M:NServiceKit.Html.AntiXsrf.AntiForgery.Validate(System.String,System.String)">
            <summary>
            Validates an anti-forgery token pair that was generated by the GetTokens method.
            </summary>
            <param name="cookieToken">The token that was supplied in the request cookie.</param>
            <param name="formToken">The token that was supplied in the request form body.</param>
            <remarks>
            Throws an HttpAntiForgeryException if validation fails.
            </remarks>
        </member>
        <member name="T:NServiceKit.Html.AntiXsrf.AntiForgeryConfig">
            <summary>
            Provides programmatic configuration for the anti-forgery token system.
            </summary>
        </member>
        <member name="P:NServiceKit.Html.AntiXsrf.AntiForgeryConfig.AdditionalDataProvider">
            <summary>
            Specifies an object that can provide additional data to put into all
            generated tokens and that can validate additional data in incoming
            tokens.
            </summary>
        </member>
        <member name="P:NServiceKit.Html.AntiXsrf.AntiForgeryConfig.CookieName">
            <summary>
            Specifies the name of the cookie that is used by the anti-forgery
            system.
            </summary>
            <remarks>
            If an explicit name is not provided, the system will automatically
            generate a name.
            </remarks>
        </member>
        <member name="P:NServiceKit.Html.AntiXsrf.AntiForgeryConfig.RequireSsl">
            <summary>
            Specifies whether SSL is required for the anti-forgery system
            to operate. If this setting is 'true' and a non-SSL request
            comes into the system, all anti-forgery APIs will fail.
            </summary>
        </member>
        <member name="P:NServiceKit.Html.AntiXsrf.AntiForgeryConfig.SuppressIdentityHeuristicChecks">
            <summary>
            Specifies whether the anti-forgery system should skip checking
            for conditions that might indicate misuse of the system. Please
            use caution when setting this switch, as improper use could open
            security holes in the application.
            </summary>
            <remarks>
            Setting this switch will disable several checks, including:
            - Identity.IsAuthenticated = true without Identity.Name being set
            - special-casing claims-based identities
            </remarks>
        </member>
        <member name="P:NServiceKit.Html.AntiXsrf.AntiForgeryConfig.UniqueClaimTypeIdentifier">
            <summary>
            If claims-based authorization is in use, specifies the claim
            type from the identity that is used to uniquely identify the
            user. If this property is set, all claims-based identities
            <em>must</em> return unique values for this claim type.
            </summary>
            <remarks>
            If claims-based authorization is in use and this property has
            not been set, the anti-forgery system will automatically look
            for claim types "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier"
            and "http://schemas.microsoft.com/accesscontrolservice/2010/07/claims/identityprovider".
            </remarks>
        </member>
        <member name="P:NServiceKit.Html.AntiXsrf.AntiForgeryConfigWrapper.AdditionalDataProvider">
             <summary>Gets the additional data provider.</summary>
            
             <value>The additional data provider.</value>
        </member>
        <member name="P:NServiceKit.Html.AntiXsrf.AntiForgeryConfigWrapper.CookieName">
             <summary>Gets the name of the cookie.</summary>
            
             <value>The name of the cookie.</value>
        </member>
        <member name="P:NServiceKit.Html.AntiXsrf.AntiForgeryConfigWrapper.FormFieldName">
             <summary>Gets the name of the form field.</summary>
            
             <value>The name of the form field.</value>
        </member>
        <member name="P:NServiceKit.Html.AntiXsrf.AntiForgeryConfigWrapper.RequireSSL">
             <summary>Gets a value indicating whether the require ssl.</summary>
            
             <value>true if require ssl, false if not.</value>
        </member>
        <member name="P:NServiceKit.Html.AntiXsrf.AntiForgeryConfigWrapper.SuppressIdentityHeuristicChecks">
             <summary>Gets a value indicating whether the suppress identity heuristic checks.</summary>
            
             <value>true if suppress identity heuristic checks, false if not.</value>
        </member>
        <member name="P:NServiceKit.Html.AntiXsrf.AntiForgeryConfigWrapper.UniqueClaimTypeIdentifier">
             <summary>Gets the identifier of the unique claim type.</summary>
            
             <value>The identifier of the unique claim type.</value>
        </member>
        <member name="P:NServiceKit.Html.AntiXsrf.AntiForgeryToken.AdditionalData">
             <summary>Gets or sets information describing the additional.</summary>
            
             <value>Information describing the additional.</value>
        </member>
        <member name="P:NServiceKit.Html.AntiXsrf.AntiForgeryToken.ClaimUid">
             <summary>Gets or sets the claim UID.</summary>
            
             <value>The claim UID.</value>
        </member>
        <member name="P:NServiceKit.Html.AntiXsrf.AntiForgeryToken.IsSessionToken">
             <summary>Gets or sets a value indicating whether this object is session token.</summary>
            
             <value>true if this object is session token, false if not.</value>
        </member>
        <member name="P:NServiceKit.Html.AntiXsrf.AntiForgeryToken.SecurityToken">
             <summary>Gets or sets the security token.</summary>
            
             <value>The security token.</value>
        </member>
        <member name="P:NServiceKit.Html.AntiXsrf.AntiForgeryToken.Username">
             <summary>Gets or sets the username.</summary>
            
             <value>The username.</value>
        </member>
        <member name="M:NServiceKit.Html.AntiXsrf.IAntiForgeryTokenSerializer.Deserialize(System.String)">
             <summary>true this object to the given stream.</summary>
            
             <param name="serializedToken">The serialized token.</param>
            
             <returns>An AntiForgeryToken.</returns>
        </member>
        <member name="M:NServiceKit.Html.AntiXsrf.IAntiForgeryTokenSerializer.Serialize(NServiceKit.Html.AntiXsrf.AntiForgeryToken)">
             <summary>true this object to the given stream.</summary>
            
             <param name="token">The token.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.Html.AntiXsrf.AntiForgeryTokenSerializer.Deserialize(System.String)">
             <summary>true this object to the given stream.</summary>
            
             <exception>Thrown when a Create Deserialization Failed error condition occurs.</exception>
            
             <param name="serializedToken">The serialized token.</param>
            
             <returns>An AntiForgeryToken.</returns>
        </member>
        <member name="M:NServiceKit.Html.AntiXsrf.AntiForgeryTokenSerializer.Serialize(NServiceKit.Html.AntiXsrf.AntiForgeryToken)">
             <summary>true this object to the given stream.</summary>
            
             <param name="token">The token.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.Html.AntiXsrf.ITokenStore.GetCookieToken(System.Web.HttpContextBase)">
             <summary>Gets cookie token.</summary>
            
             <param name="httpContext">Context for the HTTP.</param>
            
             <returns>The cookie token.</returns>
        </member>
        <member name="M:NServiceKit.Html.AntiXsrf.ITokenStore.GetFormToken(System.Web.HttpContextBase)">
             <summary>Gets form token.</summary>
            
             <param name="httpContext">Context for the HTTP.</param>
            
             <returns>The form token.</returns>
        </member>
        <member name="M:NServiceKit.Html.AntiXsrf.ITokenStore.SaveCookieToken(System.Web.HttpContextBase,NServiceKit.Html.AntiXsrf.AntiForgeryToken)">
             <summary>Saves a cookie token.</summary>
            
             <param name="httpContext">Context for the HTTP.</param>
             <param name="token">      The token.</param>
        </member>
        <member name="M:NServiceKit.Html.AntiXsrf.AntiForgeryTokenStore.GetCookieToken(System.Web.HttpContextBase)">
             <summary>Gets cookie token.</summary>
            
             <param name="httpContext">Context for the HTTP.</param>
            
             <returns>The cookie token.</returns>
        </member>
        <member name="M:NServiceKit.Html.AntiXsrf.AntiForgeryTokenStore.GetFormToken(System.Web.HttpContextBase)">
             <summary>Gets form token.</summary>
            
             <param name="httpContext">Context for the HTTP.</param>
            
             <returns>The form token.</returns>
        </member>
        <member name="M:NServiceKit.Html.AntiXsrf.AntiForgeryTokenStore.SaveCookieToken(System.Web.HttpContextBase,NServiceKit.Html.AntiXsrf.AntiForgeryToken)">
             <summary>Saves a cookie token.</summary>
            
             <param name="httpContext">Context for the HTTP.</param>
             <param name="token">      The token.</param>
        </member>
        <member name="M:NServiceKit.Html.AntiXsrf.BinaryBlob.Equals(System.Object)">
             <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</summary>
            
             <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
            
             <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.</returns>
        </member>
        <member name="M:NServiceKit.Html.AntiXsrf.BinaryBlob.Equals(NServiceKit.Html.AntiXsrf.BinaryBlob)">
             <summary>Tests if this BinaryBlob is considered equal to another.</summary>
            
             <param name="other">The binary BLOB to compare to this object.</param>
            
             <returns>true if the objects are considered equal, false if they are not.</returns>
        </member>
        <member name="M:NServiceKit.Html.AntiXsrf.BinaryBlob.GetData">
             <summary>Gets the data.</summary>
            
             <returns>An array of byte.</returns>
        </member>
        <member name="M:NServiceKit.Html.AntiXsrf.BinaryBlob.GetHashCode">
             <summary>Serves as a hash function for a particular type.</summary>
            
             <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
        </member>
        <member name="P:NServiceKit.Html.AntiXsrf.BinaryBlob.BitLength">
             <summary>Gets the length of the bit.</summary>
            
             <value>The length of the bit.</value>
        </member>
        <member name="M:NServiceKit.Html.AntiXsrf.IClaimUidExtractor.ExtractClaimUid(System.Security.Principal.IIdentity)">
             <summary>Extracts the claim UID described by identity.</summary>
            
             <param name="identity">The identity.</param>
            
             <returns>The extracted claim UID.</returns>
        </member>
        <member name="M:NServiceKit.Html.AntiXsrf.ClaimUidExtractor.ExtractClaimUid(System.Security.Principal.IIdentity)">
             <summary>Extracts the claim UID described by identity.</summary>
            
             <param name="identity">The identity.</param>
            
             <returns>The extracted claim UID.</returns>
        </member>
        <member name="T:NServiceKit.Html.AntiXsrf.HttpAntiForgeryException">
            <summary>Exception for signalling HTTP anti forgery errors.</summary>
        </member>
        <member name="M:NServiceKit.Html.AntiXsrf.HttpAntiForgeryException.#ctor">
            <summary>Initializes a new instance of the NServiceKit.Html.AntiXsrf.HttpAntiForgeryException class.</summary>
        </member>
        <member name="M:NServiceKit.Html.AntiXsrf.HttpAntiForgeryException.#ctor(System.String)">
             <summary>Initializes a new instance of the NServiceKit.Html.AntiXsrf.HttpAntiForgeryException class.</summary>
            
             <param name="message">The message.</param>
        </member>
        <member name="M:NServiceKit.Html.AntiXsrf.HttpAntiForgeryException.#ctor(System.String,System.Exception)">
             <summary>Initializes a new instance of the NServiceKit.Html.AntiXsrf.HttpAntiForgeryException class.</summary>
            
             <param name="message">       The message.</param>
             <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:NServiceKit.Html.AntiXsrf.IAntiForgeryAdditionalDataProvider">
            <summary>
            Allows providing or validating additional custom data for anti-forgery tokens.
            For example, the developer could use this to supply a nonce when the token is
            generated, then he could validate the nonce when the token is validated.
            </summary>
            <remarks>
            The anti-forgery system already embeds the client's username within the
            generated tokens. This interface provides and consumes <em>supplemental</em>
            data. If an incoming anti-forgery token contains supplemental data but no
            additional data provider is configured, the supplemental data will not be
            validated.
            </remarks>
        </member>
        <member name="M:NServiceKit.Html.AntiXsrf.IAntiForgeryAdditionalDataProvider.GetAdditionalData(System.Web.HttpContextBase)">
            <summary>
            Provides additional data to be stored for the anti-forgery tokens generated
            during this request.
            </summary>
            <param name="context">Information about the current request.</param>
            <returns>Supplemental data to embed within the anti-forgery token.</returns>
        </member>
        <member name="M:NServiceKit.Html.AntiXsrf.IAntiForgeryAdditionalDataProvider.ValidateAdditionalData(System.Web.HttpContextBase,System.String)">
            <summary>
            Validates additional data that was embedded inside an incoming anti-forgery
            token.
            </summary>
            <param name="context">Information about the current request.</param>
            <param name="additionalData">Supplemental data that was embedded within the token.</param>
            <returns>True if the data is valid; false if the data is invalid.</returns>
        </member>
        <member name="M:NServiceKit.Html.AntiXsrf.ICryptoSystem.Protect(System.Byte[])">
             <summary>Protects the given data.</summary>
            
             <param name="data">The data.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.Html.AntiXsrf.ICryptoSystem.Unprotect(System.String)">
             <summary>Unprotects.</summary>
            
             <param name="protectedData">Information describing the protected.</param>
            
             <returns>A byte[].</returns>
        </member>
        <member name="M:NServiceKit.Html.AntiXsrf.MachineKey45CryptoSystem.Protect(System.Byte[])">
             <summary>Protects the given data.</summary>
            
             <param name="data">The data.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.Html.AntiXsrf.MachineKey45CryptoSystem.Unprotect(System.String)">
             <summary>Unprotects.</summary>
            
             <param name="protectedData">Information describing the protected.</param>
            
             <returns>A byte[].</returns>
        </member>
        <member name="P:NServiceKit.Html.AntiXsrf.MachineKey45CryptoSystem.Instance">
             <summary>Gets the instance.</summary>
            
             <value>The instance.</value>
        </member>
        <member name="M:NServiceKit.Html.AntiXsrf.TokenValidator.GenerateCookieToken">
             <summary>Generates a cookie token.</summary>
            
             <returns>The cookie token.</returns>
        </member>
        <member name="M:NServiceKit.Html.AntiXsrf.TokenValidator.GenerateFormToken(System.Web.HttpContextBase,System.Security.Principal.IIdentity,NServiceKit.Html.AntiXsrf.AntiForgeryToken)">
             <summary>Generates a form token.</summary>
            
             <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            
             <param name="httpContext">Context for the HTTP.</param>
             <param name="identity">   The identity.</param>
             <param name="cookieToken">The cookie token.</param>
            
             <returns>The form token.</returns>
        </member>
        <member name="M:NServiceKit.Html.AntiXsrf.TokenValidator.IsCookieTokenValid(NServiceKit.Html.AntiXsrf.AntiForgeryToken)">
             <summary>Query if 'cookieToken' is cookie token valid.</summary>
            
             <param name="cookieToken">The cookie token.</param>
            
             <returns>true if cookie token valid, false if not.</returns>
        </member>
        <member name="M:NServiceKit.Html.AntiXsrf.TokenValidator.ValidateTokens(System.Web.HttpContextBase,System.Security.Principal.IIdentity,NServiceKit.Html.AntiXsrf.AntiForgeryToken,NServiceKit.Html.AntiXsrf.AntiForgeryToken)">
             <summary>Validates the tokens.</summary>
            
             <exception cref="T:NServiceKit.Html.AntiXsrf.HttpAntiForgeryException">            Thrown when a Create Cookie Missing error condition occurs.</exception>
             <exception cref="T:NServiceKit.Html.AntiXsrf.HttpAntiForgeryException">         Thrown when a Create Form Field Missing error condition occurs.</exception>
             <exception cref="T:NServiceKit.Html.AntiXsrf.HttpAntiForgeryException">            Thrown when a Create Tokens Swapped error condition occurs.</exception>
             <exception cref="T:NServiceKit.Html.AntiXsrf.HttpAntiForgeryException">    Thrown when a Create Security Token Mismatch error condition occurs.</exception>
             <exception cref="T:NServiceKit.Html.AntiXsrf.HttpAntiForgeryException">         Thrown when a Create Username Mismatch error condition occurs.</exception>
             <exception cref="T:NServiceKit.Html.AntiXsrf.HttpAntiForgeryException">         Thrown when a Create Claim UID Mismatch error condition occurs.</exception>
             <exception cref="T:NServiceKit.Html.AntiXsrf.HttpAntiForgeryException">Thrown when a Create Additional Data Check Failed error condition occurs.</exception>
            
             <param name="httpContext"> Context for the HTTP.</param>
             <param name="identity">    The identity.</param>
             <param name="sessionToken">The session token.</param>
             <param name="fieldToken">  The field token.</param>
        </member>
        <member name="M:NServiceKit.Html.Claims.Claim.#ctor(System.String,System.String)">
             <summary>Initializes a new instance of the NServiceKit.Html.Claims.Claim class.</summary>
            
             <param name="claimType">The type of the claim.</param>
             <param name="value">    The value.</param>
        </member>
        <member name="P:NServiceKit.Html.Claims.Claim.ClaimType">
             <summary>Gets the type of the claim.</summary>
            
             <value>The type of the claim.</value>
        </member>
        <member name="P:NServiceKit.Html.Claims.Claim.Value">
             <summary>Gets the value.</summary>
            
             <value>The value.</value>
        </member>
        <member name="M:NServiceKit.Html.Claims.Claim.ClaimFactory`1.Create(`0)">
             <summary>Creates a new Claim.</summary>
            
             <param name="claim">The claim.</param>
            
             <returns>A Claim.</returns>
        </member>
        <member name="M:NServiceKit.Html.Claims.ClaimsIdentity.GetClaims">
             <summary>Gets the claims in this collection.</summary>
            
             <returns>An enumerator that allows foreach to be used to process the claims in this collection.</returns>
        </member>
        <member name="M:NServiceKit.Html.Claims.ClaimsIdentity.ClaimsIdentityImpl`2.#ctor(`0)">
             <summary>Initializes a new instance of the NServiceKit.Html.Claims.ClaimsIdentity.ClaimsIdentityImpl&lt;TClaimsIdentity, TClaim&gt; class.</summary>
            
             <param name="claimsIdentity">The claims identity.</param>
        </member>
        <member name="M:NServiceKit.Html.Claims.ClaimsIdentity.ClaimsIdentityImpl`2.GetClaims">
             <summary>Gets the claims in this collection.</summary>
            
             <returns>An enumerator that allows foreach to be used to process the claims in this collection.</returns>
        </member>
        <member name="M:NServiceKit.Html.Claims.ClaimsIdentityConverter.TryConvert(System.Security.Principal.IIdentity)">
             <summary>Try convert.</summary>
            
             <param name="identity">The identity.</param>
            
             <returns>A ClaimsIdentity.</returns>
        </member>
        <member name="T:NServiceKit.Html.EmptyModelMetadataProvider">
            <summary>An empty model metadata provider.</summary>
        </member>
        <member name="T:NServiceKit.Html.ModelMetadataProvider">
            <summary>A model metadata provider.</summary>
        </member>
        <member name="M:NServiceKit.Html.ModelMetadataProvider.GetMetadataForProperties(System.Object,System.Type)">
             <summary>Gets the metadata for properties in this collection.</summary>
            
             <param name="container">    The container.</param>
             <param name="containerType">Type of the container.</param>
            
             <returns>An enumerator that allows foreach to be used to process the metadata for properties in this collection.</returns>
        </member>
        <member name="M:NServiceKit.Html.ModelMetadataProvider.GetMetadataForProperty(System.Func{System.Object},System.Type,System.String)">
             <summary>Gets metadata for property.</summary>
            
             <param name="modelAccessor">The model accessor.</param>
             <param name="containerType">Type of the container.</param>
             <param name="propertyName"> Name of the property.</param>
            
             <returns>The metadata for property.</returns>
        </member>
        <member name="M:NServiceKit.Html.ModelMetadataProvider.GetMetadataForType(System.Func{System.Object},System.Type)">
             <summary>Gets metadata for type.</summary>
            
             <param name="modelAccessor">The model accessor.</param>
             <param name="modelType">    Type of the model.</param>
            
             <returns>The metadata for type.</returns>
        </member>
        <member name="M:NServiceKit.Html.EmptyModelMetadataProvider.CreateMetadata(System.Collections.Generic.IEnumerable{System.Attribute},System.Type,System.Func{System.Object},System.Type,System.String)">
             <summary>Creates a metadata.</summary>
            
             <param name="attributes">   The attributes.</param>
             <param name="containerType">Type of the container.</param>
             <param name="modelAccessor">The model accessor.</param>
             <param name="modelType">    Type of the model.</param>
             <param name="propertyName"> Name of the property.</param>
            
             <returns>The new metadata.</returns>
        </member>
        <member name="M:NServiceKit.Html.EmptyModelMetadataProvider.GetMetadataForProperties(System.Object,System.Type)">
             <summary>Gets the metadata for properties in this collection.</summary>
            
             <param name="container">    The container.</param>
             <param name="containerType">Type of the container.</param>
            
             <returns>An enumerator that allows foreach to be used to process the metadata for properties in this collection.</returns>
        </member>
        <member name="M:NServiceKit.Html.EmptyModelMetadataProvider.GetMetadataForProperty(System.Func{System.Object},System.Type,System.String)">
             <summary>Gets metadata for property.</summary>
            
             <param name="modelAccessor">The model accessor.</param>
             <param name="containerType">Type of the container.</param>
             <param name="propertyName"> Name of the property.</param>
            
             <returns>The metadata for property.</returns>
        </member>
        <member name="M:NServiceKit.Html.EmptyModelMetadataProvider.GetMetadataForType(System.Func{System.Object},System.Type)">
             <summary>Gets metadata for type.</summary>
            
             <param name="modelAccessor">The model accessor.</param>
             <param name="modelType">    Type of the model.</param>
            
             <returns>The metadata for type.</returns>
        </member>
        <member name="M:NServiceKit.Html.Error.ViewDataDictionary_WrongTModelType(System.Type,System.Type)">
             <summary>View data dictionary wrong t model type.</summary>
            
             <param name="valueType">Type of the value.</param>
             <param name="modelType">Type of the model.</param>
            
             <returns>An InvalidOperationException.</returns>
        </member>
        <member name="M:NServiceKit.Html.Error.ViewDataDictionary_ModelCannotBeNull(System.Type)">
             <summary>View data dictionary model cannot be null.</summary>
            
             <param name="modelType">Type of the model.</param>
            
             <returns>An InvalidOperationException.</returns>
        </member>
        <member name="M:NServiceKit.Html.Error.ParameterCannotBeNullOrEmpty(System.String)">
             <summary>Parameter cannot be null or empty.</summary>
            
             <param name="parameterName">Name of the parameter.</param>
            
             <returns>An ArgumentException.</returns>
        </member>
        <member name="T:NServiceKit.Html.FieldValidationMetadata">
            <summary>A field validation metadata.</summary>
        </member>
        <member name="P:NServiceKit.Html.FieldValidationMetadata.FieldName">
             <summary>Gets or sets the name of the field.</summary>
            
             <value>The name of the field.</value>
        </member>
        <member name="P:NServiceKit.Html.FieldValidationMetadata.ReplaceValidationMessageContents">
             <summary>Gets or sets a value indicating whether the replace validation message contents.</summary>
            
             <value>true if replace validation message contents, false if not.</value>
        </member>
        <member name="P:NServiceKit.Html.FieldValidationMetadata.ValidationMessageId">
             <summary>Gets or sets the identifier of the validation message.</summary>
            
             <value>The identifier of the validation message.</value>
        </member>
        <member name="P:NServiceKit.Html.FieldValidationMetadata.ValidationRules">
             <summary>Gets the validation rules.</summary>
            
             <value>The validation rules.</value>
        </member>
        <member name="T:NServiceKit.Html.FormContext">
            <summary>A form context.</summary>
        </member>
        <member name="M:NServiceKit.Html.FormContext.GetJsonValidationMetadata">
             <summary>Gets JSON validation metadata.</summary>
            
             <returns>The JSON validation metadata.</returns>
        </member>
        <member name="M:NServiceKit.Html.FormContext.GetValidationMetadataForField(System.String)">
             <summary>Gets validation metadata for field.</summary>
            
             <param name="fieldName">Name of the field.</param>
            
             <returns>The validation metadata for field.</returns>
        </member>
        <member name="M:NServiceKit.Html.FormContext.GetValidationMetadataForField(System.String,System.Boolean)">
             <summary>Gets validation metadata for field.</summary>
            
             <exception>Thrown when a parameter cannot be null or empty error condition occurs.</exception>
            
             <param name="fieldName">       Name of the field.</param>
             <param name="createIfNotFound">true to create if not found.</param>
            
             <returns>The validation metadata for field.</returns>
        </member>
        <member name="M:NServiceKit.Html.FormContext.RenderedField(System.String)">
             <summary>Rendered field.</summary>
            
             <param name="fieldName">Name of the field.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.Html.FormContext.RenderedField(System.String,System.Boolean)">
             <summary>Rendered field.</summary>
            
             <param name="fieldName">Name of the field.</param>
             <param name="value">    true to value.</param>
        </member>
        <member name="P:NServiceKit.Html.FormContext.FieldValidators">
             <summary>Gets the field validators.</summary>
            
             <value>The field validators.</value>
        </member>
        <member name="P:NServiceKit.Html.FormContext.FormId">
             <summary>Gets or sets the identifier of the form.</summary>
            
             <value>The identifier of the form.</value>
        </member>
        <member name="P:NServiceKit.Html.FormContext.ReplaceValidationSummary">
             <summary>Gets or sets a value indicating whether the replace validation summary.</summary>
            
             <value>true if replace validation summary, false if not.</value>
        </member>
        <member name="P:NServiceKit.Html.FormContext.ValidationSummaryId">
             <summary>Gets or sets the identifier of the validation summary.</summary>
            
             <value>The identifier of the validation summary.</value>
        </member>
        <member name="T:NServiceKit.Html.FormMethod">
            <summary>Values that represent FormMethod.</summary>
        </member>
        <member name="F:NServiceKit.Html.FormMethod.Get">
            <summary>An enum constant representing the get option.</summary>
        </member>
        <member name="F:NServiceKit.Html.FormMethod.Post">
            <summary>An enum constant representing the post option.</summary>
        </member>
        <member name="T:NServiceKit.Html.HtmlHelper`1">
            <summary>A HTML helper.</summary>
            <typeparam name="TModel">Type of the model.</typeparam>
        </member>
        <member name="T:NServiceKit.Html.HtmlHelper">
            <summary>A HTML helper.</summary>
        </member>
        <member name="F:NServiceKit.Html.HtmlHelper.ValidationInputCssClassName">
            <summary>Name of the validation input CSS class.</summary>
        </member>
        <member name="F:NServiceKit.Html.HtmlHelper.ValidationInputValidCssClassName">
            <summary>Name of the validation input valid CSS class.</summary>
        </member>
        <member name="F:NServiceKit.Html.HtmlHelper.ValidationMessageCssClassName">
            <summary>Name of the validation message CSS class.</summary>
        </member>
        <member name="F:NServiceKit.Html.HtmlHelper.ValidationMessageValidCssClassName">
            <summary>Name of the validation message valid CSS class.</summary>
        </member>
        <member name="F:NServiceKit.Html.HtmlHelper.ValidationSummaryCssClassName">
            <summary>Name of the validation summary CSS class.</summary>
        </member>
        <member name="F:NServiceKit.Html.HtmlHelper.ValidationSummaryValidCssClassName">
            <summary>Name of the validation summary valid CSS class.</summary>
        </member>
        <member name="F:NServiceKit.Html.HtmlHelper.HtmlExtensions">
            <summary>The HTML extensions.</summary>
        </member>
        <member name="M:NServiceKit.Html.HtmlHelper.GetMethod(System.String)">
             <summary>Gets a method.</summary>
            
             <param name="methodName">Name of the method.</param>
            
             <returns>The method.</returns>
        </member>
        <member name="M:NServiceKit.Html.HtmlHelper.Init(NServiceKit.Html.IViewEngine,NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse,NServiceKit.Html.IRazorView,System.Collections.Generic.Dictionary{System.String,System.Object},NServiceKit.Html.ViewDataDictionary)">
             <summary>Initialises this object.</summary>
            
             <param name="viewEngine">The view engine.</param>
             <param name="httpReq">   The HTTP request.</param>
             <param name="httpRes">   The HTTP resource.</param>
             <param name="razorPage"> The razor page.</param>
             <param name="scopeArgs"> The scope arguments.</param>
             <param name="viewData">  Information describing the view.</param>
        </member>
        <member name="M:NServiceKit.Html.HtmlHelper.#ctor">
            <summary>Initializes a new instance of the NServiceKit.Html.HtmlHelper class.</summary>
        </member>
        <member name="M:NServiceKit.Html.HtmlHelper.Init(NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownPage,System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean,NServiceKit.Html.ViewDataDictionary,NServiceKit.Html.HtmlHelper)">
             <summary>Initialises this object.</summary>
            
             <param name="markdownPage">The markdown page.</param>
             <param name="scopeArgs">   The scope arguments.</param>
             <param name="renderHtml">  true to render HTML.</param>
             <param name="viewData">    Information describing the view.</param>
             <param name="htmlHelper">  The HTML helper.</param>
        </member>
        <member name="M:NServiceKit.Html.HtmlHelper.Init(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse,NServiceKit.Html.IViewEngine,NServiceKit.Html.ViewDataDictionary,NServiceKit.Html.HtmlHelper)">
             <summary>Initialises this object.</summary>
            
             <param name="httpReq">   The HTTP request.</param>
             <param name="httpRes">   The HTTP resource.</param>
             <param name="viewEngine">The view engine.</param>
             <param name="viewData">  Information describing the view.</param>
             <param name="htmlHelper">The HTML helper.</param>
        </member>
        <member name="M:NServiceKit.Html.HtmlHelper.Partial(System.String)">
             <summary>Partials.</summary>
            
             <param name="viewName">Name of the view.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.HtmlHelper.Partial(System.String,System.Object)">
             <summary>Partials.</summary>
            
             <param name="viewName">Name of the view.</param>
             <param name="model">   The model.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.HtmlHelper.Debug(System.Object)">
             <summary>Debugs the given model.</summary>
            
             <param name="model">The model.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.Html.HtmlHelper.SetModel(System.Object)">
             <summary>Sets a model.</summary>
            
             <param name="model">The model.</param>
        </member>
        <member name="M:NServiceKit.Html.HtmlHelper.AnonymousObjectToHtmlAttributes(System.Object)">
             <summary>Anonymous object to HTML attributes.</summary>
            
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A RouteValueDictionary.</returns>
        </member>
        <member name="M:NServiceKit.Html.HtmlHelper.AntiForgeryToken">
             <summary>Anti forgery token.</summary>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.HtmlHelper.AntiForgeryToken(System.String)">
             <summary>Anti forgery token.</summary>
            
             <exception cref="T:System.NotSupportedException">Thrown when the requested operation is not supported.</exception>
            
             <param name="salt">The salt.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.HtmlHelper.AntiForgeryToken(System.String,System.String,System.String)">
             <summary>Anti forgery token.</summary>
            
             <exception cref="T:System.NotSupportedException">Thrown when the requested operation is not supported.</exception>
            
             <param name="salt">  The salt.</param>
             <param name="domain">The domain.</param>
             <param name="path">  Full pathname of the file.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.HtmlHelper.AttributeEncode(System.String)">
             <summary>Attribute encode.</summary>
            
             <param name="value">The value.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.Html.HtmlHelper.AttributeEncode(System.Object)">
             <summary>Attribute encode.</summary>
            
             <param name="value">The value.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.Html.HtmlHelper.EnableClientValidation">
            <summary>Enables the client validation.</summary>
        </member>
        <member name="M:NServiceKit.Html.HtmlHelper.EnableClientValidation(System.Boolean)">
             <summary>Enables the client validation.</summary>
            
             <param name="enabled">true to enable, false to disable.</param>
        </member>
        <member name="M:NServiceKit.Html.HtmlHelper.EnableUnobtrusiveJavaScript">
            <summary>Enables the unobtrusive java script.</summary>
        </member>
        <member name="M:NServiceKit.Html.HtmlHelper.EnableUnobtrusiveJavaScript(System.Boolean)">
             <summary>Enables the unobtrusive java script.</summary>
            
             <param name="enabled">true to enable, false to disable.</param>
        </member>
        <member name="M:NServiceKit.Html.HtmlHelper.Encode(System.String)">
             <summary>Encodes the given value.</summary>
            
             <param name="value">The value.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.Html.HtmlHelper.Encode(System.Object)">
             <summary>Encodes the given value.</summary>
            
             <param name="value">The value.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.Html.HtmlHelper.FormatValue(System.Object,System.String)">
             <summary>Format value.</summary>
            
             <param name="value"> The value.</param>
             <param name="format">Describes the format to use.</param>
            
             <returns>The formatted value.</returns>
        </member>
        <member name="M:NServiceKit.Html.HtmlHelper.GenerateIdFromName(System.String)">
             <summary>Generates an identifier from name.</summary>
            
             <param name="name">The name.</param>
            
             <returns>The identifier from name.</returns>
        </member>
        <member name="M:NServiceKit.Html.HtmlHelper.GenerateIdFromName(System.String,System.String)">
             <summary>Generates an identifier from name.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <param name="name">                     The name.</param>
             <param name="idAttributeDotReplacement">The identifier attribute dot replacement.</param>
            
             <returns>The identifier from name.</returns>
        </member>
        <member name="M:NServiceKit.Html.HtmlHelper.GetFormMethodString(NServiceKit.Html.FormMethod)">
             <summary>Gets form method string.</summary>
            
             <param name="method">The method.</param>
            
             <returns>The form method string.</returns>
        </member>
        <member name="M:NServiceKit.Html.HtmlHelper.GetInputTypeString(NServiceKit.Html.InputType)">
             <summary>Gets input type string.</summary>
            
             <param name="inputType">Type of the input.</param>
            
             <returns>The input type string.</returns>
        </member>
        <member name="M:NServiceKit.Html.HtmlHelper.GetUnobtrusiveValidationAttributes(System.String)">
             <summary>Gets unobtrusive validation attributes.</summary>
            
             <param name="name">The name.</param>
            
             <returns>The unobtrusive validation attributes.</returns>
        </member>
        <member name="M:NServiceKit.Html.HtmlHelper.GetUnobtrusiveValidationAttributes(System.String,NServiceKit.Html.ModelMetadata)">
             <summary>
             Only render attributes if unobtrusive client-side validation is enabled, and then only if we've never rendered validation for a field with this name in this form. Also, if there's no form
             context, then we can't render the attributes (we'd have no form to attach them to).
             </summary>
            
             <param name="name">    The name.</param>
             <param name="metadata">The metadata.</param>
            
             <returns>The unobtrusive validation attributes.</returns>
        </member>
        <member name="M:NServiceKit.Html.HtmlHelper.HttpMethodOverride(NServiceKit.Html.HttpVerbs)">
             <summary>HTTP method override.</summary>
            
             <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or illegal values.</exception>
            
             <param name="httpVerb">The HTTP verb.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.HtmlHelper.HttpMethodOverride(System.String)">
             <summary>HTTP method override.</summary>
            
             <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or illegal values.</exception>
            
             <param name="httpMethod">The HTTP method.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.HtmlHelper.Raw(System.Object)">
             <summary>Raws the given content.</summary>
            
             <param name="content">The content.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="P:NServiceKit.Html.HtmlHelper.RenderHtml">
             <summary>Gets a value indicating whether the HTML should be rendered.</summary>
            
             <value>true if render html, false if not.</value>
        </member>
        <member name="P:NServiceKit.Html.HtmlHelper.HttpRequest">
             <summary>Gets or sets the HTTP request.</summary>
            
             <value>The HTTP request.</value>
        </member>
        <member name="P:NServiceKit.Html.HtmlHelper.HttpResponse">
             <summary>Gets or sets the HTTP response.</summary>
            
             <value>The HTTP response.</value>
        </member>
        <member name="P:NServiceKit.Html.HtmlHelper.Writer">
             <summary>Gets or sets the writer.</summary>
            
             <value>The writer.</value>
        </member>
        <member name="P:NServiceKit.Html.HtmlHelper.ViewEngine">
             <summary>Gets or sets the view engine.</summary>
            
             <value>The view engine.</value>
        </member>
        <member name="P:NServiceKit.Html.HtmlHelper.RazorPage">
             <summary>Gets the razor page.</summary>
            
             <value>The razor page.</value>
        </member>
        <member name="P:NServiceKit.Html.HtmlHelper.MarkdownPage">
             <summary>Gets the markdown page.</summary>
            
             <value>The markdown page.</value>
        </member>
        <member name="P:NServiceKit.Html.HtmlHelper.ScopeArgs">
             <summary>Gets the scope arguments.</summary>
            
             <value>The scope arguments.</value>
        </member>
        <member name="P:NServiceKit.Html.HtmlHelper.ClientValidationEnabled">
             <summary>Gets or sets a value indicating whether the client validation is enabled.</summary>
            
             <value>true if client validation enabled, false if not.</value>
        </member>
        <member name="P:NServiceKit.Html.HtmlHelper.UnobtrusiveJavaScriptEnabled">
             <summary>Gets or sets a value indicating whether the unobtrusive java script is enabled.</summary>
            
             <value>true if unobtrusive java script enabled, false if not.</value>
        </member>
        <member name="P:NServiceKit.Html.HtmlHelper.ViewContext">
             <summary>Gets a context for the view.</summary>
            
             <value>The view context.</value>
        </member>
        <member name="P:NServiceKit.Html.HtmlHelper.ViewData">
             <summary>Gets information describing the view.</summary>
            
             <value>Information describing the view.</value>
        </member>
        <member name="P:NServiceKit.Html.HtmlHelper.ViewDataContainer">
             <summary>Gets the view data container.</summary>
            
             <value>The view data container.</value>
        </member>
        <member name="P:NServiceKit.Html.HtmlHelper`1.ViewData">
             <summary>Gets information describing the view.</summary>
            
             <value>Information describing the view.</value>
        </member>
        <member name="T:NServiceKit.Html.HttpVerbs">
            <summary>Bitfield of flags for specifying HttpVerbs.</summary>
        </member>
        <member name="F:NServiceKit.Html.HttpVerbs.Get">
            <summary>A binary constant representing the get flag.</summary>
        </member>
        <member name="F:NServiceKit.Html.HttpVerbs.Post">
            <summary>A binary constant representing the post flag.</summary>
        </member>
        <member name="F:NServiceKit.Html.HttpVerbs.Put">
            <summary>A binary constant representing the put flag.</summary>
        </member>
        <member name="F:NServiceKit.Html.HttpVerbs.Delete">
            <summary>A binary constant representing the delete flag.</summary>
        </member>
        <member name="F:NServiceKit.Html.HttpVerbs.Head">
            <summary>A binary constant representing the head flag.</summary>
        </member>
        <member name="F:NServiceKit.Html.HttpVerbs.Patch">
            <summary>A binary constant representing the patch flag.</summary>
        </member>
        <member name="F:NServiceKit.Html.HttpVerbs.Options">
            <summary>A binary constant representing the options flag.</summary>
        </member>
        <member name="T:NServiceKit.Html.InputType">
            <summary>Values that represent InputType.</summary>
        </member>
        <member name="F:NServiceKit.Html.InputType.CheckBox">
            <summary>An enum constant representing the check box option.</summary>
        </member>
        <member name="F:NServiceKit.Html.InputType.Hidden">
            <summary>An enum constant representing the hidden option.</summary>
        </member>
        <member name="F:NServiceKit.Html.InputType.Password">
            <summary>An enum constant representing the password option.</summary>
        </member>
        <member name="F:NServiceKit.Html.InputType.Radio">
            <summary>An enum constant representing the radio option.</summary>
        </member>
        <member name="F:NServiceKit.Html.InputType.Text">
            <summary>An enum constant representing the text option.</summary>
        </member>
        <member name="T:NServiceKit.Html.IViewBag">
            <summary>Interface for view bag.</summary>
        </member>
        <member name="M:NServiceKit.Html.IViewBag.TryGetItem(System.String,System.Object@)">
             <summary>Attempts to get item from the given data.</summary>
            
             <param name="name">  The name.</param>
             <param name="result">The result.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="T:NServiceKit.Html.IRazorView">
            <summary>Interface for razor view.</summary>
        </member>
        <member name="M:NServiceKit.Html.IRazorView.SetChildPage(NServiceKit.Html.IRazorView,System.String)">
             <summary>Sets child page.</summary>
            
             <param name="childPage">The child page.</param>
             <param name="childBody">The child body.</param>
        </member>
        <member name="M:NServiceKit.Html.IRazorView.Init(NServiceKit.Html.IViewEngine,NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse)">
             <summary>Initialises this object.</summary>
            
             <param name="viewEngine">The view engine.</param>
             <param name="httpReq">   The HTTP request.</param>
             <param name="httpRes">   The HTTP resource.</param>
        </member>
        <member name="M:NServiceKit.Html.IRazorView.WriteTo(System.IO.StreamWriter)">
             <summary>Writes to.</summary>
            
             <param name="writer">The writer.</param>
        </member>
        <member name="M:NServiceKit.Html.IRazorView.IsSectionDefined(System.String)">
             <summary>Query if 'sectionName' is section defined.</summary>
            
             <param name="sectionName">Name of the section.</param>
            
             <returns>true if section defined, false if not.</returns>
        </member>
        <member name="M:NServiceKit.Html.IRazorView.RenderSection(System.String,System.IO.StreamWriter)">
             <summary>Renders the section.</summary>
            
             <param name="sectionName">Name of the section.</param>
             <param name="writer">     The writer.</param>
        </member>
        <member name="P:NServiceKit.Html.IRazorView.TypedViewBag">
             <summary>Gets the typed view bag.</summary>
            
             <value>The typed view bag.</value>
        </member>
        <member name="P:NServiceKit.Html.IRazorView.Layout">
             <summary>Gets or sets the layout.</summary>
            
             <value>The layout.</value>
        </member>
        <member name="P:NServiceKit.Html.IRazorView.ChildPage">
             <summary>Gets the child page.</summary>
            
             <value>The child page.</value>
        </member>
        <member name="P:NServiceKit.Html.IRazorView.ParentPage">
             <summary>Gets or sets the parent page.</summary>
            
             <value>The parent page.</value>
        </member>
        <member name="P:NServiceKit.Html.IResolver`1.Current">
             <summary>Gets the current.</summary>
            
             <value>The current.</value>
        </member>
        <member name="T:NServiceKit.Html.IViewDataContainer">
            <summary>Interface for view data container.</summary>
        </member>
        <member name="P:NServiceKit.Html.IViewDataContainer.ViewData">
             <summary>Gets or sets information describing the view.</summary>
            
             <value>Information describing the view.</value>
        </member>
        <member name="T:NServiceKit.Html.ModelClientValidationRule">
            <summary>A model client validation rule.</summary>
        </member>
        <member name="P:NServiceKit.Html.ModelClientValidationRule.ErrorMessage">
             <summary>Gets or sets a message describing the error.</summary>
            
             <value>A message describing the error.</value>
        </member>
        <member name="P:NServiceKit.Html.ModelClientValidationRule.ValidationParameters">
             <summary>Gets options for controlling the validation.</summary>
            
             <value>Options that control the validation.</value>
        </member>
        <member name="P:NServiceKit.Html.ModelClientValidationRule.ValidationType">
             <summary>Gets or sets the type of the validation.</summary>
            
             <value>The type of the validation.</value>
        </member>
        <member name="T:NServiceKit.Html.ModelError">
            <summary>A model error.</summary>
        </member>
        <member name="M:NServiceKit.Html.ModelError.#ctor(System.Exception)">
             <summary>Initializes a new instance of the NServiceKit.Html.ModelError class.</summary>
            
             <param name="exception">The exception.</param>
        </member>
        <member name="M:NServiceKit.Html.ModelError.#ctor(System.Exception,System.String)">
             <summary>Initializes a new instance of the NServiceKit.Html.ModelError class.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <param name="exception">   The exception.</param>
             <param name="errorMessage">A message describing the error.</param>
        </member>
        <member name="M:NServiceKit.Html.ModelError.#ctor(System.String)">
             <summary>Initializes a new instance of the NServiceKit.Html.ModelError class.</summary>
            
             <param name="errorMessage">A message describing the error.</param>
        </member>
        <member name="P:NServiceKit.Html.ModelError.Exception">
             <summary>Gets the exception.</summary>
            
             <value>The exception.</value>
        </member>
        <member name="P:NServiceKit.Html.ModelError.ErrorMessage">
             <summary>Gets a message describing the error.</summary>
            
             <value>A message describing the error.</value>
        </member>
        <member name="T:NServiceKit.Html.ModelErrorCollection">
            <summary>Collection of model errors.</summary>
        </member>
        <member name="M:NServiceKit.Html.ModelErrorCollection.Add(System.Exception)">
             <summary>Adds errorMessage.</summary>
            
             <param name="exception">The exception to add.</param>
        </member>
        <member name="M:NServiceKit.Html.ModelErrorCollection.Add(System.String)">
             <summary>Adds errorMessage.</summary>
            
             <param name="errorMessage">The error message to add.</param>
        </member>
        <member name="T:NServiceKit.Html.ModelState">
            <summary>A model state.</summary>
        </member>
        <member name="P:NServiceKit.Html.ModelState.Value">
             <summary>Gets or sets the value.</summary>
            
             <value>The value.</value>
        </member>
        <member name="P:NServiceKit.Html.ModelState.Errors">
             <summary>Gets the errors.</summary>
            
             <value>The errors.</value>
        </member>
        <member name="T:NServiceKit.Html.ModelStateDictionary">
            <summary>Dictionary of model states.</summary>
        </member>
        <member name="M:NServiceKit.Html.ModelStateDictionary.#ctor">
            <summary>Initializes a new instance of the NServiceKit.Html.ModelStateDictionary class.</summary>
        </member>
        <member name="M:NServiceKit.Html.ModelStateDictionary.#ctor(NServiceKit.Html.ModelStateDictionary)">
             <summary>Initializes a new instance of the NServiceKit.Html.ModelStateDictionary class.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:NServiceKit.Html.ModelStateDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,NServiceKit.Html.ModelState})">
             <summary>Adds key.</summary>
            
             <param name="item">The item to remove.</param>
        </member>
        <member name="M:NServiceKit.Html.ModelStateDictionary.Add(System.String,NServiceKit.Html.ModelState)">
             <summary>Adds key.</summary>
            
             <param name="key">  The key.</param>
             <param name="value">The value.</param>
        </member>
        <member name="M:NServiceKit.Html.ModelStateDictionary.AddModelError(System.String,System.Exception)">
             <summary>Adds a model error to 'errorMessage'.</summary>
            
             <param name="key">      The key.</param>
             <param name="exception">The exception.</param>
        </member>
        <member name="M:NServiceKit.Html.ModelStateDictionary.AddModelError(System.String,System.String)">
             <summary>Adds a model error to 'errorMessage'.</summary>
            
             <param name="key">         The key.</param>
             <param name="errorMessage">Message describing the error.</param>
        </member>
        <member name="M:NServiceKit.Html.ModelStateDictionary.Clear">
            <summary>Clears this object to its blank/initial state.</summary>
        </member>
        <member name="M:NServiceKit.Html.ModelStateDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,NServiceKit.Html.ModelState})">
             <summary>Query if this object contains the given item.</summary>
            
             <param name="item">The item to remove.</param>
            
             <returns>true if the object is in this collection, false if not.</returns>
        </member>
        <member name="M:NServiceKit.Html.ModelStateDictionary.ContainsKey(System.String)">
             <summary>Query if 'key' contains key.</summary>
            
             <param name="key">The key.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.Html.ModelStateDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,NServiceKit.Html.ModelState}[],System.Int32)">
             <summary>Copies to.</summary>
            
             <param name="array">     The array.</param>
             <param name="arrayIndex">Zero-based index of the array.</param>
        </member>
        <member name="M:NServiceKit.Html.ModelStateDictionary.GetEnumerator">
             <summary>Gets the enumerator.</summary>
            
             <returns>The enumerator.</returns>
        </member>
        <member name="M:NServiceKit.Html.ModelStateDictionary.IsValidField(System.String)">
             <summary>Query if 'key' is valid field.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <param name="key">The key to remove.</param>
            
             <returns>true if valid field, false if not.</returns>
        </member>
        <member name="M:NServiceKit.Html.ModelStateDictionary.Merge(NServiceKit.Html.ModelStateDictionary)">
             <summary>Merges the given dictionary.</summary>
            
             <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:NServiceKit.Html.ModelStateDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,NServiceKit.Html.ModelState})">
             <summary>Removes the given key.</summary>
            
             <param name="item">The item to remove.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.Html.ModelStateDictionary.Remove(System.String)">
             <summary>Removes the given key.</summary>
            
             <param name="key">The key to remove.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.Html.ModelStateDictionary.SetModelValue(System.String,NServiceKit.Html.ValueProviderResult)">
             <summary>Sets model value.</summary>
            
             <param name="key">  The key.</param>
             <param name="value">The value.</param>
        </member>
        <member name="M:NServiceKit.Html.ModelStateDictionary.TryGetValue(System.String,NServiceKit.Html.ModelState@)">
             <summary>Attempts to get value from the given data.</summary>
            
             <param name="key">  The key.</param>
             <param name="value">The value.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="P:NServiceKit.Html.ModelStateDictionary.Count">
             <summary>Gets the number of. </summary>
            
             <value>The count.</value>
        </member>
        <member name="P:NServiceKit.Html.ModelStateDictionary.IsReadOnly">
             <summary>Gets a value indicating whether this object is read only.</summary>
            
             <value>true if this object is read only, false if not.</value>
        </member>
        <member name="P:NServiceKit.Html.ModelStateDictionary.IsValid">
             <summary>Gets a value indicating whether this object is valid.</summary>
            
             <value>true if this object is valid, false if not.</value>
        </member>
        <member name="P:NServiceKit.Html.ModelStateDictionary.Keys">
             <summary>Gets the keys.</summary>
            
             <value>The keys.</value>
        </member>
        <member name="P:NServiceKit.Html.ModelStateDictionary.Item(System.String)">
             <summary>Indexer to get or set items within this collection using array index syntax.</summary>
            
             <param name="key">The key.</param>
            
             <returns>The indexed item.</returns>
        </member>
        <member name="P:NServiceKit.Html.ModelStateDictionary.Values">
             <summary>Gets the values.</summary>
            
             <value>The values.</value>
        </member>
        <member name="M:NServiceKit.Html.DictionaryHelpers.FindKeysWithPrefix``1(System.Collections.Generic.IDictionary{System.String,``0},System.String)">
             <summary>Finds the keys with prefixes in this collection.</summary>
            
             <typeparam name="TValue">Type of the value.</typeparam>
             <param name="dictionary">The dictionary.</param>
             <param name="prefix">    The prefix.</param>
            
             <returns>An enumerator that allows foreach to be used to process the keys with prefixes in this collection.</returns>
        </member>
        <member name="M:NServiceKit.Html.DictionaryHelpers.DoesAnyKeyHavePrefix``1(System.Collections.Generic.IDictionary{System.String,``0},System.String)">
             <summary>Query if 'dictionary' does any key have prefix.</summary>
            
             <typeparam name="TValue">Type of the value.</typeparam>
             <param name="dictionary">The dictionary.</param>
             <param name="prefix">    The prefix.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.Html.DictionaryHelpers.GetOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
             <summary>An IDictionary&lt;TKey,TValue&gt; extension method that gets or default.</summary>
            
             <typeparam name="TKey">  Type of the key.</typeparam>
             <typeparam name="TValue">Type of the value.</typeparam>
             <param name="dict">   The dict to act on.</param>
             <param name="key">    The key.</param>
             <param name="default">The default.</param>
            
             <returns>The or default.</returns>
        </member>
        <member name="T:NServiceKit.Html.MultiSelectList">
            <summary>List of multi selects.</summary>
        </member>
        <member name="M:NServiceKit.Html.MultiSelectList.#ctor(System.Collections.IEnumerable)">
             <summary>Initializes a new instance of the NServiceKit.Html.MultiSelectList class.</summary>
            
             <param name="items">The items.</param>
        </member>
        <member name="M:NServiceKit.Html.MultiSelectList.#ctor(System.Collections.IEnumerable,System.Collections.IEnumerable)">
             <summary>Initializes a new instance of the NServiceKit.Html.MultiSelectList class.</summary>
            
             <param name="items">         The items.</param>
             <param name="selectedValues">The selected values.</param>
        </member>
        <member name="M:NServiceKit.Html.MultiSelectList.#ctor(System.Collections.IEnumerable,System.String,System.String)">
             <summary>Initializes a new instance of the NServiceKit.Html.MultiSelectList class.</summary>
            
             <param name="items">         The items.</param>
             <param name="dataValueField">The data value field.</param>
             <param name="dataTextField"> The data text field.</param>
        </member>
        <member name="M:NServiceKit.Html.MultiSelectList.#ctor(System.Collections.IEnumerable,System.String,System.String,System.Collections.IEnumerable)">
             <summary>Initializes a new instance of the NServiceKit.Html.MultiSelectList class.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <param name="items">         The items.</param>
             <param name="dataValueField">The data value field.</param>
             <param name="dataTextField"> The data text field.</param>
             <param name="selectedValues">The selected values.</param>
        </member>
        <member name="M:NServiceKit.Html.MultiSelectList.GetEnumerator">
             <summary>Gets the enumerator.</summary>
            
             <returns>The enumerator.</returns>
        </member>
        <member name="P:NServiceKit.Html.MultiSelectList.DataTextField">
             <summary>Gets the data text field.</summary>
            
             <value>The data text field.</value>
        </member>
        <member name="P:NServiceKit.Html.MultiSelectList.DataValueField">
             <summary>Gets the data value field.</summary>
            
             <value>The data value field.</value>
        </member>
        <member name="P:NServiceKit.Html.MultiSelectList.Items">
             <summary>Gets the items.</summary>
            
             <value>The items.</value>
        </member>
        <member name="P:NServiceKit.Html.MultiSelectList.SelectedValues">
             <summary>Gets the selected values.</summary>
            
             <value>The selected values.</value>
        </member>
        <member name="T:NServiceKit.Html.MvcHtmlString">
            <summary>A mvc HTML string.</summary>
        </member>
        <member name="F:NServiceKit.Html.MvcHtmlString.Empty">
            <summary>imporant: this declaration must occur after the _creator declaration.</summary>
        </member>
        <member name="M:NServiceKit.Html.MvcHtmlString.#ctor(System.String)">
             <summary>Initializes a new instance of the NServiceKit.Html.MvcHtmlString class.</summary>
            
             <param name="value">The value.</param>
        </member>
        <member name="M:NServiceKit.Html.MvcHtmlString.Create(System.String)">
             <summary>Creates a new MvcHtmlString.</summary>
            
             <param name="value">The value.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.MvcHtmlString.IsNullOrEmpty(NServiceKit.Html.MvcHtmlString)">
             <summary>Queries if a null or is empty.</summary>
            
             <param name="value">The value.</param>
            
             <returns>true if a null or is empty, false if not.</returns>
        </member>
        <member name="M:NServiceKit.Html.MvcHtmlString.ToHtmlString">
             <summary>IHtmlString.ToHtmlString()</summary>
            
             <returns>This object as a string.</returns>
        </member>
        <member name="M:NServiceKit.Html.MvcHtmlString.ToString">
             <summary>Returns a string that represents the current object.</summary>
            
             <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:NServiceKit.Html.MvcResources">
            <summary>A mvc resources.</summary>
        </member>
        <member name="F:NServiceKit.Html.MvcResources.ViewMasterPage_RequiresViewPage">
            <summary>The view master page requires view page.</summary>
        </member>
        <member name="F:NServiceKit.Html.MvcResources.MvcRazorCodeParser_CannotHaveModelAndInheritsKeyword">
            <summary>The mvc razor code parser cannot have model and inherits keyword.</summary>
        </member>
        <member name="F:NServiceKit.Html.MvcResources.MvcRazorCodeParser_OnlyOneModelStatementIsAllowed">
            <summary>The mvc razor code parser only one model statement is allowed.</summary>
        </member>
        <member name="F:NServiceKit.Html.MvcResources.MvcRazorCodeParser_ModelKeywordMustBeFollowedByTypeName">
            <summary>Name of the mvc razor code parser model keyword must be followed by type.</summary>
        </member>
        <member name="F:NServiceKit.Html.MvcResources.HtmlHelper_TextAreaParameterOutOfRange">
            <summary>The HTML helper text area parameter out of range.</summary>
        </member>
        <member name="F:NServiceKit.Html.MvcResources.ValueProviderResult_ConversionThrew">
            <summary>The value provider result conversion threw.</summary>
        </member>
        <member name="F:NServiceKit.Html.MvcResources.ValueProviderResult_NoConverterExists">
            <summary>The value provider result no converter exists.</summary>
        </member>
        <member name="F:NServiceKit.Html.MvcResources.ViewDataDictionary_WrongTModelType">
            <summary>Type of the view data dictionary wrong t model.</summary>
        </member>
        <member name="F:NServiceKit.Html.MvcResources.ViewDataDictionary_ModelCannotBeNull">
            <summary>The view data dictionary model cannot be null.</summary>
        </member>
        <member name="F:NServiceKit.Html.MvcResources.Common_PropertyNotFound">
            <summary>The common property not found.</summary>
        </member>
        <member name="F:NServiceKit.Html.MvcResources.Common_NullOrEmpty">
            <summary>The common null or empty.</summary>
        </member>
        <member name="F:NServiceKit.Html.MvcResources.HtmlHelper_InvalidHttpVerb">
            <summary>The HTML helper invalid HTTP verb.</summary>
        </member>
        <member name="F:NServiceKit.Html.MvcResources.HtmlHelper_InvalidHttpMethod">
            <summary>The HTML helper invalid HTTP method.</summary>
        </member>
        <member name="F:NServiceKit.Html.MvcResources.TemplateHelpers_TemplateLimitations">
            <summary>The template helpers template limitations.</summary>
        </member>
        <member name="F:NServiceKit.Html.MvcResources.ExpressionHelper_InvalidIndexerExpression">
            <summary>The expression helper invalid indexer expression.</summary>
        </member>
        <member name="F:NServiceKit.Html.MvcResources.AntiForgeryToken_AdditionalDataCheckFailed">
            <summary>The anti forgery token additional data check failed.</summary>
        </member>
        <member name="F:NServiceKit.Html.MvcResources.AntiForgeryToken_ClaimUidMismatch">
            <summary>The anti forgery token claim UID mismatch.</summary>
        </member>
        <member name="F:NServiceKit.Html.MvcResources.AntiForgeryToken_CookieMissing">
            <summary>The anti forgery token cookie missing.</summary>
        </member>
        <member name="F:NServiceKit.Html.MvcResources.AntiForgeryToken_DeserializationFailed">
            <summary>The anti forgery token deserialization failed.</summary>
        </member>
        <member name="F:NServiceKit.Html.MvcResources.AntiForgeryToken_FormFieldMissing">
            <summary>The anti forgery token form field missing.</summary>
        </member>
        <member name="F:NServiceKit.Html.MvcResources.AntiForgeryToken_SecurityTokenMismatch">
            <summary>The anti forgery token security token mismatch.</summary>
        </member>
        <member name="F:NServiceKit.Html.MvcResources.AntiForgeryToken_TokensSwapped">
            <summary>The anti forgery token tokens swapped.</summary>
        </member>
        <member name="F:NServiceKit.Html.MvcResources.AntiForgeryToken_UsernameMismatch">
            <summary>The anti forgery token username mismatch.</summary>
        </member>
        <member name="F:NServiceKit.Html.MvcResources.AntiForgeryWorker_RequireSSL">
            <summary>The anti forgery config. require ssl.</summary>
        </member>
        <member name="F:NServiceKit.Html.MvcResources.ClaimUidExtractor_DefaultClaimsNotPresent">
            <summary>The claim UID extractor default claims not present.</summary>
        </member>
        <member name="F:NServiceKit.Html.MvcResources.ClaimUidExtractor_ClaimNotPresent">
            <summary>The claim UID extractor claim not present.</summary>
        </member>
        <member name="F:NServiceKit.Html.MvcResources.HttpContextUnavailable">
            <summary>The HTTP context unavailable.</summary>
        </member>
        <member name="F:NServiceKit.Html.MvcResources.TokenValidator_AuthenticatedUserWithoutUsername">
            <summary>The token validator authenticated user without username.</summary>
        </member>
        <member name="F:NServiceKit.Html.MvcResources.UnobtrusiveJavascript_ValidationTypeCannotBeEmpty">
            <summary>The unobtrusive javascript validation type cannot be empty.</summary>
        </member>
        <member name="F:NServiceKit.Html.MvcResources.UnobtrusiveJavascript_ValidationTypeMustBeUnique">
            <summary>The unobtrusive javascript validation type must be unique.</summary>
        </member>
        <member name="F:NServiceKit.Html.MvcResources.UnobtrusiveJavascript_ValidationTypeMustBeLegal">
            <summary>The unobtrusive javascript validation type must be legal.</summary>
        </member>
        <member name="F:NServiceKit.Html.MvcResources.UnobtrusiveJavascript_ValidationParameterCannotBeEmpty">
            <summary>The unobtrusive javascript validation parameter cannot be empty.</summary>
        </member>
        <member name="F:NServiceKit.Html.MvcResources.UnobtrusiveJavascript_ValidationParameterMustBeLegal">
            <summary>The unobtrusive javascript validation parameter must be legal.</summary>
        </member>
        <member name="F:NServiceKit.Html.MvcResources.Common_ValueNotValidForProperty">
            <summary>The common value not valid for property.</summary>
        </member>
        <member name="F:NServiceKit.Html.MvcResources.HtmlHelper_MissingSelectData">
            <summary>Information describing the HTML helper missing select.</summary>
        </member>
        <member name="F:NServiceKit.Html.MvcResources.HtmlHelper_WrongSelectDataType">
            <summary>Type of the HTML helper wrong select data.</summary>
        </member>
        <member name="F:NServiceKit.Html.MvcResources.HtmlHelper_SelectExpressionNotEnumerable">
            <summary>The HTML helper select expression not enumerable.</summary>
        </member>
        <member name="T:NServiceKit.Html.PocoMetadataProvider">
            <summary>A poco metadata provider.</summary>
        </member>
        <member name="M:NServiceKit.Html.PocoMetadataProvider.CreateMetadata(System.Collections.Generic.IEnumerable{System.Attribute},System.Type,System.Func{System.Object},System.Type,System.String)">
             <summary>Creates a metadata.</summary>
            
             <param name="attributes">   The attributes.</param>
             <param name="containerType">Type of the container.</param>
             <param name="modelAccessor">The model accessor.</param>
             <param name="modelType">    Type of the model.</param>
             <param name="propertyName"> Name of the property.</param>
            
             <returns>The new metadata.</returns>
        </member>
        <member name="M:NServiceKit.Html.PocoMetadataProvider.GetMetadataForProperties(System.Object,System.Type)">
             <summary>Gets the metadata for properties in this collection.</summary>
            
             <param name="container">    The container.</param>
             <param name="containerType">Type of the container.</param>
            
             <returns>An enumerator that allows foreach to be used to process the metadata for properties in this collection.</returns>
        </member>
        <member name="M:NServiceKit.Html.PocoMetadataProvider.GetMetadataForProperty(System.Func{System.Object},System.Type,System.String)">
             <summary>Gets metadata for property.</summary>
            
             <param name="modelAccessor">The model accessor.</param>
             <param name="containerType">Type of the container.</param>
             <param name="propertyName"> Name of the property.</param>
            
             <returns>The metadata for property.</returns>
        </member>
        <member name="M:NServiceKit.Html.PocoMetadataProvider.GetMetadataForType(System.Func{System.Object},System.Type)">
             <summary>Gets metadata for type.</summary>
            
             <param name="modelAccessor">The model accessor.</param>
             <param name="modelType">    Type of the model.</param>
            
             <returns>The metadata for type.</returns>
        </member>
        <member name="T:NServiceKit.Html.ScopeStorage">
            <summary>A scope storage.</summary>
        </member>
        <member name="M:NServiceKit.Html.ScopeStorage.CreateTransientScope(System.Collections.Generic.IDictionary{System.Object,System.Object})">
             <summary>Creates transient scope.</summary>
            
             <param name="context">The context.</param>
            
             <returns>The new transient scope.</returns>
        </member>
        <member name="M:NServiceKit.Html.ScopeStorage.CreateTransientScope">
             <summary>Creates transient scope.</summary>
            
             <returns>The new transient scope.</returns>
        </member>
        <member name="P:NServiceKit.Html.ScopeStorage.CurrentProvider">
             <summary>Gets or sets the current provider.</summary>
            
             <value>The current provider.</value>
        </member>
        <member name="P:NServiceKit.Html.ScopeStorage.CurrentScope">
             <summary>Gets the current scope.</summary>
            
             <value>The current scope.</value>
        </member>
        <member name="P:NServiceKit.Html.ScopeStorage.GlobalScope">
             <summary>Gets the global scope.</summary>
            
             <value>The global scope.</value>
        </member>
        <member name="T:NServiceKit.Html.StaticScopeStorageProvider">
            <summary>A static scope storage provider.</summary>
        </member>
        <member name="T:NServiceKit.Html.IScopeStorageProvider">
            <summary>Interface for scope storage provider.</summary>
        </member>
        <member name="P:NServiceKit.Html.IScopeStorageProvider.CurrentScope">
             <summary>Gets or sets the current scope.</summary>
            
             <value>The current scope.</value>
        </member>
        <member name="P:NServiceKit.Html.IScopeStorageProvider.GlobalScope">
             <summary>Gets the global scope.</summary>
            
             <value>The global scope.</value>
        </member>
        <member name="P:NServiceKit.Html.StaticScopeStorageProvider.CurrentScope">
             <summary>Gets or sets the current scope.</summary>
            
             <value>The current scope.</value>
        </member>
        <member name="P:NServiceKit.Html.StaticScopeStorageProvider.GlobalScope">
             <summary>Gets the global scope.</summary>
            
             <value>The global scope.</value>
        </member>
        <member name="T:NServiceKit.Html.ScopeStorageDictionary">
            <summary>Dictionary of scope storages.</summary>
        </member>
        <member name="M:NServiceKit.Html.ScopeStorageDictionary.#ctor">
            <summary>Initializes a new instance of the NServiceKit.Html.ScopeStorageDictionary class.</summary>
        </member>
        <member name="M:NServiceKit.Html.ScopeStorageDictionary.#ctor(System.Collections.Generic.IDictionary{System.Object,System.Object})">
             <summary>Initializes a new instance of the NServiceKit.Html.ScopeStorageDictionary class.</summary>
            
             <param name="baseScope">The base scope.</param>
        </member>
        <member name="M:NServiceKit.Html.ScopeStorageDictionary.#ctor(System.Collections.Generic.IDictionary{System.Object,System.Object},System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:NServiceKit.Html.ScopeStorageDictionary"/> class.
            </summary>
            <param name="baseScope">The base scope.</param>
            <param name="backingStore">
            The dictionary to use as a storage. Since the dictionary would be used as-is, we expect the implementer to 
            use the same key-value comparison logic as we do here.
            </param>
        </member>
        <member name="M:NServiceKit.Html.ScopeStorageDictionary.SetValue(System.Object,System.Object)">
             <summary>Sets a value.</summary>
            
             <param name="key">  The key.</param>
             <param name="value">The value.</param>
        </member>
        <member name="M:NServiceKit.Html.ScopeStorageDictionary.TryGetValue(System.Object,System.Object@)">
             <summary>Attempts to get value from the given data.</summary>
            
             <param name="key">  The key.</param>
             <param name="value">The value.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.Html.ScopeStorageDictionary.Remove(System.Object)">
             <summary>Removes the given key.</summary>
            
             <param name="key">The key to remove.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.Html.ScopeStorageDictionary.GetEnumerator">
             <summary>Gets the enumerator.</summary>
            
             <returns>The enumerator.</returns>
        </member>
        <member name="M:NServiceKit.Html.ScopeStorageDictionary.Add(System.Object,System.Object)">
             <summary>Adds key.</summary>
            
             <param name="key">  The key.</param>
             <param name="value">The value.</param>
        </member>
        <member name="M:NServiceKit.Html.ScopeStorageDictionary.ContainsKey(System.Object)">
             <summary>Query if 'key' contains key.</summary>
            
             <param name="key">The key.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.Html.ScopeStorageDictionary.Add(System.Collections.Generic.KeyValuePair{System.Object,System.Object})">
             <summary>Adds item.</summary>
            
             <param name="item">The item to remove.</param>
        </member>
        <member name="M:NServiceKit.Html.ScopeStorageDictionary.Clear">
            <summary>Clears this object to its blank/initial state.</summary>
        </member>
        <member name="M:NServiceKit.Html.ScopeStorageDictionary.Contains(System.Collections.Generic.KeyValuePair{System.Object,System.Object})">
             <summary>Query if this object contains the given item.</summary>
            
             <param name="item">The item to remove.</param>
            
             <returns>true if the object is in this collection, false if not.</returns>
        </member>
        <member name="M:NServiceKit.Html.ScopeStorageDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.Object,System.Object}[],System.Int32)">
             <summary>Copies to.</summary>
            
             <param name="array">     The array.</param>
             <param name="arrayIndex">Zero-based index of the array.</param>
        </member>
        <member name="M:NServiceKit.Html.ScopeStorageDictionary.Remove(System.Collections.Generic.KeyValuePair{System.Object,System.Object})">
             <summary>Removes the given item.</summary>
            
             <param name="item">The item to remove.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.Html.ScopeStorageDictionary.GetItems">
             <summary>Gets the items in this collection.</summary>
            
             <returns>An enumerator that allows foreach to be used to process the items in this collection.</returns>
        </member>
        <member name="P:NServiceKit.Html.ScopeStorageDictionary.BackingStore">
             <summary>Gets the backing store.</summary>
            
             <value>The backing store.</value>
        </member>
        <member name="P:NServiceKit.Html.ScopeStorageDictionary.BaseScope">
             <summary>Gets the base scope.</summary>
            
             <value>The base scope.</value>
        </member>
        <member name="P:NServiceKit.Html.ScopeStorageDictionary.Keys">
             <summary>Gets the keys.</summary>
            
             <value>The keys.</value>
        </member>
        <member name="P:NServiceKit.Html.ScopeStorageDictionary.Values">
             <summary>Gets the values.</summary>
            
             <value>The values.</value>
        </member>
        <member name="P:NServiceKit.Html.ScopeStorageDictionary.Count">
             <summary>Gets the number of. </summary>
            
             <value>The count.</value>
        </member>
        <member name="P:NServiceKit.Html.ScopeStorageDictionary.IsReadOnly">
             <summary>Gets a value indicating whether this object is read only.</summary>
            
             <value>true if this object is read only, false if not.</value>
        </member>
        <member name="P:NServiceKit.Html.ScopeStorageDictionary.Item(System.Object)">
             <summary>Indexer to get or set items within this collection using array index syntax.</summary>
            
             <param name="key">The key.</param>
            
             <returns>The indexed item.</returns>
        </member>
        <member name="M:NServiceKit.Html.ScopeStorageDictionary.StateStorageKeyValueComparer.Equals(System.Collections.Generic.KeyValuePair{System.Object,System.Object},System.Collections.Generic.KeyValuePair{System.Object,System.Object})">
             <summary>Tests if two KeyValuePair&lt;object,object&gt; objects are considered equal.</summary>
            
             <param name="x">Key value pair&lt;object,object&gt; to be compared.</param>
             <param name="y">Key value pair&lt;object,object&gt; to be compared.</param>
            
             <returns>true if the objects are considered equal, false if they are not.</returns>
        </member>
        <member name="M:NServiceKit.Html.ScopeStorageDictionary.StateStorageKeyValueComparer.GetHashCode(System.Collections.Generic.KeyValuePair{System.Object,System.Object})">
             <summary>Returns a hash code for this object.</summary>
            
             <param name="obj">The object.</param>
            
             <returns>A hash code for this object.</returns>
        </member>
        <member name="T:NServiceKit.Html.ScopeStorageComparer">
            <summary>
            Custom comparer for the context dictionaries
            The comparer treats strings as a special case, performing case insesitive comparison. 
            This guaratees that we remain consistent throughout the chain of contexts since PageData dictionary 
            behaves in this manner.
            </summary>
        </member>
        <member name="M:NServiceKit.Html.ScopeStorageComparer.Equals(System.Object,System.Object)">
             <summary>Tests if two object objects are considered equal.</summary>
            
             <param name="x">Object to be compared.</param>
             <param name="y">Object to be compared.</param>
            
             <returns>true if the objects are considered equal, false if they are not.</returns>
        </member>
        <member name="M:NServiceKit.Html.ScopeStorageComparer.GetHashCode(System.Object)">
             <summary>Returns a hash code for this object.</summary>
            
             <param name="obj">The object.</param>
            
             <returns>A hash code for this object.</returns>
        </member>
        <member name="P:NServiceKit.Html.ScopeStorageComparer.Instance">
             <summary>Gets the instance.</summary>
            
             <value>The instance.</value>
        </member>
        <member name="M:NServiceKit.Html.DisposableAction.#ctor(System.Action)">
             <summary>Initializes a new instance of the NServiceKit.Html.DisposableAction class.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <param name="action">The action.</param>
        </member>
        <member name="M:NServiceKit.Html.DisposableAction.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:NServiceKit.Html.DisposableAction.Dispose(System.Boolean)">
             <summary>Releases the unmanaged resources used by the NServiceKit.Html.DisposableAction and optionally releases the managed resources.</summary>
            
             <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="T:NServiceKit.Html.SelectExtensions">
            <summary>A select extensions.</summary>
        </member>
        <member name="M:NServiceKit.Html.SelectExtensions.DropDownList(NServiceKit.Html.HtmlHelper,System.String)">
             <summary>DropDownList.</summary>
            
             <param name="htmlHelper">The htmlHelper to act on.</param>
             <param name="name">      The name.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.SelectExtensions.DropDownList(NServiceKit.Html.HtmlHelper,System.String,System.String)">
             <summary>A HtmlHelper extension method that drop down list.</summary>
            
             <param name="htmlHelper"> The htmlHelper to act on.</param>
             <param name="name">       The name.</param>
             <param name="optionLabel">The option label.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.SelectExtensions.DropDownList(NServiceKit.Html.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{NServiceKit.Html.SelectListItem})">
             <summary>A HtmlHelper extension method that drop down list.</summary>
            
             <param name="htmlHelper">The htmlHelper to act on.</param>
             <param name="name">      The name.</param>
             <param name="selectList">List of selects.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.SelectExtensions.DropDownList(NServiceKit.Html.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{NServiceKit.Html.SelectListItem},System.Object)">
             <summary>A HtmlHelper extension method that drop down list.</summary>
            
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="name">          The name.</param>
             <param name="selectList">    List of selects.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.SelectExtensions.DropDownList(NServiceKit.Html.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{NServiceKit.Html.SelectListItem},System.Collections.Generic.IDictionary{System.String,System.Object})">
             <summary>A HtmlHelper extension method that drop down list.</summary>
            
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="name">          The name.</param>
             <param name="selectList">    List of selects.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.SelectExtensions.DropDownList(NServiceKit.Html.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{NServiceKit.Html.SelectListItem},System.String)">
             <summary>A HtmlHelper extension method that drop down list.</summary>
            
             <param name="htmlHelper"> The htmlHelper to act on.</param>
             <param name="name">       The name.</param>
             <param name="selectList"> List of selects.</param>
             <param name="optionLabel">The option label.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.SelectExtensions.DropDownList(NServiceKit.Html.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{NServiceKit.Html.SelectListItem},System.String,System.Object)">
             <summary>A HtmlHelper extension method that drop down list.</summary>
            
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="name">          The name.</param>
             <param name="selectList">    List of selects.</param>
             <param name="optionLabel">   The option label.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.SelectExtensions.DropDownList(NServiceKit.Html.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{NServiceKit.Html.SelectListItem},System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
             <summary>A HtmlHelper extension method that drop down list.</summary>
            
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="name">          The name.</param>
             <param name="selectList">    List of selects.</param>
             <param name="optionLabel">   The option label.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.SelectExtensions.DropDownListFor``2(NServiceKit.Html.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{NServiceKit.Html.SelectListItem})">
             <summary>A HtmlHelper&lt;TModel&gt; extension method that drop down list for.</summary>
            
             <typeparam name="TModel">   Type of the model.</typeparam>
             <typeparam name="TProperty">Type of the property.</typeparam>
             <param name="htmlHelper">The htmlHelper to act on.</param>
             <param name="expression">The expression.</param>
             <param name="selectList">List of selects.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.SelectExtensions.DropDownListFor``2(NServiceKit.Html.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{NServiceKit.Html.SelectListItem},System.Object)">
             <summary>A HtmlHelper&lt;TModel&gt; extension method that drop down list for.</summary>
            
             <typeparam name="TModel">   Type of the model.</typeparam>
             <typeparam name="TProperty">Type of the property.</typeparam>
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="expression">    The expression.</param>
             <param name="selectList">    List of selects.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.SelectExtensions.DropDownListFor``2(NServiceKit.Html.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{NServiceKit.Html.SelectListItem},System.Collections.Generic.IDictionary{System.String,System.Object})">
             <summary>A HtmlHelper&lt;TModel&gt; extension method that drop down list for.</summary>
            
             <typeparam name="TModel">   Type of the model.</typeparam>
             <typeparam name="TProperty">Type of the property.</typeparam>
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="expression">    The expression.</param>
             <param name="selectList">    List of selects.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.SelectExtensions.DropDownListFor``2(NServiceKit.Html.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{NServiceKit.Html.SelectListItem},System.String)">
             <summary>A HtmlHelper&lt;TModel&gt; extension method that drop down list for.</summary>
            
             <typeparam name="TModel">   Type of the model.</typeparam>
             <typeparam name="TProperty">Type of the property.</typeparam>
             <param name="htmlHelper"> The htmlHelper to act on.</param>
             <param name="expression"> The expression.</param>
             <param name="selectList"> List of selects.</param>
             <param name="optionLabel">The option label.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.SelectExtensions.DropDownListFor``2(NServiceKit.Html.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{NServiceKit.Html.SelectListItem},System.String,System.Object)">
             <summary>A HtmlHelper&lt;TModel&gt; extension method that drop down list for.</summary>
            
             <typeparam name="TModel">   Type of the model.</typeparam>
             <typeparam name="TProperty">Type of the property.</typeparam>
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="expression">    The expression.</param>
             <param name="selectList">    List of selects.</param>
             <param name="optionLabel">   The option label.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.SelectExtensions.DropDownListFor``2(NServiceKit.Html.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{NServiceKit.Html.SelectListItem},System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
             <summary>A HtmlHelper&lt;TModel&gt; extension method that drop down list for.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <typeparam name="TModel">   Type of the model.</typeparam>
             <typeparam name="TProperty">Type of the property.</typeparam>
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="expression">    The expression.</param>
             <param name="selectList">    List of selects.</param>
             <param name="optionLabel">   The option label.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.SelectExtensions.ListBox(NServiceKit.Html.HtmlHelper,System.String)">
             <summary>ListBox.</summary>
            
             <param name="htmlHelper">The htmlHelper to act on.</param>
             <param name="name">      The name.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.SelectExtensions.ListBox(NServiceKit.Html.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{NServiceKit.Html.SelectListItem})">
             <summary>A HtmlHelper extension method that list box.</summary>
            
             <param name="htmlHelper">The htmlHelper to act on.</param>
             <param name="name">      The name.</param>
             <param name="selectList">List of selects.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.SelectExtensions.ListBox(NServiceKit.Html.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{NServiceKit.Html.SelectListItem},System.Object)">
             <summary>A HtmlHelper extension method that list box.</summary>
            
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="name">          The name.</param>
             <param name="selectList">    List of selects.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.SelectExtensions.ListBox(NServiceKit.Html.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{NServiceKit.Html.SelectListItem},System.Collections.Generic.IDictionary{System.String,System.Object})">
             <summary>A HtmlHelper extension method that list box.</summary>
            
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="name">          The name.</param>
             <param name="selectList">    List of selects.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.SelectExtensions.ListBoxFor``2(NServiceKit.Html.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{NServiceKit.Html.SelectListItem})">
             <summary>A HtmlHelper&lt;TModel&gt; extension method that list box for.</summary>
            
             <typeparam name="TModel">   Type of the model.</typeparam>
             <typeparam name="TProperty">Type of the property.</typeparam>
             <param name="htmlHelper">The htmlHelper to act on.</param>
             <param name="expression">The expression.</param>
             <param name="selectList">List of selects.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.SelectExtensions.ListBoxFor``2(NServiceKit.Html.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{NServiceKit.Html.SelectListItem},System.Object)">
             <summary>A HtmlHelper&lt;TModel&gt; extension method that list box for.</summary>
            
             <typeparam name="TModel">   Type of the model.</typeparam>
             <typeparam name="TProperty">Type of the property.</typeparam>
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="expression">    The expression.</param>
             <param name="selectList">    List of selects.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.SelectExtensions.ListBoxFor``2(NServiceKit.Html.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{NServiceKit.Html.SelectListItem},System.Collections.Generic.IDictionary{System.String,System.Object})">
             <summary>A HtmlHelper&lt;TModel&gt; extension method that list box for.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <typeparam name="TModel">   Type of the model.</typeparam>
             <typeparam name="TProperty">Type of the property.</typeparam>
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="expression">    The expression.</param>
             <param name="selectList">    List of selects.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="T:NServiceKit.Html.SelectList">
            <summary>List of selects.</summary>
        </member>
        <member name="M:NServiceKit.Html.SelectList.#ctor(System.Collections.IEnumerable)">
             <summary>Initializes a new instance of the NServiceKit.Html.SelectList class.</summary>
            
             <param name="items">The items.</param>
        </member>
        <member name="M:NServiceKit.Html.SelectList.#ctor(System.Collections.IEnumerable,System.Object)">
             <summary>Initializes a new instance of the NServiceKit.Html.SelectList class.</summary>
            
             <param name="items">        The items.</param>
             <param name="selectedValue">The selected value.</param>
        </member>
        <member name="M:NServiceKit.Html.SelectList.#ctor(System.Collections.IEnumerable,System.String,System.String)">
             <summary>Initializes a new instance of the NServiceKit.Html.SelectList class.</summary>
            
             <param name="items">         The items.</param>
             <param name="dataValueField">The data value field.</param>
             <param name="dataTextField"> The data text field.</param>
        </member>
        <member name="M:NServiceKit.Html.SelectList.#ctor(System.Collections.IEnumerable,System.String,System.String,System.Object)">
             <summary>Initializes a new instance of the NServiceKit.Html.SelectList class.</summary>
            
             <param name="items">         The items.</param>
             <param name="dataValueField">The data value field.</param>
             <param name="dataTextField"> The data text field.</param>
             <param name="selectedValue"> The selected value.</param>
        </member>
        <member name="P:NServiceKit.Html.SelectList.SelectedValue">
             <summary>Gets the selected value.</summary>
            
             <value>The selected value.</value>
        </member>
        <member name="T:NServiceKit.Html.SelectListItem">
            <summary>A select list item.</summary>
        </member>
        <member name="P:NServiceKit.Html.SelectListItem.Selected">
             <summary>Gets or sets a value indicating whether the selected.</summary>
            
             <value>true if selected, false if not.</value>
        </member>
        <member name="P:NServiceKit.Html.SelectListItem.Text">
             <summary>Gets or sets the text.</summary>
            
             <value>The text.</value>
        </member>
        <member name="P:NServiceKit.Html.SelectListItem.Value">
             <summary>Gets or sets the value.</summary>
            
             <value>The value.</value>
        </member>
        <member name="T:NServiceKit.Html.TagRenderMode">
            <summary>Values that represent TagRenderMode.</summary>
        </member>
        <member name="F:NServiceKit.Html.TagRenderMode.Normal">
            <summary>An enum constant representing the normal option.</summary>
        </member>
        <member name="F:NServiceKit.Html.TagRenderMode.StartTag">
            <summary>An enum constant representing the start tag option.</summary>
        </member>
        <member name="F:NServiceKit.Html.TagRenderMode.EndTag">
            <summary>An enum constant representing the end tag option.</summary>
        </member>
        <member name="F:NServiceKit.Html.TagRenderMode.SelfClosing">
            <summary>An enum constant representing the self closing option.</summary>
        </member>
        <member name="T:NServiceKit.Html.TemplateInfo">
            <summary>Information about the template.</summary>
        </member>
        <member name="M:NServiceKit.Html.TemplateInfo.GetFullHtmlFieldId(System.String)">
             <summary>Gets full HTML field identifier.</summary>
            
             <param name="partialFieldName">Name of the partial field.</param>
            
             <returns>The full HTML field identifier.</returns>
        </member>
        <member name="M:NServiceKit.Html.TemplateInfo.GetFullHtmlFieldName(System.String)">
             <summary>Gets full HTML field name.</summary>
            
             <param name="partialFieldName">Name of the partial field.</param>
            
             <returns>The full HTML field name.</returns>
        </member>
        <member name="M:NServiceKit.Html.TemplateInfo.Visited(NServiceKit.Html.ModelMetadata)">
             <summary>Visited the given metadata.</summary>
            
             <param name="metadata">The metadata.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="P:NServiceKit.Html.TemplateInfo.FormattedModelValue">
             <summary>Gets or sets the formatted model value.</summary>
            
             <value>The formatted model value.</value>
        </member>
        <member name="P:NServiceKit.Html.TemplateInfo.HtmlFieldPrefix">
             <summary>Gets or sets the HTML field prefix.</summary>
            
             <value>The HTML field prefix.</value>
        </member>
        <member name="P:NServiceKit.Html.TemplateInfo.TemplateDepth">
             <summary>Gets the depth of the template.</summary>
            
             <value>The depth of the template.</value>
        </member>
        <member name="T:NServiceKit.Html.UnobtrusiveValidationAttributesGenerator">
            <summary>An unobtrusive validation attributes generator.</summary>
        </member>
        <member name="M:NServiceKit.Html.UnobtrusiveValidationAttributesGenerator.GetValidationAttributes(System.Collections.Generic.IEnumerable{NServiceKit.Html.ModelClientValidationRule},System.Collections.Generic.IDictionary{System.String,System.Object})">
             <summary>Gets validation attributes.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <param name="clientRules">The client rules.</param>
             <param name="results">    The results.</param>
        </member>
        <member name="T:NServiceKit.Html.ValidationExtensions">
            <summary>A validation extensions.</summary>
        </member>
        <member name="M:NServiceKit.Html.ValidationExtensions.Validate(NServiceKit.Html.HtmlHelper,System.String)">
             <summary>Validate.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <param name="htmlHelper">The htmlHelper to act on.</param>
             <param name="modelName"> Name of the model.</param>
        </member>
        <member name="M:NServiceKit.Html.ValidationExtensions.ValidateFor``2(NServiceKit.Html.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
             <summary>A HtmlHelper&lt;TModel&gt; extension method that validates for.</summary>
            
             <typeparam name="TModel">   Type of the model.</typeparam>
             <typeparam name="TProperty">Type of the property.</typeparam>
             <param name="htmlHelper">The htmlHelper to act on.</param>
             <param name="expression">The expression.</param>
        </member>
        <member name="M:NServiceKit.Html.ValidationExtensions.ValidationMessage(NServiceKit.Html.HtmlHelper,System.String)">
             <summary>ValidationMessage.</summary>
            
             <param name="htmlHelper">The htmlHelper to act on.</param>
             <param name="modelName"> Name of the model.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.ValidationExtensions.ValidationMessage(NServiceKit.Html.HtmlHelper,System.String,System.Object)">
             <summary>A HtmlHelper extension method that validation message.</summary>
            
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="modelName">     Name of the model.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.ValidationExtensions.ValidationMessage(NServiceKit.Html.HtmlHelper,System.String,System.String)">
             <summary>A HtmlHelper extension method that validation message.</summary>
            
             <param name="htmlHelper">       The htmlHelper to act on.</param>
             <param name="modelName">        Name of the model.</param>
             <param name="validationMessage">Message describing the validation.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.ValidationExtensions.ValidationMessage(NServiceKit.Html.HtmlHelper,System.String,System.String,System.Object)">
             <summary>A HtmlHelper extension method that validation message.</summary>
            
             <param name="htmlHelper">       The htmlHelper to act on.</param>
             <param name="modelName">        Name of the model.</param>
             <param name="validationMessage">Message describing the validation.</param>
             <param name="htmlAttributes">   The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.ValidationExtensions.ValidationMessage(NServiceKit.Html.HtmlHelper,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
             <summary>A HtmlHelper extension method that validation message.</summary>
            
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="modelName">     Name of the model.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.ValidationExtensions.ValidationMessage(NServiceKit.Html.HtmlHelper,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
             <summary>A HtmlHelper extension method that validation message.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <param name="htmlHelper">       The htmlHelper to act on.</param>
             <param name="modelName">        Name of the model.</param>
             <param name="validationMessage">Message describing the validation.</param>
             <param name="htmlAttributes">   The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.ValidationExtensions.ValidationMessageFor``2(NServiceKit.Html.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
             <summary>A HtmlHelper&lt;TModel&gt; extension method that validation message for.</summary>
            
             <typeparam name="TModel">   Type of the model.</typeparam>
             <typeparam name="TProperty">Type of the property.</typeparam>
             <param name="htmlHelper">The htmlHelper to act on.</param>
             <param name="expression">The expression.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.ValidationExtensions.ValidationMessageFor``2(NServiceKit.Html.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
             <summary>A HtmlHelper&lt;TModel&gt; extension method that validation message for.</summary>
            
             <typeparam name="TModel">   Type of the model.</typeparam>
             <typeparam name="TProperty">Type of the property.</typeparam>
             <param name="htmlHelper">       The htmlHelper to act on.</param>
             <param name="expression">       The expression.</param>
             <param name="validationMessage">Message describing the validation.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.ValidationExtensions.ValidationMessageFor``2(NServiceKit.Html.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Object)">
             <summary>A HtmlHelper&lt;TModel&gt; extension method that validation message for.</summary>
            
             <typeparam name="TModel">   Type of the model.</typeparam>
             <typeparam name="TProperty">Type of the property.</typeparam>
             <param name="htmlHelper">       The htmlHelper to act on.</param>
             <param name="expression">       The expression.</param>
             <param name="validationMessage">Message describing the validation.</param>
             <param name="htmlAttributes">   The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.ValidationExtensions.ValidationMessageFor``2(NServiceKit.Html.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
             <summary>A HtmlHelper&lt;TModel&gt; extension method that validation message for.</summary>
            
             <typeparam name="TModel">   Type of the model.</typeparam>
             <typeparam name="TProperty">Type of the property.</typeparam>
             <param name="htmlHelper">       The htmlHelper to act on.</param>
             <param name="expression">       The expression.</param>
             <param name="validationMessage">Message describing the validation.</param>
             <param name="htmlAttributes">   The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.ValidationExtensions.ValidationSummary(NServiceKit.Html.HtmlHelper)">
             <summary>ValidationSummary.</summary>
            
             <param name="htmlHelper">The htmlHelper to act on.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.ValidationExtensions.ValidationSummary(NServiceKit.Html.HtmlHelper,System.Boolean)">
             <summary>A HtmlHelper extension method that validation summary.</summary>
            
             <param name="htmlHelper">           The htmlHelper to act on.</param>
             <param name="excludePropertyErrors">true to exclude, false to include the property errors.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.ValidationExtensions.ValidationSummary(NServiceKit.Html.HtmlHelper,System.String)">
             <summary>A HtmlHelper extension method that validation summary.</summary>
            
             <param name="htmlHelper">The htmlHelper to act on.</param>
             <param name="message">   The message.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.ValidationExtensions.ValidationSummary(NServiceKit.Html.HtmlHelper,System.Boolean,System.String)">
             <summary>A HtmlHelper extension method that validation summary.</summary>
            
             <param name="htmlHelper">           The htmlHelper to act on.</param>
             <param name="excludePropertyErrors">true to exclude, false to include the property errors.</param>
             <param name="message">              The message.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.ValidationExtensions.ValidationSummary(NServiceKit.Html.HtmlHelper,System.String,System.Object)">
             <summary>A HtmlHelper extension method that validation summary.</summary>
            
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="message">       The message.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.ValidationExtensions.ValidationSummary(NServiceKit.Html.HtmlHelper,System.Boolean,System.String,System.Object)">
             <summary>A HtmlHelper extension method that validation summary.</summary>
            
             <param name="htmlHelper">           The htmlHelper to act on.</param>
             <param name="excludePropertyErrors">true to exclude, false to include the property errors.</param>
             <param name="message">              The message.</param>
             <param name="htmlAttributes">       The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.ValidationExtensions.ValidationSummary(NServiceKit.Html.HtmlHelper,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
             <summary>A HtmlHelper extension method that validation summary.</summary>
            
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="message">       The message.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.ValidationExtensions.ValidationSummary(NServiceKit.Html.HtmlHelper,System.Boolean,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
             <summary>A HtmlHelper extension method that validation summary.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <param name="htmlHelper">           The htmlHelper to act on.</param>
             <param name="excludePropertyErrors">true to exclude, false to include the property errors.</param>
             <param name="message">              The message.</param>
             <param name="htmlAttributes">       The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="P:NServiceKit.Html.ValidationExtensions.ResourceClassKey">
             <summary>Gets or sets the resource class key.</summary>
            
             <value>The resource class key.</value>
        </member>
        <member name="T:NServiceKit.Html.ValueProviderResult">
            <summary>Encapsulates the result of a value provider.</summary>
        </member>
        <member name="M:NServiceKit.Html.ValueProviderResult.#ctor">
            <summary>default constructor so that subclassed types can set the properties themselves.</summary>
        </member>
        <member name="M:NServiceKit.Html.ValueProviderResult.#ctor(System.Object,System.String,System.Globalization.CultureInfo)">
             <summary>Initializes a new instance of the NServiceKit.Html.ValueProviderResult class.</summary>
            
             <param name="rawValue">      The raw value.</param>
             <param name="attemptedValue">The attempted value.</param>
             <param name="culture">       The culture.</param>
        </member>
        <member name="M:NServiceKit.Html.ValueProviderResult.ConvertTo(System.Type)">
             <summary>Convert to.</summary>
            
             <param name="type">The type.</param>
            
             <returns>to converted.</returns>
        </member>
        <member name="M:NServiceKit.Html.ValueProviderResult.ConvertTo(System.Type,System.Globalization.CultureInfo)">
             <summary>Convert to.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <param name="type">   The type.</param>
             <param name="culture">The culture.</param>
            
             <returns>to converted.</returns>
        </member>
        <member name="P:NServiceKit.Html.ValueProviderResult.AttemptedValue">
             <summary>Gets the attempted value.</summary>
            
             <value>The attempted value.</value>
        </member>
        <member name="P:NServiceKit.Html.ValueProviderResult.Culture">
             <summary>Gets the culture.</summary>
            
             <value>The culture.</value>
        </member>
        <member name="P:NServiceKit.Html.ValueProviderResult.RawValue">
             <summary>Gets the raw value.</summary>
            
             <value>The raw value.</value>
        </member>
        <member name="T:NServiceKit.Html.ViewContext">
            <summary>A view context.</summary>
        </member>
        <member name="M:NServiceKit.Html.ViewContext.#ctor">
            <summary>parameterless constructor used for mocking.</summary>
        </member>
        <member name="M:NServiceKit.Html.ViewContext.#ctor(System.Web.HttpContextBase,NServiceKit.Html.ITemplatePage,NServiceKit.Html.ViewDataDictionary,System.IO.TextWriter)">
             <summary>Initializes a new instance of the NServiceKit.Html.ViewContext class.</summary>
            
             <exception cref="T:System.ArgumentException">    Thrown when one or more arguments have unsupported or illegal values.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <param name="httpContext">The HTTP context.</param>
             <param name="view">       The view.</param>
             <param name="viewData">   Information describing the view.</param>
             <param name="writer">     The writer.</param>
        </member>
        <member name="M:NServiceKit.Html.ViewContext.OutputClientValidation">
            <summary>Output client validation.</summary>
        </member>
        <member name="P:NServiceKit.Html.ViewContext.ClientValidationEnabled">
             <summary>Gets or sets a value indicating whether the client validation is enabled.</summary>
            
             <value>true if client validation enabled, false if not.</value>
        </member>
        <member name="P:NServiceKit.Html.ViewContext.FormContext">
             <summary>Gets or sets a context for the form.</summary>
            
             <value>The form context.</value>
        </member>
        <member name="P:NServiceKit.Html.ViewContext.UnobtrusiveJavaScriptEnabled">
             <summary>Gets or sets a value indicating whether the unobtrusive java script is enabled.</summary>
            
             <value>true if unobtrusive java script enabled, false if not.</value>
        </member>
        <member name="P:NServiceKit.Html.ViewContext.View">
             <summary>Gets or sets the view.</summary>
            
             <value>The view.</value>
        </member>
        <member name="P:NServiceKit.Html.ViewContext.ViewData">
             <summary>Gets or sets information describing the view.</summary>
            
             <value>Information describing the view.</value>
        </member>
        <member name="P:NServiceKit.Html.ViewContext.Writer">
             <summary>Gets or sets the writer.</summary>
            
             <value>The writer.</value>
        </member>
        <member name="P:NServiceKit.Html.ViewContext.HttpContext">
             <summary>Gets or sets a context for the HTTP.</summary>
            
             <value>The HTTP context.</value>
        </member>
        <member name="M:NServiceKit.Html.ViewContext.ScopeCache.Get(System.Collections.Generic.IDictionary{System.Object,System.Object},System.Web.HttpContextBase)">
             <summary>Gets.</summary>
            
             <param name="scope">      The scope.</param>
             <param name="httpContext">Context for the HTTP.</param>
            
             <returns>A ScopeCache.</returns>
        </member>
        <member name="P:NServiceKit.Html.ViewContext.ScopeCache.ClientValidationEnabled">
             <summary>Gets or sets a value indicating whether the client validation is enabled.</summary>
            
             <value>true if client validation enabled, false if not.</value>
        </member>
        <member name="P:NServiceKit.Html.ViewContext.ScopeCache.UnobtrusiveJavaScriptEnabled">
             <summary>Gets or sets a value indicating whether the unobtrusive java script is enabled.</summary>
            
             <value>true if unobtrusive java script enabled, false if not.</value>
        </member>
        <member name="T:NServiceKit.HttpExtensions">
            <summary>
            HttpExtensions 
            </summary>
        </member>
        <member name="M:NServiceKit.HttpExtensions.ToRequestContext(System.Web.HttpContext,System.Object)">
             <summary>A HttpListenerContext extension method that converts this object to a request context.</summary>
            
             <param name="httpContext">The httpContext to act on.</param>
             <param name="requestDto"> The request dto.</param>
            
             <returns>The given data converted to a HttpRequestContext.</returns>
        </member>
        <member name="M:NServiceKit.HttpExtensions.ToRequestContext(System.Net.HttpListenerContext,System.Object)">
             <summary>A HttpListenerContext extension method that converts this object to a request context.</summary>
            
             <param name="httpContext">The httpContext to act on.</param>
             <param name="requestDto"> The request dto.</param>
            
             <returns>The given data converted to a HttpRequestContext.</returns>
        </member>
        <member name="M:NServiceKit.HttpExtensions.ToAbsoluteUri(NServiceKit.ServiceHost.IReturn,System.String,System.String)">
             <summary>An IReturn extension method that converts this object to an absolute URI.</summary>
            
             <param name="request">                        The request to act on.</param>
             <param name="httpMethod">                     The HTTP method.</param>
             <param name="formatFallbackToPredefinedRoute">The format fallback to predefined route.</param>
            
             <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:NServiceKit.HttpExtensions.EndRequest(System.Web.HttpResponse,System.Boolean)">
            <summary>
            End a NServiceKit Request
            </summary>
        </member>
        <member name="M:NServiceKit.HttpExtensions.EndRequest(NServiceKit.ServiceHost.IHttpResponse,System.Boolean)">
            <summary>
            End a NServiceKit Request
            </summary>
        </member>
        <member name="M:NServiceKit.HttpExtensions.EndHttpHandlerRequest(System.Web.HttpResponse,System.Boolean,System.Boolean,System.Boolean,System.Action{System.Web.HttpResponse})">
            <summary>
            End a HttpHandler Request
            </summary>
        </member>
        <member name="M:NServiceKit.HttpExtensions.EndHttpHandlerRequest(NServiceKit.ServiceHost.IHttpResponse,System.Boolean,System.Boolean,System.Action{NServiceKit.ServiceHost.IHttpResponse})">
            <summary>
            End a HttpHandler Request
            </summary>
        </member>
        <member name="M:NServiceKit.HttpExtensions.EndRequestWithNoContent(NServiceKit.ServiceHost.IHttpResponse)">
            <summary>
            End a NServiceKit Request with no content
            </summary>
        </member>
        <member name="T:NServiceKit.MetadataTypesHandler">
            <summary>A metadata types handler.</summary>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Support.HttpHandlerBase">
            <summary>A HTTP handler base.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.HttpHandlerBase.#ctor">
            <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.Support.HttpHandlerBase class.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.HttpHandlerBase.ProcessRequest(System.Web.HttpContext)">
             <summary>Enables processing of HTTP Web requests by a custom HttpHandler that implements the <see cref="T:System.Web.IHttpHandler" /> interface.</summary>
            
             <param name="context">An <see cref="T:System.Web.HttpContext" /> object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) used to
             service HTTP requests.
             </param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.HttpHandlerBase.Execute(System.Web.HttpContext)">
             <summary>Executes the given context.</summary>
            
             <param name="context">The context.</param>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.HttpHandlerBase.IsReusable">
             <summary>Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler" /> instance.</summary>
            
             <value>true if the <see cref="T:System.Web.IHttpHandler" /> instance is reusable; otherwise, false.</value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Support.INServiceKitHttpHandler">
            <summary>Interface for in service kit HTTP handler.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.INServiceKitHttpHandler.ProcessRequest(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse,System.String)">
             <summary>Process the request.</summary>
            
             <param name="httpReq">      The HTTP request.</param>
             <param name="httpRes">      The HTTP resource.</param>
             <param name="operationName">Name of the operation.</param>
        </member>
        <member name="M:NServiceKit.MetadataTypesHandler.Execute(System.Web.HttpContext)">
             <summary>Executes the given context.</summary>
            
             <param name="context">The context.</param>
        </member>
        <member name="M:NServiceKit.MetadataTypesHandler.ProcessRequest(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse,System.String)">
             <summary>Process the request.</summary>
            
             <param name="httpReq">      The HTTP request.</param>
             <param name="httpRes">      The HTTP resource.</param>
             <param name="operationName">Name of the operation.</param>
        </member>
        <member name="P:NServiceKit.MetadataTypesHandler.Config">
             <summary>Gets or sets the configuration.</summary>
            
             <value>The configuration.</value>
        </member>
        <member name="T:NServiceKit.MetadataTypeExtensions">
            <summary>A metadata type extensions.</summary>
        </member>
        <member name="M:NServiceKit.MetadataTypeExtensions.ToType(System.Type)">
             <summary>A Type extension method that converts a type to a type.</summary>
            
             <param name="type">The type to act on.</param>
            
             <returns>type as a MetadataType.</returns>
        </member>
        <member name="M:NServiceKit.MetadataTypeExtensions.ToAttributes(System.Type)">
             <summary>An IEnumerable&lt;Attribute&gt; extension method that converts the attrs to the attributes.</summary>
            
             <param name="type">The type to act on.</param>
            
             <returns>attrs as a List&lt;MetadataAttribute&gt;</returns>
        </member>
        <member name="M:NServiceKit.MetadataTypeExtensions.ToProperties(System.Type)">
             <summary>A Type extension method that converts a type to the properties.</summary>
            
             <param name="type">The type to act on.</param>
            
             <returns>type as a List&lt;MetadataPropertyType&gt;</returns>
        </member>
        <member name="M:NServiceKit.MetadataTypeExtensions.ExcludeKnownAttrsFilter(System.Attribute)">
             <summary>Exclude known attributes filter.</summary>
            
             <param name="x">The Attribute to process.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.MetadataTypeExtensions.ToAttributes(System.Object[])">
             <summary>An IEnumerable&lt;Attribute&gt; extension method that converts the attrs to the attributes.</summary>
            
             <param name="attrs">The attrs to act on.</param>
            
             <returns>attrs as a List&lt;MetadataAttribute&gt;</returns>
        </member>
        <member name="M:NServiceKit.MetadataTypeExtensions.ToAttributes(System.Collections.Generic.IEnumerable{System.Attribute})">
             <summary>An IEnumerable&lt;Attribute&gt; extension method that converts the attrs to the attributes.</summary>
            
             <param name="attrs">The attrs to act on.</param>
            
             <returns>attrs as a List&lt;MetadataAttribute&gt;</returns>
        </member>
        <member name="M:NServiceKit.MetadataTypeExtensions.ToAttribute(System.Attribute)">
             <summary>An Attribute extension method that converts an attr to an attribute.</summary>
            
             <param name="attr">The attr to act on.</param>
            
             <returns>attr as a MetadataAttribute.</returns>
        </member>
        <member name="M:NServiceKit.MetadataTypeExtensions.NonDefaultProperties(System.Attribute)">
             <summary>An Attribute extension method that non default properties.</summary>
            
             <param name="attr">The attr to act on.</param>
            
             <returns>A List&lt;MetadataPropertyType&gt;</returns>
        </member>
        <member name="M:NServiceKit.MetadataTypeExtensions.ToProperty(System.Reflection.PropertyInfo,System.Object)">
             <summary>A ParameterInfo extension method that converts a pi to a property.</summary>
            
             <param name="pi">      The pi to act on.</param>
             <param name="instance">The instance.</param>
            
             <returns>pi as a MetadataPropertyType.</returns>
        </member>
        <member name="M:NServiceKit.MetadataTypeExtensions.ToProperty(System.Reflection.ParameterInfo)">
             <summary>A ParameterInfo extension method that converts a pi to a property.</summary>
            
             <param name="pi">The pi to act on.</param>
            
             <returns>pi as a MetadataPropertyType.</returns>
        </member>
        <member name="M:NServiceKit.MetadataTypeExtensions.ToDataMember(System.Runtime.Serialization.DataMemberAttribute)">
             <summary>A DataMemberAttribute extension method that converts an attr to a data member.</summary>
            
             <param name="attr">The attr to act on.</param>
            
             <returns>attr as a MetadataDataMember.</returns>
        </member>
        <member name="M:NServiceKit.MetadataTypeExtensions.GetInstancePublicProperties(System.Type)">
             <summary>A Type extension method that gets instance public properties.</summary>
            
             <param name="type">The type to act on.</param>
            
             <returns>An array of property information.</returns>
        </member>
        <member name="T:NServiceKit.PredefinedRoutesFeature">
            <summary>A predefined routes feature.</summary>
        </member>
        <member name="M:NServiceKit.PredefinedRoutesFeature.Register(NServiceKit.WebHost.Endpoints.IAppHost)">
             <summary>Registers this object.</summary>
            
             <param name="appHost">The application host.</param>
        </member>
        <member name="M:NServiceKit.PredefinedRoutesFeature.ProcessRequest(System.String,System.String,System.String)">
             <summary>Process the request.</summary>
            
             <param name="httpMethod">The HTTP method.</param>
             <param name="pathInfo">  Information describing the path.</param>
             <param name="filePath">  Full pathname of the file.</param>
            
             <returns>An IHttpHandler.</returns>
        </member>
        <member name="T:Funq.IHasContainer">
            <summary>Interface for has container.</summary>
        </member>
        <member name="P:Funq.IHasContainer.Container">
             <summary>Gets the container.</summary>
            
             <value>The container.</value>
        </member>
        <member name="T:Funq.Container">
            <summary>
			Main container class for components, supporting container hierarchies and
			lifetime management of <see cref="T:System.IDisposable"/> instances.
		</summary>
            <content>A container.</content>
            <content>A container.</content>
        </member>
        <member name="M:Funq.Container.#ctor">
            <summary>
			Initializes a new empty container.
		</summary>
        </member>
        <member name="M:Funq.Container.CreateChildContainer">
            <summary>
			Creates a child container of the current one, which exposes its
			current service registration to the new child container.
		</summary>
        </member>
        <member name="M:Funq.Container.Dispose">
            <summary>
			Disposes the container and all instances owned by it (see
			<see cref="F:Funq.Owner.Container"/>), as well as all child containers
			created through <see cref="M:Funq.Container.CreateChildContainer"/>.
		</summary>
        </member>
        <member name="M:Funq.Container.Register``1(``0)">
            <summary>
			Registers a service instance with the container. This instance 
			will have <see cref="F:Funq.Owner.External"/> and <see cref="F:Funq.ReuseScope.Hierarchy"/> 
			behavior.
		</summary><param name="instance">Service instance to use.</param>
        </member>
        <member name="M:Funq.Container.Register``1(System.String,``0)">
            <summary>
			Registers a named service instance with the container. This instance
			will have <see cref="F:Funq.Owner.External"/> and <see cref="F:Funq.ReuseScope.Hierarchy"/>
			behavior.
		</summary><param name="name">Name of the service to register.</param><param name="instance">Service instance to use.</param>
        </member>
        <member name="M:Funq.Container.LazyResolve``1">
            <summary>
			Retrieves a function that can be used to lazily resolve an instance 
			of the service when needed.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><returns>The function that can resolve to the service instance when invoked.</returns><exception cref="T:Funq.ResolutionException">The requested service has not been registered previously.</exception>
        </member>
        <member name="M:Funq.Container.LazyResolve``2">
            <!-- No matching elements were found for the following include tag --><include file="Container.xdoc" path="docs/doc[@for=&quot;Container.LazyResolve{TService,TArgs}&quot;]/*"/>
        </member>
        <member name="M:Funq.Container.LazyResolve``3">
            <!-- No matching elements were found for the following include tag --><include file="Container.xdoc" path="docs/doc[@for=&quot;Container.LazyResolve{TService,TArgs}&quot;]/*"/>
        </member>
        <member name="M:Funq.Container.LazyResolve``4">
            <!-- No matching elements were found for the following include tag --><include file="Container.xdoc" path="docs/doc[@for=&quot;Container.LazyResolve{TService,TArgs}&quot;]/*"/>
        </member>
        <member name="M:Funq.Container.LazyResolve``5">
            <!-- No matching elements were found for the following include tag --><include file="Container.xdoc" path="docs/doc[@for=&quot;Container.LazyResolve{TService,TArgs}&quot;]/*"/>
        </member>
        <member name="M:Funq.Container.LazyResolve``6">
            <!-- No matching elements were found for the following include tag --><include file="Container.xdoc" path="docs/doc[@for=&quot;Container.LazyResolve{TService,TArgs}&quot;]/*"/>
        </member>
        <member name="M:Funq.Container.LazyResolve``7">
            <!-- No matching elements were found for the following include tag --><include file="Container.xdoc" path="docs/doc[@for=&quot;Container.LazyResolve{TService,TArgs}&quot;]/*"/>
        </member>
        <member name="M:Funq.Container.LazyResolve``1(System.String)">
            <summary>
			Retrieves a function that can be used to lazily resolve an instance
			of the service with the given name when needed.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><param name="name">Name of the service to retrieve.</param><returns>The function that can resolve to the service instance with the given name when invoked.</returns><exception cref="T:Funq.ResolutionException">The requested service with the given name has not been registered previously.</exception>
        </member>
        <member name="M:Funq.Container.LazyResolve``2(System.String)">
            <summary>
			Retrieves a function that can be used to lazily resolve an instance
			of the service of the given type, name and service constructor arguments when needed.
		</summary><param name="name">Name of the service to retrieve.</param><returns>The function that can resolve to the service instance with the given and service constructor arguments name when invoked.</returns><exception cref="T:Funq.ResolutionException">The requested service with the given name and constructor arguments has not been registered previously.</exception>
        </member>
        <member name="M:Funq.Container.LazyResolve``3(System.String)">
            <summary>
			Retrieves a function that can be used to lazily resolve an instance
			of the service of the given type, name and service constructor arguments when needed.
		</summary><param name="name">Name of the service to retrieve.</param><returns>The function that can resolve to the service instance with the given and service constructor arguments name when invoked.</returns><exception cref="T:Funq.ResolutionException">The requested service with the given name and constructor arguments has not been registered previously.</exception>
        </member>
        <member name="M:Funq.Container.LazyResolve``4(System.String)">
            <summary>
			Retrieves a function that can be used to lazily resolve an instance
			of the service of the given type, name and service constructor arguments when needed.
		</summary><param name="name">Name of the service to retrieve.</param><returns>The function that can resolve to the service instance with the given and service constructor arguments name when invoked.</returns><exception cref="T:Funq.ResolutionException">The requested service with the given name and constructor arguments has not been registered previously.</exception>
        </member>
        <member name="M:Funq.Container.LazyResolve``5(System.String)">
            <summary>
			Retrieves a function that can be used to lazily resolve an instance
			of the service of the given type, name and service constructor arguments when needed.
		</summary><param name="name">Name of the service to retrieve.</param><returns>The function that can resolve to the service instance with the given and service constructor arguments name when invoked.</returns><exception cref="T:Funq.ResolutionException">The requested service with the given name and constructor arguments has not been registered previously.</exception>
        </member>
        <member name="M:Funq.Container.LazyResolve``6(System.String)">
            <summary>
			Retrieves a function that can be used to lazily resolve an instance
			of the service of the given type, name and service constructor arguments when needed.
		</summary><param name="name">Name of the service to retrieve.</param><returns>The function that can resolve to the service instance with the given and service constructor arguments name when invoked.</returns><exception cref="T:Funq.ResolutionException">The requested service with the given name and constructor arguments has not been registered previously.</exception>
        </member>
        <member name="M:Funq.Container.LazyResolve``7(System.String)">
            <summary>
			Retrieves a function that can be used to lazily resolve an instance
			of the service of the given type, name and service constructor arguments when needed.
		</summary><param name="name">Name of the service to retrieve.</param><returns>The function that can resolve to the service instance with the given and service constructor arguments name when invoked.</returns><exception cref="T:Funq.ResolutionException">The requested service with the given name and constructor arguments has not been registered previously.</exception>
        </member>
        <member name="M:Funq.Container.Register``1(System.Func{Funq.Container,``0})">
            <summary>
			Registers the given service by providing a factory delegate to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``2(System.Func{Funq.Container,``1,``0})">
            <summary>
			Registers the given service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg">First argument that should be passed to the factory delegate to create the instace.</typeparam><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``3(System.Func{Funq.Container,``1,``2,``0})">
            <summary>
			Registers the given service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``4(System.Func{Funq.Container,``1,``2,``3,``0})">
            <summary>
			Registers the given service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg3">Third argument that should be passed to the factory delegate to create the instace.</typeparam><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``5(Funq.Func{Funq.Container,``1,``2,``3,``4,``0})">
            <summary>
			Registers the given service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg3">Third argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg4">Fourth argument that should be passed to the factory delegate to create the instace.</typeparam><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``6(Funq.Func{Funq.Container,``1,``2,``3,``4,``5,``0})">
            <summary>
			Registers the given service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg3">Third argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg4">Fourth argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg5">Fifth argument that should be passed to the factory delegate to create the instace.</typeparam><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``7(Funq.Func{Funq.Container,``1,``2,``3,``4,``5,``6,``0})">
            <summary>
			Registers the given service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg3">Third argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg4">Fourth argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg5">Fifth argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg6">Sixth argument that should be passed to the factory delegate to create the instace.</typeparam><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``1(System.String,System.Func{Funq.Container,``0})">
            <summary>
			Registers the given named service by providing a factory delegate to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><param name="name">A name used to differenciate this service registration.</param><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``2(System.String,System.Func{Funq.Container,``1,``0})">
            <summary>
			Registers the given named service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg">First argument that should be passed to the factory delegate to create the instace.</typeparam><param name="name">A name used to differenciate this service registration.</param><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``3(System.String,System.Func{Funq.Container,``1,``2,``0})">
            <summary>
			Registers the given named service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><param name="name">A name used to differenciate this service registration.</param><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``4(System.String,System.Func{Funq.Container,``1,``2,``3,``0})">
            <summary>
			Registers the given named service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg3">Third argument that should be passed to the factory delegate to create the instace.</typeparam><param name="name">A name used to differenciate this service registration.</param><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``5(System.String,Funq.Func{Funq.Container,``1,``2,``3,``4,``0})">
            <summary>
			Registers the given named service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg3">Third argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg4">Fourth argument that should be passed to the factory delegate to create the instace.</typeparam><param name="name">A name used to differenciate this service registration.</param><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``6(System.String,Funq.Func{Funq.Container,``1,``2,``3,``4,``5,``0})">
            <summary>
			Registers the given named service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg3">Third argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg4">Fourth argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg5">Fifth argument that should be passed to the factory delegate to create the instace.</typeparam><param name="name">A name used to differenciate this service registration.</param><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``7(System.String,Funq.Func{Funq.Container,``1,``2,``3,``4,``5,``6,``0})">
            <summary>
			Registers the given named service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg3">Third argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg4">Fourth argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg5">Fifth argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg6">Sixth argument that should be passed to the factory delegate to create the instace.</typeparam><param name="name">A name used to differenciate this service registration.</param><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Resolve``1">
            <summary>
			Resolves the given service by type, without passing any arguments for
			its construction.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.Resolve``2(``1)">
            <summary>
			Resolves the given service by type, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg">First argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.Resolve``3(``1,``2)">
            <summary>
			Resolves the given service by type, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.Resolve``4(``1,``2,``3)">
            <summary>
			Resolves the given service by type, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.Resolve``5(``1,``2,``3,``4)">
            <summary>
			Resolves the given service by type, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.Resolve``6(``1,``2,``3,``4,``5)">
            <summary>
			Resolves the given service by type, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg5">Fifth argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.Resolve``7(``1,``2,``3,``4,``5,``6)">
            <summary>
			Resolves the given service by type, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg5">Fifth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg6">Sixth argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.ResolveNamed``1(System.String)">
            <summary>
			Resolves the given service by type and name, without passing arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.ResolveNamed``2(System.String,``1)">
            <summary>
			Resolves the given service by type and name, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg">First argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.ResolveNamed``3(System.String,``1,``2)">
            <summary>
			Resolves the given service by type and name, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.ResolveNamed``4(System.String,``1,``2,``3)">
            <summary>
			Resolves the given service by type and name, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.ResolveNamed``5(System.String,``1,``2,``3,``4)">
            <summary>
			Resolves the given service by type and name, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.ResolveNamed``6(System.String,``1,``2,``3,``4,``5)">
            <summary>
			Resolves the given service by type and name, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg5">Fifth argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.ResolveNamed``7(System.String,``1,``2,``3,``4,``5,``6)">
            <summary>
			Resolves the given service by type and name, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg5">Fifth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg6">Sixth argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.TryResolve``1">
            <summary>
			Attempts to resolve the given service by type, without passing arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolve``2(``1)">
            <summary>
			Attempts to resolve the given service by type, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg">First argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolve``3(``1,``2)">
            <summary>
			Attempts to resolve the given service by type, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolve``4(``1,``2,``3)">
            <summary>
			Attempts to resolve the given service by type, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolve``5(``1,``2,``3,``4)">
            <summary>
			Attempts to resolve the given service by type, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolve``6(``1,``2,``3,``4,``5)">
            <summary>
			Attempts to resolve the given service by type, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg5">Fifth argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolve``7(``1,``2,``3,``4,``5,``6)">
            <summary>
			Attempts to resolve the given service by type, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg5">Fifth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg6">Sixth argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolveNamed``1(System.String)">
            <summary>
			Attempts to resolve the given service by type and name, without passing
			arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolveNamed``2(System.String,``1)">
            <summary>
			Attempts to resolve the given service by type and name, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg">First argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolveNamed``3(System.String,``1,``2)">
            <summary>
			Attempts to resolve the given service by type and name, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolveNamed``4(System.String,``1,``2,``3)">
            <summary>
			Attempts to resolve the given service by type and name, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolveNamed``5(System.String,``1,``2,``3,``4)">
            <summary>
			Attempts to resolve the given service by type and name, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolveNamed``6(System.String,``1,``2,``3,``4,``5)">
            <summary>
			Attempts to resolve the given service by type and name, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg5">Fifth argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolveNamed``7(System.String,``1,``2,``3,``4,``5,``6)">
            <summary>
			Attempts to resolve the given service by type and name, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg5">Fifth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg6">Sixth argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.RegisterAutoWired``1">
            <summary>
            Register an autowired dependency
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Funq.Container.RegisterAutoWiredAs``2">
            <summary>
            Register an autowired dependency as a separate type
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TAs"></typeparam>
        </member>
        <member name="M:Funq.Container.RegisterAs``2">
            <summary>
            Alias for RegisterAutoWiredAs
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TAs"></typeparam>
        </member>
        <member name="M:Funq.Container.AutoWire(System.Object)">
            <summary>
            Auto-wires an existing instance, 
            ie all public properties are tried to be resolved.
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:Funq.Container.GetConstructorWithMostParams(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Funq.Container.GenerateAutoWireFn``1">
            <summary>
            Generates a function which creates and auto-wires the specified type..
            </summary>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Funq.Container.AutoWire(Funq.Container,System.Object)">
            <summary>
            Auto-wires an existing instance of a specific type.
            The auto-wiring progress is also cached to be faster 
            when calling next time with the same type.
            </summary>
            <param name="container"></param>
            <param name="instance"></param>
        </member>
        <member name="P:Funq.Container.disposablesCount">
             <summary>Gets the number of disposables.</summary>
            
             <value>The number of disposables.</value>
        </member>
        <member name="P:Funq.Container.DefaultOwner">
            <summary>
			Default owner for new registrations. <see cref="F:Funq.Owner.Container"/> by default.
		</summary>
        </member>
        <member name="P:Funq.Container.DefaultReuse">
            <summary>
			Default reuse scope for new registrations. <see cref="F:Funq.ReuseScope.Hierarchy"/> by default.
		</summary>
        </member>
        <member name="P:Funq.Container.CheckAdapterFirst">
             <summary>Gets or sets a value indicating whether the check adapter first.</summary>
            
             <value>true if check adapter first, false if not.</value>
        </member>
        <member name="P:Funq.Container.Adapter">
            <summary>
            
            </summary>
        </member>
        <member name="T:NServiceKit.Html.HtmlExtensions">
            <summary>A HTML extensions.</summary>
        </member>
        <member name="M:NServiceKit.Html.HtmlExtensions.AsRawJson``1(``0)">
             <summary>A T extension method that converts a model to a raw JSON.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="model">The model to act on.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.HtmlExtensions.AsRaw``1(``0)">
             <summary>A T extension method that converts a model to a raw.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="model">The model to act on.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="T:NServiceKit.Html.IViewEngine">
            <summary>Interface for view engine.</summary>
        </member>
        <member name="M:NServiceKit.Html.IViewEngine.HasView(System.String,NServiceKit.ServiceHost.IHttpRequest)">
             <summary>Query if 'viewName' has view.</summary>
            
             <param name="viewName">Name of the view.</param>
             <param name="httpReq"> The HTTP request.</param>
            
             <returns>true if view, false if not.</returns>
        </member>
        <member name="M:NServiceKit.Html.IViewEngine.RenderPartial(System.String,System.Object,System.Boolean,System.IO.StreamWriter,NServiceKit.Html.HtmlHelper)">
             <summary>Renders the partial.</summary>
            
             <param name="pageName">  Name of the page.</param>
             <param name="model">     The model.</param>
             <param name="renderHtml">true to render HTML.</param>
             <param name="writer">    The writer.</param>
             <param name="htmlHelper">The HTML helper.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.Html.IViewEngine.ProcessRequest(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse,System.Object)">
             <summary>Process the request.</summary>
            
             <param name="httpReq">The HTTP request.</param>
             <param name="httpRes">The HTTP resource.</param>
             <param name="dto">    The dto.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="T:NServiceKit.MetadataFeature">
            <summary>A metadata feature.</summary>
        </member>
        <member name="M:NServiceKit.MetadataFeature.Register(NServiceKit.WebHost.Endpoints.IAppHost)">
             <summary>Registers this object.</summary>
            
             <param name="appHost">The application host.</param>
        </member>
        <member name="M:NServiceKit.MetadataFeature.ProcessRequest(System.String,System.String,System.String)">
             <summary>Process the request.</summary>
            
             <param name="httpMethod">The HTTP method.</param>
             <param name="pathInfo">  Information describing the path.</param>
             <param name="filePath">  Full pathname of the file.</param>
            
             <returns>An IHttpHandler.</returns>
        </member>
        <member name="T:NServiceKit.RequestInfoFeature">
            <summary>A request information feature.</summary>
        </member>
        <member name="M:NServiceKit.RequestInfoFeature.Register(NServiceKit.WebHost.Endpoints.IAppHost)">
             <summary>Registers this object.</summary>
            
             <param name="appHost">The application host.</param>
        </member>
        <member name="M:NServiceKit.RequestInfoFeature.ProcessRequest(System.String,System.String,System.String)">
             <summary>Process the request.</summary>
            
             <param name="httpMethod">The HTTP method.</param>
             <param name="pathInfo">  Information describing the path.</param>
             <param name="filePath">  Full pathname of the file.</param>
            
             <returns>An IHttpHandler.</returns>
        </member>
        <member name="T:NServiceKit.ServiceHost.ContainerTypeExtensions">
            <summary>
            Extension methods on <see cref="T:Funq.Container"/>.
            </summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.ContainerTypeExtensions.RegisterAutoWiredType(Funq.Container,System.Type,System.Type,Funq.ReuseScope)">
            <summary>
            Registers the type in the IoC container and
            adds auto-wiring to the specified type.
            </summary>
            <param name="container"></param>
            <param name="serviceType"></param>
            <param name="inFunqAsType"></param>
            <param name="scope"></param>
        </member>
        <member name="M:NServiceKit.ServiceHost.ContainerTypeExtensions.RegisterAutoWiredType(Funq.Container,System.Type,Funq.ReuseScope)">
            <summary>
            Registers the type in the IoC container and
            adds auto-wiring to the specified type.
            The reuse scope is set to none (transient).
            </summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.ContainerTypeExtensions.RegisterAutoWiredTypes(Funq.Container,System.Collections.Generic.IEnumerable{System.Type},Funq.ReuseScope)">
            <summary>
            Registers the types in the IoC container and
            adds auto-wiring to the specified types.
            The reuse scope is set to none (transient).
            </summary>
        </member>
        <member name="T:Funq.Func`6">
            <summary>
            Encapsulates a method that has five parameters and returns a value of the 
             type specified by the <typeparamref name="TResult"/> parameter.
            </summary>
        </member>
        <member name="T:Funq.Func`7">
            <summary>
            Encapsulates a method that has six parameters and returns a value of the 
             type specified by the <typeparamref name="TResult"/> parameter.
            </summary>
        </member>
        <member name="T:Funq.Func`8">
            <summary>
            Encapsulates a method that has seven parameters and returns a value of the 
             type specified by the <typeparamref name="TResult"/> parameter.
            </summary>
        </member>
        <member name="T:Funq.IFluentInterface">
            <summary>
            Helper interface used to hide the base <see cref="T:System.Object"/> 
            members from the fluent API to make for much cleaner 
            Visual Studio intellisense experience.
            </summary>
        </member>
        <member name="M:Funq.IFluentInterface.GetType">
            <summary/>
        </member>
        <member name="M:Funq.IFluentInterface.GetHashCode">
            <summary/>
        </member>
        <member name="M:Funq.IFluentInterface.ToString">
            <summary/>
        </member>
        <member name="M:Funq.IFluentInterface.Equals(System.Object)">
            <summary/>
        </member>
        <member name="T:Funq.IFunqlet">
            <summary>
            Funqlets are a set of components provided as a package 
            to an existing container (like a module).
            </summary>
        </member>
        <member name="M:Funq.IFunqlet.Configure(Funq.Container)">
            <summary>
            Configure the given container with the 
            registrations provided by the funqlet.
            </summary>
            <param name="container">Container to register.</param>
        </member>
        <member name="T:Funq.IContainerModule">
            <summary>
            Interface used by plugins to contribute registrations 
            to an existing container.
            </summary>
        </member>
        <member name="T:Funq.Owner">
            <summary>
            Determines who is responsible for disposing instances 
            registered with a container.
            </summary>
        </member>
        <member name="F:Funq.Owner.Container">
            <summary>
            Container should dispose provided instances when it is disposed. This is the 
            default.
            </summary>
        </member>
        <member name="F:Funq.Owner.External">
            <summary>
            Container does not dispose provided instances.
            </summary>
        </member>
        <member name="F:Funq.Owner.Default">
            <summary>
            Default owner, which equals <see cref="F:Funq.Owner.Container"/>.
            </summary>
        </member>
        <member name="T:Funq.ResolutionException">
            <summary>
            Exception thrown by the container when a service cannot be resolved.
            </summary>
        </member>
        <member name="M:Funq.ResolutionException.#ctor(System.Type)">
            <summary>
            Initializes the exception with the service that could not be resolved.
            </summary>
        </member>
        <member name="M:Funq.ResolutionException.#ctor(System.Type,System.String)">
            <summary>
            Initializes the exception with the service (and its name) that could not be resolved.
            </summary>
        </member>
        <member name="M:Funq.ResolutionException.#ctor(System.String)">
            <summary>
            Initializes the exception with an arbitrary message.
            </summary>
        </member>
        <member name="T:Funq.ReuseScope">
            <summary>
            Determines visibility and reuse of instances provided by the container.
            </summary>
        </member>
        <member name="F:Funq.ReuseScope.Hierarchy">
            <summary>
            Instances are reused within a container hierarchy. Instances 
            are created (if necessary) in the container where the registration
            was performed, and are reused by all descendent containers.
            </summary>
        </member>
        <member name="F:Funq.ReuseScope.Container">
            <summary>
            Instances are reused only at the given container. Descendent 
            containers do not reuse parent container instances and get  
            a new instance at their level.
            </summary>
        </member>
        <member name="F:Funq.ReuseScope.None">
            <summary>
            Each request to resolve the dependency will result in a new 
            instance being returned.
            </summary>
        </member>
        <member name="F:Funq.ReuseScope.Request">
            <summary>
            Instaces are reused within the given request
            </summary>
        </member>
        <member name="F:Funq.ReuseScope.Default">
            <summary>
            Default scope, which equals <see cref="F:Funq.ReuseScope.Hierarchy"/>.
            </summary>
        </member>
        <member name="T:Funq.IRegistration">
            <summary>
            Fluent API for customizing the registration of a service.
            </summary>
        </member>
        <member name="T:Funq.IReusedOwned">
            <summary>
            Fluent API that exposes both <see cref="M:Funq.IReused.ReusedWithin(Funq.ReuseScope)"/>
            and owner (<see cref="M:Funq.IOwned.OwnedBy(Funq.Owner)"/>).
            </summary>
        </member>
        <member name="T:Funq.IReused">
            <summary>
            Fluent API that allows specifying the reuse instances.
            </summary>
        </member>
        <member name="M:Funq.IReused.ReusedWithin(Funq.ReuseScope)">
            <summary>
            Specifies how instances are reused within a container or hierarchy. Default 
            scope is <see cref="F:Funq.ReuseScope.Hierarchy"/>.
            </summary>
        </member>
        <member name="T:Funq.IOwned">
            <summary>
            Fluent API that allows specifying the owner of instances 
            created from a registration.
            </summary>
        </member>
        <member name="M:Funq.IOwned.OwnedBy(Funq.Owner)">
            <summary>
            Specifies the owner of instances created from this registration. Default 
            owner is <see cref="F:Funq.Owner.Container"/>.
            </summary>
        </member>
        <member name="M:Funq.ServiceEntry.#ctor">
            <summary>Initializes a new instance of the Funq.ServiceEntry class.</summary>
        </member>
        <member name="F:Funq.ServiceEntry.Owner">
            <summary>
            Ownership setting for the service.
            </summary>
        </member>
        <member name="F:Funq.ServiceEntry.Reuse">
            <summary>
            Reuse scope setting for the service.
            </summary>
        </member>
        <member name="F:Funq.ServiceEntry.Container">
            <summary>
            The container where the entry was registered.
            </summary>
        </member>
        <member name="M:Funq.ServiceEntry.OwnedBy(Funq.Owner)">
            <summary>
            Specifies the owner for instances, which determines how 
            they will be disposed.
            </summary>
        </member>
        <member name="M:Funq.ServiceEntry.ReusedWithin(Funq.ReuseScope)">
            <summary>
            Specifies the scope for instances, which determines 
            visibility of instances across containers and hierarchies.
            </summary>
        </member>
        <member name="T:Funq.IRegistration`1">
            <summary>
            Fluent API for customizing the registration of a service.
            </summary>
        </member>
        <member name="T:Funq.IInitializable`1">
            <summary>
            Fluent API that allows registering an initializer for the 
            service.
            </summary>
        </member>
        <member name="M:Funq.IInitializable`1.InitializedBy(System.Action{Funq.Container,`0})">
            <summary>
            Specifies an initializer that should be invoked after 
            the service instance has been created by the factory.
            </summary>
        </member>
        <member name="M:Funq.ServiceEntry`2.#ctor(`1)">
             <summary>Initializes a new instance of the Funq.ServiceEntry&lt;TService, TFunc&gt; class.</summary>
            
             <param name="factory">The Func delegate that creates instances of the service.</param>
        </member>
        <member name="F:Funq.ServiceEntry`2.Factory">
            <summary>
            The Func delegate that creates instances of the service.
            </summary>
        </member>
        <member name="F:Funq.ServiceEntry`2.instance">
            <summary>
            The cached service instance if the scope is <see cref="F:Funq.ReuseScope.Hierarchy"/> or 
            <see cref="F:Funq.ReuseScope.Container"/>.
            </summary>
        </member>
        <member name="F:Funq.ServiceEntry`2.Initializer">
            <summary>
            The Func delegate that initializes the object after creation.
            </summary>
        </member>
        <member name="M:Funq.ServiceEntry`2.InitializedBy(System.Action{Funq.Container,`0})">
             <summary>Initialized by.</summary>
            
             <param name="initializer">The Func delegate that initializes the object after creation.</param>
            
             <returns>An IReusedOwned.</returns>
        </member>
        <member name="M:Funq.ServiceEntry`2.CloneFor(Funq.Container)">
            <summary>
            Clones the service entry assigning the <see cref="T:Funq.Container"/> to the 
            <paramref name="newContainer"/>. Does not copy the <see cref="P:Funq.ServiceEntry`2.Instance"/>.
            </summary>
        </member>
        <member name="M:Funq.ServiceEntry`2.AquireLockIfNeeded">
             <summary>Aquire lock if needed.</summary>
            
             <returns>An IDisposable.</returns>
        </member>
        <member name="M:Funq.ServiceEntry`2.AquiredLock.#ctor(System.Object)">
             <summary>Initializes a new instance of the Funq.ServiceEntry&lt;TService, TFunc&gt;.AquiredLock class.</summary>
            
             <param name="syncRoot">The synchronise root.</param>
        </member>
        <member name="M:Funq.ServiceEntry`2.AquiredLock.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:Funq.ServiceKey.#ctor(System.Type,System.String)">
             <summary>Initializes a new instance of the Funq.ServiceKey class.</summary>
            
             <param name="factoryType">Type of the factory.</param>
             <param name="serviceName">Name of the service.</param>
        </member>
        <member name="F:Funq.ServiceKey.FactoryType">
            <summary>Type of the factory.</summary>
        </member>
        <member name="F:Funq.ServiceKey.Name">
            <summary>The name.</summary>
        </member>
        <member name="M:Funq.ServiceKey.Equals(Funq.ServiceKey)">
             <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</summary>
            
             <param name="other">The service key to compare to this object.</param>
            
             <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.</returns>
        </member>
        <member name="M:Funq.ServiceKey.Equals(System.Object)">
             <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</summary>
            
             <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
            
             <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.</returns>
        </member>
        <member name="M:Funq.ServiceKey.Equals(Funq.ServiceKey,Funq.ServiceKey)">
             <summary>Tests if two ServiceKey objects are considered equal.</summary>
            
             <param name="obj1">Service key to be compared.</param>
             <param name="obj2">Service key to be compared.</param>
            
             <returns>true if the objects are considered equal, false if they are not.</returns>
        </member>
        <member name="M:Funq.ServiceKey.GetHashCode">
             <summary>Serves as a hash function for a particular type.</summary>
            
             <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
        </member>
        <member name="T:NServiceKit.MiniProfiler.BaseProfilerProvider">
            <summary>
            BaseProfilerProvider.  This providers some helper methods which provide access to
            internals not otherwise available.
            To use, override the <see cref="M:NServiceKit.MiniProfiler.BaseProfilerProvider.Start(NServiceKit.MiniProfiler.ProfileLevel)"/>, <see cref="M:NServiceKit.MiniProfiler.BaseProfilerProvider.Stop(System.Boolean)"/> and <see cref="M:NServiceKit.MiniProfiler.BaseProfilerProvider.GetCurrentProfiler"/>
            methods.
            </summary>
        </member>
        <member name="T:NServiceKit.MiniProfiler.IProfilerProvider">
            <summary>
            A provider used to create <see cref="T:NServiceKit.MiniProfiler.Profiler"/> instances and maintain the current instance.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.IProfilerProvider.Start(NServiceKit.MiniProfiler.ProfileLevel)">
            <summary>
            Starts a new MiniProfiler and sets it to be current.  By the end of this method
            <see cref="M:NServiceKit.MiniProfiler.IProfilerProvider.GetCurrentProfiler"/> should return the new MiniProfiler.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.IProfilerProvider.Stop(System.Boolean)">
            <summary>
            Ends the current profiling session, if one exists.
            </summary>
            <param name="discardResults">
            When true, clears the <see cref="P:NServiceKit.MiniProfiler.Profiler.Current"/> for this HttpContext, allowing profiling to 
            be prematurely stopped and discarded. Useful for when a specific route does not need to be profiled.
            </param>
        </member>
        <member name="M:NServiceKit.MiniProfiler.IProfilerProvider.GetCurrentProfiler">
            <summary>
            Returns the current MiniProfiler.  This is used by <see cref="P:NServiceKit.MiniProfiler.Profiler.Current"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.MiniProfiler.BaseProfilerProvider.Start(NServiceKit.MiniProfiler.ProfileLevel)">
            <summary>
            Starts a new MiniProfiler and sets it to be current.  By the end of this method
            <see cref="M:NServiceKit.MiniProfiler.BaseProfilerProvider.GetCurrentProfiler"/> should return the new MiniProfiler.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.BaseProfilerProvider.Stop(System.Boolean)">
            <summary>
            Stops the current MiniProfiler (if any is currently running).
            <see cref="M:NServiceKit.MiniProfiler.BaseProfilerProvider.SaveProfiler(NServiceKit.MiniProfiler.Profiler)"/> should be called if <paramref name="discardResults"/> is false
            </summary>
            <param name="discardResults">If true, any current results will be thrown away and nothing saved</param>
        </member>
        <member name="M:NServiceKit.MiniProfiler.BaseProfilerProvider.GetCurrentProfiler">
            <summary>
            Returns the current MiniProfiler.  This is used by <see cref="P:NServiceKit.MiniProfiler.Profiler.Current"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.MiniProfiler.BaseProfilerProvider.SetProfilerActive(NServiceKit.MiniProfiler.Profiler)">
            <summary>
            Sets <paramref name="profiler"/> to be active (read to start profiling)
            This should be called once a new MiniProfiler has been created.
            </summary>
            <param name="profiler">The profiler to set to active</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="profiler"/> is null</exception>
        </member>
        <member name="M:NServiceKit.MiniProfiler.BaseProfilerProvider.StopProfiler(NServiceKit.MiniProfiler.Profiler)">
            <summary>
            Stops the profiler and marks it as inactive.
            </summary>
            <param name="profiler">The profiler to stop</param>
            <returns>True if successful, false if Stop had previously been called on this profiler</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="profiler"/> is null</exception>
        </member>
        <member name="M:NServiceKit.MiniProfiler.BaseProfilerProvider.SaveProfiler(NServiceKit.MiniProfiler.Profiler)">
            <summary>
            Calls <see cref="M:NServiceKit.MiniProfiler.Profiler.Settings.EnsureStorageStrategy"/> to save the current
            profiler using the current storage settings
            </summary>
            <param name="current"></param>
        </member>
        <member name="T:NServiceKit.MiniProfiler.Data.ExecuteType">
            <summary>
            Categories of sql statements.
            </summary>
        </member>
        <member name="F:NServiceKit.MiniProfiler.Data.ExecuteType.None">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:NServiceKit.MiniProfiler.Data.ExecuteType.NonQuery">
            <summary>
            DML statements that alter database state, e.g. INSERT, UPDATE
            </summary>
        </member>
        <member name="F:NServiceKit.MiniProfiler.Data.ExecuteType.Scalar">
            <summary>
            Statements that return a single record
            </summary>
        </member>
        <member name="F:NServiceKit.MiniProfiler.Data.ExecuteType.Reader">
            <summary>
            Statements that iterate over a result set
            </summary>
        </member>
        <member name="T:NServiceKit.MiniProfiler.Data.IDbProfiler">
            <summary>
            A callback for ProfiledDbConnection and family
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.IDbProfiler.ExecuteStart(System.Data.Common.DbCommand,NServiceKit.MiniProfiler.Data.ExecuteType)">
            <summary>
            Called when a command starts executing
            </summary>
            <param name="profiledDbCommand"></param>
            <param name="executeType"></param>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.IDbProfiler.ExecuteFinish(System.Data.Common.DbCommand,NServiceKit.MiniProfiler.Data.ExecuteType,System.Data.Common.DbDataReader)">
            <summary>
            Called when a reader finishes executing
            </summary>
            <param name="profiledDbCommand"></param>
            <param name="executeType"></param>
            <param name="reader"></param>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.IDbProfiler.ReaderFinish(System.Data.Common.DbDataReader)">
            <summary>
            Called when a reader is done iterating through the data 
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.IDbProfiler.OnError(System.Data.Common.DbCommand,NServiceKit.MiniProfiler.Data.ExecuteType,System.Exception)">
            <summary>
            Called when an error happens during execution of a command 
            </summary>
            <param name="profiledDbCommand"></param>
            <param name="executeType"></param>
            <param name="exception"></param>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Data.IDbProfiler.IsActive">
            <summary>
            True if the profiler instance is active
            </summary>
        </member>
        <member name="T:NServiceKit.MiniProfiler.Data.Link`2">
            <summary>
            This is a micro-cache; suitable when the number of terms is controllable (a few hundred, for example),
            and strictly append-only; you cannot change existing values. All key matches are on **REFERENCE**
            equality. The type is fully thread-safe.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.Link`2.TryGet(NServiceKit.MiniProfiler.Data.Link{`0,`1},`0,`1@)">
             <summary>Attempts to get from the given data.</summary>
            
             <param name="link"> The link.</param>
             <param name="key">  The key.</param>
             <param name="value">The value.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.Link`2.TryAdd(NServiceKit.MiniProfiler.Data.Link{`0,`1}@,`0,`1@)">
             <summary>Attempts to add from the given data.</summary>
            
             <param name="head"> The head.</param>
             <param name="key">  The key.</param>
             <param name="value">The value.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Data.Link`2.Key">
             <summary>Gets the key.</summary>
            
             <value>The key.</value>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Data.Link`2.Value">
             <summary>Gets the value.</summary>
            
             <value>The value.</value>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Data.Link`2.Tail">
             <summary>Gets the tail.</summary>
            
             <value>The tail.</value>
        </member>
        <member name="T:NServiceKit.MiniProfiler.Data.ProfiledDbCommand">
            <summary>A profiled database command.</summary>
        </member>
        <member name="F:NServiceKit.MiniProfiler.Data.ProfiledDbCommand._cmd">
            <summary>The command.</summary>
        </member>
        <member name="F:NServiceKit.MiniProfiler.Data.ProfiledDbCommand._conn">
            <summary>The connection.</summary>
        </member>
        <member name="F:NServiceKit.MiniProfiler.Data.ProfiledDbCommand._tran">
            <summary>The tran.</summary>
        </member>
        <member name="F:NServiceKit.MiniProfiler.Data.ProfiledDbCommand._profiler">
            <summary>The profiler.</summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbCommand.#ctor(System.Data.Common.DbCommand,System.Data.Common.DbConnection,NServiceKit.MiniProfiler.Data.IDbProfiler)">
             <summary>Initializes a new instance of the NServiceKit.MiniProfiler.Data.ProfiledDbCommand class.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <param name="cmd">     The command.</param>
             <param name="conn">    The connection.</param>
             <param name="profiler">The profiler.</param>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbCommand.ExecuteDbDataReader(System.Data.CommandBehavior)">
             <summary>Executes the command text against the connection.</summary>
            
             <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            
             <param name="behavior">An instance of <see cref="T:System.Data.CommandBehavior"/>.</param>
            
             <returns>A <see cref="T:System.Data.Common.DbDataReader"/>.</returns>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbCommand.ExecuteNonQuery">
             <summary>Executes a SQL statement against a connection object.</summary>
            
             <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            
             <returns>The number of rows affected.</returns>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbCommand.ExecuteScalar">
             <summary>Executes the query and returns the first column of the first row in the result set returned by the query. All other columns and rows are ignored.</summary>
            
             <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            
             <returns>The first column of the first row in the result set.</returns>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbCommand.Cancel">
            <summary>Attempts to cancels the execution of a <see cref="T:System.Data.Common.DbCommand" />.</summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbCommand.Prepare">
            <summary>Creates a prepared (or compiled) version of the command on the data source.</summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbCommand.CreateDbParameter">
             <summary>Creates a new instance of a <see cref="T:System.Data.Common.DbParameter" /> object.</summary>
            
             <returns>A <see cref="T:System.Data.Common.DbParameter" /> object.</returns>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbCommand.Dispose(System.Boolean)">
             <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Component" /> and optionally releases the managed resources.</summary>
            
             <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbCommand.Clone">
             <summary>Makes a deep copy of this object.</summary>
            
             <exception cref="T:System.NotSupportedException">Thrown when the requested operation is not supported.</exception>
            
             <returns>A copy of this object.</returns>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Data.ProfiledDbCommand.BindByName">
            <summary>
            If the underlying command supports BindByName, this sets/clears the underlying
            implementation accordingly. This is required to support OracleCommand from dapper-dot-net
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Data.ProfiledDbCommand.CommandText">
             <summary>Gets or sets the text command to run against the data source.</summary>
            
             <value>The text command to execute. The default value is an empty string ("").</value>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Data.ProfiledDbCommand.CommandTimeout">
             <summary>Gets or sets the wait time before terminating the attempt to execute a command and generating an error.</summary>
            
             <value>The time in seconds to wait for the command to execute.</value>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Data.ProfiledDbCommand.CommandType">
             <summary>Indicates or specifies how the <see cref="P:System.Data.Common.DbCommand.CommandText" /> property is interpreted.</summary>
            
             <value>One of the <see cref="T:System.Data.CommandType" /> values. The default is Text.</value>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Data.ProfiledDbCommand.DbConnection">
             <summary>Gets or sets the <see cref="T:System.Data.Common.DbConnection" /> used by this <see cref="T:System.Data.Common.DbCommand" />.</summary>
            
             <value>The connection to the data source.</value>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Data.ProfiledDbCommand.DbParameterCollection">
             <summary>Gets the collection of <see cref="T:System.Data.Common.DbParameter" /> objects.</summary>
            
             <value>The parameters of the SQL statement or stored procedure.</value>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Data.ProfiledDbCommand.DbTransaction">
             <summary>Gets or sets the <see cref="P:System.Data.Common.DbCommand.DbTransaction" /> within which this <see cref="T:System.Data.Common.DbCommand" /> object executes.</summary>
            
             <value>The transaction within which a Command object of a .NET Framework data provider executes. The default value is a null reference (Nothing in Visual Basic).</value>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Data.ProfiledDbCommand.DesignTimeVisible">
             <summary>Gets or sets a value indicating whether the command object should be visible in a customized interface control.</summary>
            
             <value>true, if the command object should be visible in a control; otherwise false. The default is true.</value>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Data.ProfiledDbCommand.UpdatedRowSource">
             <summary>
             Gets or sets how command results are applied to the <see cref="T:System.Data.DataRow" /> when used by the Update method of a <see cref="T:System.Data.Common.DbDataAdapter" />.
             </summary>
            
             <value>One of the <see cref="T:System.Data.UpdateRowSource" /> values. The default is Both unless the command is automatically generated. Then the default is None.</value>
        </member>
        <member name="T:NServiceKit.MiniProfiler.Data.ProfiledDbConnection">
            <summary>
            Wraps a database connection, allowing sql execution timings to be collected when a <see cref="T:NServiceKit.MiniProfiler.Profiler"/> session is started.
            </summary>
        </member>
        <member name="F:NServiceKit.MiniProfiler.Data.ProfiledDbConnection._conn">
            <summary>
            This will be made private; use <see cref="P:NServiceKit.MiniProfiler.Data.ProfiledDbConnection.InnerConnection"/>
            </summary>
        </member>
        <member name="F:NServiceKit.MiniProfiler.Data.ProfiledDbConnection.autoDisposeConnection">
            <summary>true to automatically dispose connection.</summary>
        </member>
        <member name="F:NServiceKit.MiniProfiler.Data.ProfiledDbConnection._profiler">
            <summary>
            This will be made private; use <see cref="P:NServiceKit.MiniProfiler.Data.ProfiledDbConnection.Profiler"/>
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbConnection.#ctor(System.Data.Common.DbConnection,NServiceKit.MiniProfiler.Data.IDbProfiler,System.Boolean)">
            <summary>
            Returns a new <see cref="T:NServiceKit.MiniProfiler.Data.ProfiledDbConnection"/> that wraps <paramref name="connection"/>, 
            providing query execution profiling.  If profiler is null, no profiling will occur.
            </summary>
            <param name="connection">Your provider-specific flavor of connection, e.g. SqlConnection, OracleConnection</param>
            <param name="profiler">The currently started <see cref="T:NServiceKit.MiniProfiler.Profiler"/> or null.</param>
            <param name="autoDisposeConnection">Determines whether the ProfiledDbConnection will dispose the underlying connection.</param>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbConnection.#ctor(System.Data.IDbConnection,NServiceKit.MiniProfiler.Data.IDbProfiler,System.Boolean)">
             <summary>Returns a new <see cref="T:NServiceKit.MiniProfiler.Data.ProfiledDbConnection"/> that wraps <paramref name="connection"/>, providing query execution profiling.  If profiler is null, no profiling will occur.</summary>
            
             <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or illegal values.</exception>
            
             <param name="connection">           Your provider-specific flavor of connection, e.g. SqlConnection, OracleConnection.</param>
             <param name="profiler">             The currently started <see cref="T:NServiceKit.MiniProfiler.Profiler"/> or null.</param>
             <param name="autoDisposeConnection">Determines whether the ProfiledDbConnection will dispose the underlying connection.</param>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbConnection.ChangeDatabase(System.String)">
             <summary>Changes the current database for an open connection.</summary>
            
             <param name="databaseName">Specifies the name of the database for the connection to use.</param>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbConnection.Close">
            <summary>Closes the connection to the database. This is the preferred method of closing any open connection.</summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbConnection.GetSchema">
             <summary>Returns schema information for the data source of this <see cref="T:System.Data.Common.DbConnection" />.</summary>
            
             <returns>A <see cref="T:System.Data.DataTable" /> that contains schema information.</returns>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbConnection.GetSchema(System.String)">
             <summary>Returns schema information for the data source of this <see cref="T:System.Data.Common.DbConnection" /> using the specified string for the schema name.</summary>
            
             <param name="collectionName">Specifies the name of the schema to return.</param>
            
             <returns>A <see cref="T:System.Data.DataTable" /> that contains schema information.</returns>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbConnection.GetSchema(System.String,System.String[])">
             <summary>
             Returns schema information for the data source of this <see cref="T:System.Data.Common.DbConnection" /> using the specified string for the schema name and the specified string array for the
             restriction values.
             </summary>
            
             <param name="collectionName">   Specifies the name of the schema to return.</param>
             <param name="restrictionValues">Specifies a set of restriction values for the requested schema.</param>
            
             <returns>A <see cref="T:System.Data.DataTable" /> that contains schema information.</returns>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbConnection.Open">
            <summary>Opens a database connection with the settings specified by the <see cref="P:System.Data.Common.DbConnection.ConnectionString" />.</summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbConnection.BeginDbTransaction(System.Data.IsolationLevel)">
             <summary>Starts a database transaction.</summary>
            
             <param name="isolationLevel">Specifies the isolation level for the transaction.</param>
            
             <returns>An object representing the new transaction.</returns>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbConnection.CreateDbCommand">
             <summary>Creates and returns a <see cref="T:System.Data.Common.DbCommand" /> object associated with the current connection.</summary>
            
             <returns>A <see cref="T:System.Data.Common.DbCommand" /> object.</returns>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbConnection.Dispose(System.Boolean)">
             <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Component" /> and optionally releases the managed resources.</summary>
            
             <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbConnection.Clone">
             <summary>Makes a deep copy of this object.</summary>
            
             <exception cref="T:System.NotSupportedException">Thrown when the requested operation is not supported.</exception>
            
             <returns>A copy of this object.</returns>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Data.ProfiledDbConnection.InnerConnection">
            <summary>
            The underlying, real database connection to your db provider.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Data.ProfiledDbConnection.Profiler">
            <summary>
            The current profiler instance; could be null.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Data.ProfiledDbConnection.WrappedConnection">
            <summary>
            The raw connection this is wrapping
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Data.ProfiledDbConnection.CanRaiseEvents">
             <summary>Gets a value indicating whether the component can raise an event.</summary>
            
             <value>true if the component can raise events; otherwise, false. The default is true.</value>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Data.ProfiledDbConnection.ConnectionString">
             <summary>Gets or sets the string used to open the connection.</summary>
            
             <value>
             The connection string used to establish the initial connection. The exact contents of the connection string depend on the specific data source for this connection. The default value is an empty
             string.
             </value>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Data.ProfiledDbConnection.ConnectionTimeout">
             <summary>Gets the time to wait while establishing a connection before terminating the attempt and generating an error.</summary>
            
             <value>The time (in seconds) to wait for a connection to open. The default value is determined by the specific type of connection that you are using.</value>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Data.ProfiledDbConnection.Database">
             <summary>Gets the name of the current database after a connection is opened, or the database name specified in the connection string before the connection is opened.</summary>
            
             <value>The name of the current database or the name of the database to be used after a connection is opened. The default value is an empty string.</value>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Data.ProfiledDbConnection.DataSource">
             <summary>Gets the name of the database server to which to connect.</summary>
            
             <value>The name of the database server to which to connect. The default value is an empty string.</value>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Data.ProfiledDbConnection.ServerVersion">
             <summary>Gets a string that represents the version of the server to which the object is connected.</summary>
            
             <value>The version of the database. The format of the string returned depends on the specific type of connection you are using.</value>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Data.ProfiledDbConnection.State">
             <summary>Gets a string that describes the state of the connection.</summary>
            
             <value>The state of the connection. The format of the string returned depends on the specific type of connection you are using.</value>
        </member>
        <member name="T:NServiceKit.MiniProfiler.Data.ProfiledDbDataReader">
            <summary>A profiled database data reader.</summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbDataReader.#ctor(System.Data.Common.DbDataReader,System.Data.Common.DbConnection,NServiceKit.MiniProfiler.Data.IDbProfiler)">
             <summary>Initializes a new instance of the NServiceKit.MiniProfiler.Data.ProfiledDbDataReader class.</summary>
            
             <param name="reader">    The reader.</param>
             <param name="connection">The connection.</param>
             <param name="profiler">  The profiler.</param>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbDataReader.Close">
            <summary>Closes the <see cref="T:System.Data.Common.DbDataReader" /> object.</summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbDataReader.GetBoolean(System.Int32)">
             <summary>Gets the value of the specified column as a Boolean.</summary>
            
             <param name="ordinal">The zero-based column ordinal.</param>
            
             <returns>The value of the specified column.</returns>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbDataReader.GetByte(System.Int32)">
             <summary>Gets the value of the specified column as a byte.</summary>
            
             <param name="ordinal">The zero-based column ordinal.</param>
            
             <returns>The value of the specified column.</returns>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
             <summary>
             Reads a stream of bytes from the specified column, starting at location indicated by <paramref name="dataOffset" />, into the buffer, starting at the location indicated by
             <paramref name="bufferOffset" />.
             </summary>
            
             <param name="ordinal">     The zero-based column ordinal.</param>
             <param name="dataOffset">  The index within the row from which to begin the read operation.</param>
             <param name="buffer">      The buffer into which to copy the data.</param>
             <param name="bufferOffset">The index with the buffer to which the data will be copied.</param>
             <param name="length">      The maximum number of characters to read.</param>
            
             <returns>The actual number of bytes read.</returns>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbDataReader.GetChar(System.Int32)">
             <summary>Gets the value of the specified column as a single character.</summary>
            
             <param name="ordinal">The zero-based column ordinal.</param>
            
             <returns>The value of the specified column.</returns>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
             <summary>
             Reads a stream of characters from the specified column, starting at location indicated by <paramref name="dataOffset" />, into the buffer, starting at the location indicated by
             <paramref name="bufferOffset" />.
             </summary>
            
             <param name="ordinal">     The zero-based column ordinal.</param>
             <param name="dataOffset">  The index within the row from which to begin the read operation.</param>
             <param name="buffer">      The buffer into which to copy the data.</param>
             <param name="bufferOffset">The index with the buffer to which the data will be copied.</param>
             <param name="length">      The maximum number of characters to read.</param>
            
             <returns>The actual number of characters read.</returns>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbDataReader.GetDataTypeName(System.Int32)">
             <summary>Gets name of the data type of the specified column.</summary>
            
             <param name="ordinal">The zero-based column ordinal.</param>
            
             <returns>A string representing the name of the data type.</returns>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbDataReader.GetDateTime(System.Int32)">
             <summary>Gets the value of the specified column as a <see cref="T:System.DateTime" /> object.</summary>
            
             <param name="ordinal">The zero-based column ordinal.</param>
            
             <returns>The value of the specified column.</returns>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbDataReader.GetDecimal(System.Int32)">
             <summary>Gets the value of the specified column as a <see cref="T:System.Decimal" /> object.</summary>
            
             <param name="ordinal">The zero-based column ordinal.</param>
            
             <returns>The value of the specified column.</returns>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbDataReader.GetDouble(System.Int32)">
             <summary>Gets the value of the specified column as a double-precision floating point number.</summary>
            
             <param name="ordinal">The zero-based column ordinal.</param>
            
             <returns>The value of the specified column.</returns>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbDataReader.GetEnumerator">
             <summary>Returns an <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the rows in the data reader.</summary>
            
             <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the rows in the data reader.</returns>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbDataReader.GetFieldType(System.Int32)">
             <summary>Gets the data type of the specified column.</summary>
            
             <param name="ordinal">The zero-based column ordinal.</param>
            
             <returns>The data type of the specified column.</returns>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbDataReader.GetFloat(System.Int32)">
             <summary>Gets the value of the specified column as a single-precision floating point number.</summary>
            
             <param name="ordinal">The zero-based column ordinal.</param>
            
             <returns>The value of the specified column.</returns>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbDataReader.GetGuid(System.Int32)">
             <summary>Gets the value of the specified column as a globally-unique identifier (GUID).</summary>
            
             <param name="ordinal">The zero-based column ordinal.</param>
            
             <returns>The value of the specified column.</returns>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbDataReader.GetInt16(System.Int32)">
             <summary>Gets the value of the specified column as a 16-bit signed integer.</summary>
            
             <param name="ordinal">The zero-based column ordinal.</param>
            
             <returns>The value of the specified column.</returns>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbDataReader.GetInt32(System.Int32)">
             <summary>Gets the value of the specified column as a 32-bit signed integer.</summary>
            
             <param name="ordinal">The zero-based column ordinal.</param>
            
             <returns>The value of the specified column.</returns>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbDataReader.GetInt64(System.Int32)">
             <summary>Gets the value of the specified column as a 64-bit signed integer.</summary>
            
             <param name="ordinal">The zero-based column ordinal.</param>
            
             <returns>The value of the specified column.</returns>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbDataReader.GetName(System.Int32)">
             <summary>Gets the name of the column, given the zero-based column ordinal.</summary>
            
             <param name="ordinal">The zero-based column ordinal.</param>
            
             <returns>The name of the specified column.</returns>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbDataReader.GetOrdinal(System.String)">
             <summary>Gets the column ordinal given the name of the column.</summary>
            
             <param name="name">The name of the column.</param>
            
             <returns>The zero-based column ordinal.</returns>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbDataReader.GetSchemaTable">
             <summary>Returns a <see cref="T:System.Data.DataTable" /> that describes the column metadata of the <see cref="T:System.Data.Common.DbDataReader" />.</summary>
            
             <returns>A <see cref="T:System.Data.DataTable" /> that describes the column metadata.</returns>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbDataReader.GetString(System.Int32)">
             <summary>Gets the value of the specified column as an instance of <see cref="T:System.String" />.</summary>
            
             <param name="ordinal">The zero-based column ordinal.</param>
            
             <returns>The value of the specified column.</returns>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbDataReader.GetValue(System.Int32)">
             <summary>Gets the value of the specified column as an instance of <see cref="T:System.Object" />.</summary>
            
             <param name="ordinal">The zero-based column ordinal.</param>
            
             <returns>The value of the specified column.</returns>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbDataReader.GetValues(System.Object[])">
             <summary>Populates an array of objects with the column values of the current row.</summary>
            
             <param name="values">An array of <see cref="T:System.Object" /> into which to copy the attribute columns.</param>
            
             <returns>The number of instances of <see cref="T:System.Object" /> in the array.</returns>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbDataReader.IsDBNull(System.Int32)">
             <summary>Gets a value that indicates whether the column contains nonexistent or missing values.</summary>
            
             <param name="ordinal">The zero-based column ordinal.</param>
            
             <returns>true if the specified column is equivalent to <see cref="T:System.DBNull" />; otherwise false.</returns>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbDataReader.NextResult">
             <summary>Advances the reader to the next result when reading the results of a batch of statements.</summary>
            
             <returns>true if there are more result sets; otherwise false.</returns>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbDataReader.Read">
             <summary>Advances the reader to the next record in a result set.</summary>
            
             <returns>true if there are more rows; otherwise false.</returns>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Data.ProfiledDbDataReader.Depth">
             <summary>Gets a value indicating the depth of nesting for the current row.</summary>
            
             <value>The depth of nesting for the current row.</value>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Data.ProfiledDbDataReader.FieldCount">
             <summary>Gets the number of columns in the current row.</summary>
            
             <value>The number of columns in the current row.</value>
            
             ### <exception cref="T:System.NotSupportedException">There is no current connection to an instance of SQL Server.</exception>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Data.ProfiledDbDataReader.HasRows">
             <summary>Gets a value that indicates whether this <see cref="T:System.Data.Common.DbDataReader" /> contains one or more rows.</summary>
            
             <value>true if the <see cref="T:System.Data.Common.DbDataReader" /> contains one or more rows; otherwise false.</value>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Data.ProfiledDbDataReader.IsClosed">
             <summary>Gets a value indicating whether the <see cref="T:System.Data.Common.DbDataReader" /> is closed.</summary>
            
             <value>true if the <see cref="T:System.Data.Common.DbDataReader" /> is closed; otherwise false.</value>
            
             ### <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Data.SqlClient.SqlDataReader" /> is closed.</exception>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Data.ProfiledDbDataReader.RecordsAffected">
             <summary>Gets the number of rows changed, inserted, or deleted by execution of the SQL statement.</summary>
            
             <value>The number of rows changed, inserted, or deleted. -1 for SELECT statements; 0 if no rows were affected or the statement failed.</value>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Data.ProfiledDbDataReader.Item(System.String)">
             <summary>Indexer to get items within this collection using array index syntax.</summary>
            
             <param name="name">The name.</param>
            
             <returns>The indexed item.</returns>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Data.ProfiledDbDataReader.Item(System.Int32)">
             <summary>Indexer to get items within this collection using array index syntax.</summary>
            
             <param name="ordinal">The ordinal.</param>
            
             <returns>The indexed item.</returns>
        </member>
        <member name="T:NServiceKit.MiniProfiler.Data.ProfiledDbProviderFactory">
            <summary>
            Wrapper for a db provider factory to enable profiling
            </summary>
        </member>
        <member name="F:NServiceKit.MiniProfiler.Data.ProfiledDbProviderFactory.Instance">
            <summary>
            Every provider factory must have an Instance public field
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbProviderFactory.#ctor">
            <summary>
            Used for db provider apis internally 
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbProviderFactory.InitProfiledDbProviderFactory(NServiceKit.MiniProfiler.Data.IDbProfiler,System.Data.Common.DbProviderFactory)">
            <summary>
            Allow to re-init the provider factory.
            </summary>
            <param name="profiler"></param>
            <param name="tail"></param>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbProviderFactory.#ctor(NServiceKit.MiniProfiler.Data.IDbProfiler,System.Data.Common.DbProviderFactory)">
            <summary>
            proxy
            </summary>
            <param name="profiler"></param>
            <param name="tail"></param>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbProviderFactory.CreateDataSourceEnumerator">
            <summary>
            proxy
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbProviderFactory.CreateCommand">
            <summary>
            proxy
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbProviderFactory.CreateConnection">
            <summary>
            proxy
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbProviderFactory.CreateParameter">
            <summary>
            proxy
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbProviderFactory.CreateConnectionStringBuilder">
            <summary>
            proxy
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbProviderFactory.CreateCommandBuilder">
            <summary>
            proxy
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbProviderFactory.CreateDataAdapter">
            <summary>
            proxy
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbProviderFactory.CreatePermission(System.Security.Permissions.PermissionState)">
            <summary>
            proxy
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Data.ProfiledDbProviderFactory.CanCreateDataSourceEnumerator">
            <summary>
            proxy
            </summary>
        </member>
        <member name="T:NServiceKit.MiniProfiler.Data.ProfiledDbTransaction">
            <summary>A profiled database transaction.</summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbTransaction.#ctor(System.Data.Common.DbTransaction,NServiceKit.MiniProfiler.Data.ProfiledDbConnection)">
             <summary>Initializes a new instance of the NServiceKit.MiniProfiler.Data.ProfiledDbTransaction class.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <param name="transaction">The transaction.</param>
             <param name="connection"> The connection.</param>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbTransaction.Commit">
            <summary>Commits the database transaction.</summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbTransaction.Rollback">
            <summary>Rolls back a transaction from a pending state.</summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Data.ProfiledDbTransaction.Dispose(System.Boolean)">
             <summary>Releases the unmanaged resources used by the <see cref="T:System.Data.Common.DbTransaction" /> and optionally releases the managed resources.</summary>
            
             <param name="disposing">If true, this method releases all resources held by any managed objects that this <see cref="T:System.Data.Common.DbTransaction" /> references.</param>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Data.ProfiledDbTransaction.DbConnection">
             <summary>Specifies the <see cref="T:System.Data.Common.DbConnection" /> object associated with the transaction.</summary>
            
             <value>The <see cref="T:System.Data.Common.DbConnection" /> object associated with the transaction.</value>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Data.ProfiledDbTransaction.IsolationLevel">
             <summary>Specifies the <see cref="T:System.Data.IsolationLevel" /> for this transaction.</summary>
            
             <value>The <see cref="T:System.Data.IsolationLevel" /> for this transaction.</value>
        </member>
        <member name="T:NServiceKit.MiniProfiler.Helpers.ExtensionMethods">
            <summary>
            Common extension methods to use only in this project
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Helpers.ExtensionMethods.IsNullOrWhiteSpace(System.String)">
            <summary>
            Answers true if this String is either null or empty.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Helpers.ExtensionMethods.HasValue(System.String)">
            <summary>
            Answers true if this String is neither null or empty.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Helpers.ExtensionMethods.EnsureTrailingSlash(System.String)">
            <summary>
            Removes trailing / characters from a path and leaves just one
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Helpers.ExtensionMethods.RemoveLeadingSlash(System.String)">
            <summary>
            Removes any leading / characters from a path
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Helpers.ExtensionMethods.RemoveTrailingSlash(System.String)">
            <summary>
            Removes any leading / characters from a path
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Helpers.ExtensionMethods.ToJson(System.Object)">
            <summary>
            Serializes <paramref name="o"/> to a json string.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Helpers.HaackFormatter.Format(System.String,System.Object)">
             <summary>A string extension method that formats.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <param name="format">The format to act on.</param>
             <param name="source">Source for the.</param>
            
             <returns>The formatted value.</returns>
        </member>
        <member name="T:NServiceKit.MiniProfiler.Helpers.HaackFormatter.FormatExpression">
            <summary>A format expression.</summary>
        </member>
        <member name="T:NServiceKit.MiniProfiler.Helpers.HaackFormatter.ITextExpression">
            <summary>Interface for text expression.</summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Helpers.HaackFormatter.FormatExpression.#ctor(System.String)">
             <summary>Initializes a new instance of the NServiceKit.MiniProfiler.Helpers.HaackFormatter.FormatExpression class.</summary>
            
             <param name="expression">The expression.</param>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Helpers.HaackFormatter.FormatExpression.Eval(System.Object)">
             <summary>Evals the given o.</summary>
            
             <exception cref="T:System.FormatException">Thrown when the format of the ? is incorrect.</exception>
            
             <param name="o">The object to process.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Helpers.HaackFormatter.FormatExpression.Expression">
             <summary>Gets the expression.</summary>
            
             <value>The expression.</value>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Helpers.HaackFormatter.FormatExpression.Format">
             <summary>Gets the format to use.</summary>
            
             <value>The format.</value>
        </member>
        <member name="T:NServiceKit.MiniProfiler.Helpers.HaackFormatter.LiteralFormat">
            <summary>A literal format.</summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Helpers.HaackFormatter.LiteralFormat.#ctor(System.String)">
             <summary>Initializes a new instance of the NServiceKit.MiniProfiler.Helpers.HaackFormatter.LiteralFormat class.</summary>
            
             <param name="literalText">The literal text.</param>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Helpers.HaackFormatter.LiteralFormat.Eval(System.Object)">
             <summary>Evals the given o.</summary>
            
             <param name="o">The object to process.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Helpers.HaackFormatter.LiteralFormat.LiteralText">
             <summary>Gets the literal text.</summary>
            
             <value>The literal text.</value>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Helpers.IStopwatch.Stop">
            <summary>Stops this object.</summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Helpers.IStopwatch.ElapsedTicks">
             <summary>Gets the elapsed ticks.</summary>
            
             <value>The elapsed ticks.</value>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Helpers.IStopwatch.Frequency">
             <summary>Gets the frequency.</summary>
            
             <value>The frequency.</value>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Helpers.IStopwatch.IsRunning">
             <summary>Gets a value indicating whether this object is running.</summary>
            
             <value>true if this object is running, false if not.</value>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Helpers.StopwatchWrapper.StartNew">
             <summary>Starts a new.</summary>
            
             <returns>An IStopwatch.</returns>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Helpers.StopwatchWrapper.Stop">
            <summary>Stops this object.</summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Helpers.StopwatchWrapper.ElapsedTicks">
             <summary>Gets the elapsed ticks.</summary>
            
             <value>The elapsed ticks.</value>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Helpers.StopwatchWrapper.Frequency">
             <summary>Gets the frequency.</summary>
            
             <value>The frequency.</value>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Helpers.StopwatchWrapper.IsRunning">
             <summary>Gets a value indicating whether this object is running.</summary>
            
             <value>true if this object is running, false if not.</value>
        </member>
        <member name="T:NServiceKit.MiniProfiler.Helpers.StackTraceSnippet">
            <summary>
            Gets part of a stack trace containing only methods we care about.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Helpers.StackTraceSnippet.Get">
            <summary>
            Gets the current formatted and filted stack trace.
            </summary>
            <returns>Space separated list of methods</returns>
        </member>
        <member name="T:NServiceKit.MiniProfiler.IHtmlString">
            <summary>Interface for HTML string.</summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.IHtmlString.ToHtmlString">
             <summary>Converts this object to a HTML string.</summary>
            
             <returns>This object as a string.</returns>
        </member>
        <member name="T:NServiceKit.MiniProfiler.HtmlString">
            <summary>A HTML string.</summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.HtmlString.#ctor(System.String)">
             <summary>Initializes a new instance of the NServiceKit.MiniProfiler.HtmlString class.</summary>
            
             <param name="value">The value.</param>
        </member>
        <member name="M:NServiceKit.MiniProfiler.HtmlString.ToString">
             <summary>Returns a string that represents the current object.</summary>
            
             <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:NServiceKit.MiniProfiler.HtmlString.ToHtmlString">
             <summary>Converts this object to a HTML string.</summary>
            
             <returns>This object as a string.</returns>
        </member>
        <member name="T:NServiceKit.MiniProfiler.HelperResult">
            <summary>Encapsulates the result of a helper.</summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.HelperResult.#ctor(System.Action{System.IO.TextWriter})">
             <summary>Initializes a new instance of the NServiceKit.MiniProfiler.HelperResult class.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <param name="action">The action.</param>
        </member>
        <member name="M:NServiceKit.MiniProfiler.HelperResult.ToHtmlString">
             <summary>Converts this object to a HTML string.</summary>
            
             <returns>This object as a string.</returns>
        </member>
        <member name="M:NServiceKit.MiniProfiler.HelperResult.ToString">
             <summary>Returns a string that represents the current object.</summary>
            
             <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:NServiceKit.MiniProfiler.HelperResult.WriteTo(System.IO.TextWriter)">
             <summary>Writes to.</summary>
            
             <param name="writer">The writer.</param>
        </member>
        <member name="T:NServiceKit.MiniProfiler.IpAddressIdentity">
            <summary>
            Identifies users based on ip address.
            </summary>
        </member>
        <member name="T:NServiceKit.MiniProfiler.IUserProvider">
            <summary>
            Provides functionality to identify which user is profiling a request.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.IUserProvider.GetUser(System.Web.HttpRequest)">
            <summary>
            Returns a string to identify the user profiling the current 'request'.
            </summary>
            <param name="request">The current HttpRequest being profiled.</param>
        </member>
        <member name="M:NServiceKit.MiniProfiler.IpAddressIdentity.GetUser(System.Web.HttpRequest)">
            <summary>
            Returns the paramter HttpRequest's client ip address.
            </summary>
        </member>
        <member name="T:NServiceKit.MiniProfiler.Profiler">
            <summary>
            A single MiniProfiler can be used to represent any number of steps/levels in a call-graph, via Step()
            </summary>
            <remarks>Totally baller.</remarks>
        </member>
        <member name="F:NServiceKit.MiniProfiler.Profiler._sw">
            <summary>
            Starts when this profiler is instantiated. Each <see cref="T:NServiceKit.MiniProfiler.Timing"/> step will use this Stopwatch's current ticks as
            their starting time.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Profiler.#ctor(System.String,NServiceKit.MiniProfiler.ProfileLevel)">
            <summary>
            Creates and starts a new MiniProfiler for the root <paramref name="url"/>, filtering <see cref="T:NServiceKit.MiniProfiler.Timing"/> steps to <paramref name="level"/>.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Profiler.ToString">
            <summary>
            Returns the <see cref="P:NServiceKit.MiniProfiler.Profiler.Root"/>'s <see cref="P:NServiceKit.MiniProfiler.Timing.Name"/> and <see cref="P:NServiceKit.MiniProfiler.Profiler.DurationMilliseconds"/> this profiler recorded.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Profiler.Equals(System.Object)">
            <summary>
            Returns true if Ids match.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Profiler.GetHashCode">
            <summary>
            Returns hashcode of Id.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Profiler.#ctor">
            <summary>
            Obsolete - used for serialization.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Profiler.GetTimingHierarchy">
            <summary>
            Walks the <see cref="T:NServiceKit.MiniProfiler.Timing"/> hierarchy contained in this profiler, starting with <see cref="P:NServiceKit.MiniProfiler.Profiler.Root"/>, and returns each Timing found.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Profiler.GetRoundedMilliseconds(System.Int64)">
            <summary>
            Returns milliseconds based on Stopwatch's Frequency.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Profiler.Start(NServiceKit.MiniProfiler.ProfileLevel)">
            <summary>
            Starts a new MiniProfiler based on the current <see cref="T:NServiceKit.MiniProfiler.IProfilerProvider"/>. This new profiler can be accessed by
            <see cref="P:NServiceKit.MiniProfiler.Profiler.Current"/>
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Profiler.Stop(System.Boolean)">
            <summary>
            Ends the current profiling session, if one exists.
            </summary>
            <param name="discardResults">
            When true, clears the <see cref="P:NServiceKit.MiniProfiler.Profiler.Current"/> for this HttpContext, allowing profiling to 
            be prematurely stopped and discarded. Useful for when a specific route does not need to be profiled.
            </param>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Profiler.StepStatic(System.String,NServiceKit.MiniProfiler.ProfileLevel)">
            <summary>
            Returns an <see cref="T:System.IDisposable"/> that will time the code between its creation and disposal. Use this method when you
            do not wish to include the MvcMiniProfiler namespace for the <see cref="M:NServiceKit.MiniProfiler.MiniProfilerExtensions.Step(NServiceKit.MiniProfiler.Profiler,System.String,NServiceKit.MiniProfiler.ProfileLevel)"/> extension method.
            </summary>
            <param name="name">A descriptive name for the code that is encapsulated by the resulting IDisposable's lifetime.</param>
            <param name="level">This step's visibility level; allows filtering when <see cref="M:NServiceKit.MiniProfiler.Profiler.Start(NServiceKit.MiniProfiler.ProfileLevel)"/> is called.</param>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Profiler.RenderIncludes(System.Nullable{NServiceKit.MiniProfiler.RenderPosition},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Returns the css and javascript includes needed to display the MiniProfiler results UI.
            </summary>
            <param name="position">Which side of the page the profiler popup button should be displayed on (defaults to left)</param>
            <param name="showTrivial">Whether to show trivial timings by default (defaults to false)</param>
            <param name="showTimeWithChildren">Whether to show time the time with children column by default (defaults to false)</param>
            <param name="maxTracesToShow">The maximum number of trace popups to show before removing the oldest (defaults to 15)</param>
            <param name="xhtml">xhtml rendering mode, ensure script tag is closed ... etc</param>
            <param name="showControls">when true, shows buttons to minimize and clear MiniProfiler results</param>
            <returns>Script and link elements normally; an empty string when there is no active profiling session.</returns>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Profiler.ToJson">
            <summary>
            Renders the current <see cref="T:NServiceKit.MiniProfiler.Profiler"/> to json.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Profiler.ToJson(NServiceKit.MiniProfiler.Profiler)">
            <summary>
            Renders the parameter <see cref="T:NServiceKit.MiniProfiler.Profiler"/> to json.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Profiler.FromJson(System.String)">
            <summary>
            Deserializes the json string parameter to a <see cref="T:NServiceKit.MiniProfiler.Profiler"/>.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Profiler.Clone">
            <summary>
            Create a DEEP clone of this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Profiler.GetInProgressCommands">
            <summary>
            Returns all currently open commands on this connection
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Profiler.GetSqlTimings">
            <summary>
            Returns all <see cref="T:NServiceKit.MiniProfiler.SqlTiming"/> results contained in all child <see cref="T:NServiceKit.MiniProfiler.Timing"/> steps.
            </summary>
        </member>
        <member name="F:NServiceKit.MiniProfiler.Profiler._sqlExecutionCounts">
            <summary>
            Contains any sql statements that are executed, along with how many times those statements are executed.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Profiler.AddSqlTiming(NServiceKit.MiniProfiler.SqlTiming)">
            <summary>
            Adds <paramref name="stats"/> to the current <see cref="T:NServiceKit.MiniProfiler.Timing"/>.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Profiler.GetExecutedCount(NServiceKit.MiniProfiler.Data.ExecuteType)">
            <summary>
            Returns the number of sql statements of <paramref name="type"/> that were executed in all <see cref="T:NServiceKit.MiniProfiler.Timing"/>s.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Profiler.Id">
            <summary>
            Identifies this Profiler so it may be stored/cached.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Profiler.Name">
            <summary>
            A display name for this profiling session.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Profiler.Started">
            <summary>
            When this profiler was instantiated.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Profiler.MachineName">
            <summary>
            Where this profiler was run.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Profiler.Level">
            <summary>
            Allows filtering of <see cref="T:NServiceKit.MiniProfiler.Timing"/> steps based on what <see cref="T:NServiceKit.MiniProfiler.ProfileLevel"/> 
            the steps are created with.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Profiler.Root">
            <summary>
            The first <see cref="T:NServiceKit.MiniProfiler.Timing"/> that is created and started when this profiler is instantiated.
            All other <see cref="T:NServiceKit.MiniProfiler.Timing"/>s will be children of this one.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Profiler.User">
            <summary>
            A string identifying the user/client that is profiling this request.  Set <see cref="P:NServiceKit.MiniProfiler.Profiler.Settings.UserProvider"/>
            with an <see cref="T:NServiceKit.MiniProfiler.IUserProvider"/>-implementing class to provide a custom value.
            </summary>
            <remarks>
            If this is not set manually at some point, the <see cref="P:NServiceKit.MiniProfiler.Profiler.Settings.UserProvider"/> implementation will be used;
            by default, this will be the current request's ip address.
            </remarks>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Profiler.HasUserViewed">
            <summary>
            Returns true when this MiniProfiler has been viewed by the <see cref="P:NServiceKit.MiniProfiler.Profiler.User"/> that recorded it.
            </summary>
            <remarks>
            Allows POSTs that result in a redirect to be profiled. <see cref="P:NServiceKit.MiniProfiler.Profiler.Settings.Storage"/> implementation
            will keep a list of all profilers that haven't been fetched down.
            </remarks>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Profiler.Stopwatch">
            <summary>
            For unit testing, returns the timer.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Profiler.DurationMilliseconds">
            <summary>
            Milliseconds, to one decimal place, that this MiniProfiler ran.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Profiler.HasTrivialTimings">
            <summary>
            Returns true when <see cref="P:NServiceKit.MiniProfiler.Profiler.Root"/> or any of its <see cref="P:NServiceKit.MiniProfiler.Timing.Children"/> are <see cref="P:NServiceKit.MiniProfiler.Timing.IsTrivial"/>.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Profiler.HasAllTrivialTimings">
            <summary>
            Returns true when all child <see cref="T:NServiceKit.MiniProfiler.Timing"/>s are <see cref="P:NServiceKit.MiniProfiler.Timing.IsTrivial"/>.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Profiler.TrivialDurationThresholdMilliseconds">
            <summary>
            Any Timing step with a duration less than or equal to this will be hidden by default in the UI; defaults to 2.0 ms.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Profiler.ElapsedTicks">
            <summary>
            Ticks since this MiniProfiler was started.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Profiler.Head">
            <summary>
            Points to the currently executing Timing. 
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Profiler.Current">
            <summary>
            Gets the currently running MiniProfiler for the current HttpContext; null if no MiniProfiler was <see cref="M:NServiceKit.MiniProfiler.Profiler.Start(NServiceKit.MiniProfiler.ProfileLevel)"/>ed.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Profiler.SqlProfiler">
            <summary>
            Contains information about queries executed during this profiling session.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Profiler.DurationMillisecondsInSql">
            <summary>
            Milliseconds, to one decimal place, that this MiniProfiler was executing sql.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Profiler.HasSqlTimings">
            <summary>
            Returns true when we have profiled queries.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Profiler.HasDuplicateSqlTimings">
            <summary>
            Returns true when any child Timings have duplicate queries.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Profiler.ExecutedReaders">
            <summary>
            How many sql data readers were executed in all <see cref="T:NServiceKit.MiniProfiler.Timing"/> steps.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Profiler.ExecutedScalars">
            <summary>
            How many sql scalar queries were executed in all <see cref="T:NServiceKit.MiniProfiler.Timing"/> steps.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Profiler.ExecutedNonQueries">
            <summary>
            How many sql non-query statements were executed in all <see cref="T:NServiceKit.MiniProfiler.Timing"/> steps.
            </summary>
        </member>
        <member name="T:NServiceKit.MiniProfiler.Profiler.Settings">
            <summary>
            Various configuration properties.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Profiler.Settings.LoadVersionFromAssembly">
            <summary>Loads version from assembly.</summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Profiler.Settings.ExcludeAssembly(System.String)">
            <summary>
            Excludes the specified assembly from the stack trace output.
            </summary>
            <param name="assemblyName">The short name of the assembly. AssemblyName.Name</param>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Profiler.Settings.ExcludeType(System.String)">
            <summary>
            Excludes the specified type from the stack trace output.
            </summary>
            <param name="typeToExclude">The System.Type name to exclude</param>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Profiler.Settings.ExcludeMethod(System.String)">
            <summary>
            Excludes the specified method name from the stack trace output.
            </summary>
            <param name="methodName">The name of the method</param>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Profiler.Settings.EnsureStorageStrategy">
            <summary>
            Make sure we can at least store profiler results to the http runtime cache.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Profiler.Settings.AssembliesToExclude">
            <summary>
            Assemblies to exclude from the stack trace report.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Profiler.Settings.TypesToExclude">
            <summary>
            Types to exclude from the stack trace report.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Profiler.Settings.MethodsToExclude">
            <summary>
            Methods to exclude from the stack trace report.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Profiler.Settings.StackMaxLength">
            <summary>
            The max length of the stack string to report back; defaults to 120 chars.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Profiler.Settings.TrivialDurationThresholdMilliseconds">
            <summary>
            Any Timing step with a duration less than or equal to this will be hidden by default in the UI; defaults to 2.0 ms.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Profiler.Settings.PopupShowTimeWithChildren">
            <summary>
            Dictates if the "time with children" column is displayed by default, defaults to false.
            For a per-page override you can use .RenderIncludes(showTimeWithChildren: true/false)
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Profiler.Settings.PopupShowTrivial">
            <summary>
            Dictates if trivial timings are displayed by default, defaults to false.
            For a per-page override you can use .RenderIncludes(showTrivial: true/false)
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Profiler.Settings.PopupMaxTracesToShow">
            <summary>
            Determines how many traces to show before removing the oldest; defaults to 15.
            For a per-page override you can use .RenderIncludes(maxTracesToShow: 10)
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Profiler.Settings.PopupRenderPosition">
            <summary>
            Dictates on which side of the page the profiler popup button is displayed; defaults to left.
            For a per-page override you can use .RenderIncludes(position: RenderPosition.Left/Right)
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Profiler.Settings.ShowControls">
            <summary>
            Determines if min-max, clear, etc are rendered; defaults to false.
            For a per-page override you can use .RenderIncludes(showControls: true/false)
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Profiler.Settings.ExcludeStackTraceSnippetFromSqlTimings">
            <summary>
            By default, SqlTimings will grab a stack trace to help locate where queries are being executed.
            When this setting is true, no stack trace will be collected, possibly improving profiler performance.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Profiler.Settings.IgnoredPaths">
            <summary>
            When <see cref="M:NServiceKit.MiniProfiler.Profiler.Start(NServiceKit.MiniProfiler.ProfileLevel)"/> is called, if the current request url contains any items in this property,
            no profiler will be instantiated and no results will be displayed.
            Default value is { "/ssr-", "/content/", "/scripts/", "/favicon.ico" }.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Profiler.Settings.RouteBasePath">
            <summary>
            The path under which ALL routes are registered in, defaults to the application root.  For example, "~/myDirectory/" would yield
            "/myDirectory/ssr-includes.js" rather than just "/mini-profiler-includes.js"
            Any setting here should be in APP RELATIVE FORM, e.g. "~/myDirectory/"
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Profiler.Settings.Storage">
            <summary>
            Understands how to save and load MiniProfilers. Used for caching between when
            a profiling session ends and results can be fetched to the client, and for showing shared, full-page results.
            </summary>
            <remarks>
            The normal profiling session life-cycle is as follows:
            1) request begins
            2) profiler is started
            3) normal page/controller/request execution
            4) profiler is stopped
            5) profiler is cached with <see cref="P:NServiceKit.MiniProfiler.Profiler.Settings.Storage"/>'s implementation of <see cref="M:NServiceKit.MiniProfiler.Storage.IStorage.Save(NServiceKit.MiniProfiler.Profiler)"/>
            6) request ends
            7) page is displayed and profiling results are ajax-fetched down, pulling cached results from 
               <see cref="P:NServiceKit.MiniProfiler.Profiler.Settings.Storage"/>'s implementation of <see cref="M:NServiceKit.MiniProfiler.Storage.IStorage.Load(System.Guid)"/>
            </remarks>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Profiler.Settings.SqlFormatter">
            <summary>
            The formatter applied to the SQL being rendered (used only for UI)
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Profiler.Settings.UserProvider">
            <summary>
            Provides user identification for a given profiling request.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Profiler.Settings.Version">
            <summary>
            Assembly version of this dank MiniProfiler.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Profiler.Settings.ProfilerProvider">
            <summary>
            The provider used to provider the current instance of a provider
            This is also 
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Profiler.Settings.Results_Authorize">
            <summary>
            A function that determines who can access the MiniProfiler results url.  It should return true when
            the request client has access, false for a 401 to be returned. HttpRequest parameter is the current request and
            MiniProfiler parameter is the results that were profiled.
            </summary>
            <remarks>
            Both the HttpRequest and MiniProfiler parameters that will be passed into this function should never be null.
            </remarks>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Profiler.Settings.StopwatchProvider">
            <summary>
            Allows switching out stopwatches for unit testing.
            </summary>
        </member>
        <member name="T:NServiceKit.MiniProfiler.ProfileLevel">
            <summary>
            Categorizes individual <see cref="T:NServiceKit.MiniProfiler.Timing"/> steps to allow filtering.
            </summary>
        </member>
        <member name="F:NServiceKit.MiniProfiler.ProfileLevel.Info">
            <summary>
            Default level given to Timings.
            </summary>
        </member>
        <member name="F:NServiceKit.MiniProfiler.ProfileLevel.Verbose">
            <summary>
            Useful when profiling many items in a loop, but you don't wish to always see this detail.
            </summary>
        </member>
        <member name="T:NServiceKit.MiniProfiler.RenderPosition">
            <summary>
            Dictates on which side of the page the profiler popup button is displayed; defaults to left.
            </summary>
        </member>
        <member name="F:NServiceKit.MiniProfiler.RenderPosition.Left">
            <summary>
            Profiler popup button is displayed on the left.
            </summary>
        </member>
        <member name="F:NServiceKit.MiniProfiler.RenderPosition.Right">
            <summary>
            Profiler popup button is displayed on the right.
            </summary>
        </member>
        <member name="T:NServiceKit.MiniProfiler.MiniProfilerExtensions">
            <summary>
            Contains helper methods that ease working with null <see cref="T:NServiceKit.MiniProfiler.Profiler"/>s.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.MiniProfilerExtensions.Inline``1(NServiceKit.MiniProfiler.Profiler,System.Func{``0},System.String)">
            <summary>
            Wraps <paramref name="selector"/> in a <see cref="M:NServiceKit.MiniProfiler.MiniProfilerExtensions.Step(NServiceKit.MiniProfiler.Profiler,System.String,NServiceKit.MiniProfiler.ProfileLevel)"/> call and executes it, returning its result.
            </summary>
            <param name="profiler">The current profiling session or null.</param>
            <param name="selector">Method to execute and profile.</param>
            <param name="name">The <see cref="T:NServiceKit.MiniProfiler.Timing"/> step name used to label the profiler results.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.MiniProfiler.MiniProfilerExtensions.Step(NServiceKit.MiniProfiler.Profiler,System.String,NServiceKit.MiniProfiler.ProfileLevel)">
            <summary>
            Returns an <see cref="T:System.IDisposable"/> that will time the code between its creation and disposal.
            </summary>
            <param name="profiler">The current profiling session or null.</param>
            <param name="name">A descriptive name for the code that is encapsulated by the resulting IDisposable's lifetime.</param>
            <param name="level">This step's visibility level; allows filtering when <see cref="M:NServiceKit.MiniProfiler.Profiler.Start(NServiceKit.MiniProfiler.ProfileLevel)"/> is called.</param>
        </member>
        <member name="M:NServiceKit.MiniProfiler.MiniProfilerExtensions.AddProfilerResults(NServiceKit.MiniProfiler.Profiler,NServiceKit.MiniProfiler.Profiler)">
            <summary>
            Adds <paramref name="externalProfiler"/>'s <see cref="T:NServiceKit.MiniProfiler.Timing"/> hierarchy to this profiler's current Timing step,
            allowing other threads, remote calls, etc. to be profiled and joined into this profiling session.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.MiniProfilerExtensions.Render(NServiceKit.MiniProfiler.Profiler)">
            <summary>
            Returns an html-encoded string with a text-representation of <paramref name="profiler"/>; returns "" when profiler is null.
            </summary>
            <param name="profiler">The current profiling session or null.</param>
        </member>
        <member name="T:NServiceKit.MiniProfiler.SqlFormatters.InlineFormatter">
            <summary>
            Formats any SQL query with inline parameters, optionally including the value type
            </summary>
        </member>
        <member name="T:NServiceKit.MiniProfiler.SqlFormatters.ISqlFormatter">
            <summary>
            Takes a SqlTiming and returns a formatted SQL string, for parameter replacement, etc.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.SqlFormatters.ISqlFormatter.FormatSql(NServiceKit.MiniProfiler.SqlTiming)">
            <summary>
            Return SQL the way you want it to look on the in the trace. Usually used to format parameters 
            </summary>
            <param name="timing"></param>
            <returns>Formatted SQL</returns>
        </member>
        <member name="M:NServiceKit.MiniProfiler.SqlFormatters.InlineFormatter.#ctor(System.Boolean)">
            <summary>
            Creates a new Inline SQL Formatter, optionally including the parameter type info in comments beside the replaced value
            </summary>
            <param name="includeTypeInfo">whether to include a comment after the value, indicating the type, e.g. /* @myParam DbType.Int32 */</param>
        </member>
        <member name="M:NServiceKit.MiniProfiler.SqlFormatters.InlineFormatter.FormatSql(NServiceKit.MiniProfiler.SqlTiming)">
            <summary>
            Formats the SQL in a generic frieldly format, including the parameter type information in a comment if it was specified in the InlineFormatter constructor
            </summary>
            <param name="timing">The SqlTiming to format</param>
            <returns>A formatted SQL string</returns>
        </member>
        <member name="M:NServiceKit.MiniProfiler.SqlFormatters.InlineFormatter.GetParameterValue(NServiceKit.MiniProfiler.SqlTimingParameter)">
            <summary>
            Returns a string representation of the parameter's value, including the type
            </summary>
            <param name="p">The parameter to get a value for</param>
            <returns></returns>
        </member>
        <member name="T:NServiceKit.MiniProfiler.SqlFormatters.OracleFormatter">
            <summary>
            NOT IMPLEMENTED - will format statements with paramters in an Oracle friendly way
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.SqlFormatters.OracleFormatter.FormatSql(NServiceKit.MiniProfiler.SqlTiming)">
            <summary>
            Does NOTHING, implement me!
            </summary>
        </member>
        <member name="T:NServiceKit.MiniProfiler.SqlFormatters.SqlServerFormatter">
            <summary>
            Formats SQL server queries with a DECLARE up top for parameter values
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.SqlFormatters.SqlServerFormatter.FormatSql(NServiceKit.MiniProfiler.SqlTiming)">
            <summary>
            Formats the SQL in a SQL-Server friendly way, with DECLARE statements for the parameters up top.
            </summary>
            <param name="timing">The SqlTiming to format</param>
            <returns>A formatted SQL string</returns>
        </member>
        <member name="T:NServiceKit.MiniProfiler.SqlProfiler">
            <summary>
            Contains helper code to time sql statements.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.SqlProfiler.#ctor(NServiceKit.MiniProfiler.Profiler)">
            <summary>
            Returns a new SqlProfiler to be used in the 'profiler' session.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.SqlProfiler.ExecuteStartImpl(System.Data.Common.DbCommand,NServiceKit.MiniProfiler.Data.ExecuteType)">
            <summary>
            Tracks when 'command' is started.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.SqlProfiler.GetInProgressCommands">
            <summary>
            Returns all currently open commands on this connection
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.SqlProfiler.ExecuteFinishImpl(System.Data.Common.DbCommand,NServiceKit.MiniProfiler.Data.ExecuteType,System.Data.Common.DbDataReader)">
            <summary>
            Finishes profiling for 'command', recording durations.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.SqlProfiler.ReaderFinishedImpl(System.Data.Common.DbDataReader)">
            <summary>
            Called when 'reader' finishes its iterations and is closed.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.SqlProfiler.Profiler">
            <summary>
            The profiling session this SqlProfiler is part of.
            </summary>
        </member>
        <member name="T:NServiceKit.MiniProfiler.SqlProfilerExtensions">
            <summary>
            Helper methods that allow operation on SqlProfilers, regardless of their instantiation.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.SqlProfilerExtensions.ExecuteStart(NServiceKit.MiniProfiler.SqlProfiler,System.Data.Common.DbCommand,NServiceKit.MiniProfiler.Data.ExecuteType)">
            <summary>
            Tracks when 'command' is started.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.SqlProfilerExtensions.ExecuteFinish(NServiceKit.MiniProfiler.SqlProfiler,System.Data.Common.DbCommand,NServiceKit.MiniProfiler.Data.ExecuteType,System.Data.Common.DbDataReader)">
            <summary>
            Finishes profiling for 'command', recording durations.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.SqlProfilerExtensions.ReaderFinish(NServiceKit.MiniProfiler.SqlProfiler,System.Data.Common.DbDataReader)">
            <summary>
            Called when 'reader' finishes its iterations and is closed.
            </summary>
        </member>
        <member name="T:NServiceKit.MiniProfiler.SqlTiming">
            <summary>
            Profiles a single sql execution.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.SqlTiming.#ctor(System.Data.Common.DbCommand,NServiceKit.MiniProfiler.Data.ExecuteType,NServiceKit.MiniProfiler.Profiler)">
            <summary>
            Creates a new SqlTiming to profile 'command'.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.SqlTiming.#ctor">
            <summary>
            Obsolete - used for serialization.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.SqlTiming.ToString">
            <summary>
            Returns a snippet of the sql command and the duration.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.SqlTiming.Equals(System.Object)">
            <summary>
            Returns true if Ids match.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.SqlTiming.GetHashCode">
            <summary>
            Returns hashcode of Id.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.SqlTiming.ExecutionComplete(System.Boolean)">
            <summary>
            Called when command execution is finished to determine this SqlTiming's duration.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.SqlTiming.ReaderFetchComplete">
            <summary>
            Called when database reader is closed, ending profiling for <see cref="F:NServiceKit.MiniProfiler.Data.ExecuteType.Reader"/> SqlTimings.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.SqlTiming.AddSpacesToParameters(System.String)">
            <summary>
            To help with display, put some space around sammiched commas
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.SqlTiming.Id">
            <summary>
            Unique identifier for this SqlTiming.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.SqlTiming.ExecuteType">
            <summary>
            Category of sql statement executed.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.SqlTiming.CommandString">
            <summary>
            The sql that was executed.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.SqlTiming.FormattedCommandString">
            <summary>
            The command string with special formatting applied based on MiniProfiler.Settings.SqlFormatter
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.SqlTiming.StackTraceSnippet">
            <summary>
            Roughly where in the calling code that this sql was executed.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.SqlTiming.StartMilliseconds">
            <summary>
            Offset from main MiniProfiler start that this sql began.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.SqlTiming.DurationMilliseconds">
            <summary>
            How long this sql statement took to execute.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.SqlTiming.FirstFetchDurationMilliseconds">
            <summary>
            When executing readers, how long it took to come back initially from the database, 
            before all records are fetched and reader is closed.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.SqlTiming.Parameters">
            <summary>
            Stores any parameter names and values used by the profiled DbCommand.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.SqlTiming.ParentTimingId">
            <summary>
            Id of the Timing this statement was executed in.
            </summary>
            <remarks>
            Needed for database deserialization.
            </remarks>
        </member>
        <member name="P:NServiceKit.MiniProfiler.SqlTiming.ParentTiming">
            <summary>
            The Timing step that this sql execution occurred in.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.SqlTiming.IsDuplicate">
            <summary>
            True when other identical sql statements have been executed during this MiniProfiler session.
            </summary>
        </member>
        <member name="T:NServiceKit.MiniProfiler.SqlTimingParameter">
            <summary>
            Information about a DbParameter used in the sql statement profiled by SqlTiming.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.SqlTimingParameter.Equals(System.Object)">
            <summary>
            Returns true if this has the same parent <see cref="P:NServiceKit.MiniProfiler.SqlTiming.Id"/>, <see cref="P:NServiceKit.MiniProfiler.SqlTimingParameter.Name"/> and <see cref="P:NServiceKit.MiniProfiler.SqlTimingParameter.Value"/> as <paramref name="obj"/>.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.SqlTimingParameter.GetHashCode">
            <summary>
            Returns the XOR of certain properties.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.SqlTimingParameter.ParentSqlTimingId">
            <summary>
            Which SqlTiming this Parameter was executed with.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.SqlTimingParameter.Name">
            <summary>
            Parameter name, e.g. "@routeName"
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.SqlTimingParameter.Value">
            <summary>
            The value submitted to the database.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.SqlTimingParameter.DbType">
            <summary>
            System.Data.DbType, e.g. "String", "Bit"
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.SqlTimingParameter.Size">
            <summary>
            How large the type is, e.g. for string, size could be 4000
            </summary>
        </member>
        <member name="T:NServiceKit.MiniProfiler.Storage.DatabaseStorageBase">
            <summary>
            Understands how to save MiniProfiler results to a MSSQL database, allowing more permanent storage and
            querying of slow results.
            </summary>
        </member>
        <member name="T:NServiceKit.MiniProfiler.Storage.IStorage">
            <summary>
            Provides saving and loading <see cref="T:NServiceKit.MiniProfiler.Profiler"/>s to a storage medium.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Storage.IStorage.Save(NServiceKit.MiniProfiler.Profiler)">
            <summary>
            Stores <paramref name="profiler"/> under its <see cref="P:NServiceKit.MiniProfiler.Profiler.Id"/>.
            </summary>
            <param name="profiler">The results of a profiling session.</param>
            <remarks>
            Should also ensure the profiler is stored as being unviewed by its profiling <see cref="P:NServiceKit.MiniProfiler.Profiler.User"/>.
            </remarks>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Storage.IStorage.Load(System.Guid)">
            <summary>
            Returns a <see cref="T:NServiceKit.MiniProfiler.Profiler"/> from storage based on <paramref name="id"/>, which should map to <see cref="P:NServiceKit.MiniProfiler.Profiler.Id"/>.
            </summary>
            <remarks>
            Should also update that the resulting profiler has been marked as viewed by its profiling <see cref="P:NServiceKit.MiniProfiler.Profiler.User"/>.
            </remarks>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Storage.IStorage.GetUnviewedIds(System.String)">
            <summary>
            Returns a list of <see cref="P:NServiceKit.MiniProfiler.Profiler.Id"/>s that haven't been seen by <paramref name="user"/>.
            </summary>
            <param name="user">User identified by the current <see cref="P:NServiceKit.MiniProfiler.Profiler.Settings.UserProvider"/>.</param>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Storage.DatabaseStorageBase.#ctor(System.String)">
            <summary>
            Returns a new SqlServerDatabaseStorage object that will insert into the database identified by connectionString.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Storage.DatabaseStorageBase.Save(NServiceKit.MiniProfiler.Profiler)">
            <summary>
            Saves 'profiler' to a database under its <see cref="P:NServiceKit.MiniProfiler.Profiler.Id"/>.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Storage.DatabaseStorageBase.Load(System.Guid)">
            <summary>
            Returns the MiniProfiler identified by 'id' from the database or null when no MiniProfiler exists under that 'id'.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Storage.DatabaseStorageBase.GetUnviewedIds(System.String)">
            <summary>
            Returns a list of <see cref="P:NServiceKit.MiniProfiler.Profiler.Id"/>s that haven't been seen by <paramref name="user"/>.
            </summary>
            <param name="user">User identified by the current <see cref="P:NServiceKit.MiniProfiler.Profiler.Settings.UserProvider"/>.</param>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Storage.DatabaseStorageBase.GetConnection">
            <summary>
            Returns a DbConnection for your specific provider.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Storage.DatabaseStorageBase.GetOpenConnection">
            <summary>
            Returns a DbConnection already opened for execution.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Storage.DatabaseStorageBase.MapTimings(NServiceKit.MiniProfiler.Profiler,System.Collections.Generic.List{NServiceKit.MiniProfiler.Timing},System.Collections.Generic.List{NServiceKit.MiniProfiler.SqlTiming},System.Collections.Generic.List{NServiceKit.MiniProfiler.SqlTimingParameter})">
            <summary>
            Giving freshly selected collections, this method puts them in the correct
            hierarchy under the 'result' MiniProfiler.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Storage.DatabaseStorageBase.ConnectionString">
            <summary>
            How we connect to the database used to save/load MiniProfiler results.
            </summary>
        </member>
        <member name="T:NServiceKit.MiniProfiler.Storage.HttpRuntimeCacheStorage">
            <summary>
            Understands how to store a <see cref="T:NServiceKit.MiniProfiler.Profiler"/> to the <see cref="P:System.Web.HttpRuntime.Cache"/> with absolute expiration.
            </summary>
        </member>
        <member name="F:NServiceKit.MiniProfiler.Storage.HttpRuntimeCacheStorage.CacheKeyPrefix">
            <summary>
            The string that prefixes all keys that MiniProfilers are saved under, e.g.
            "mini-profiler-ecfb0050-7ce8-4bf1-bf82-2cb38e90e31e".
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Storage.HttpRuntimeCacheStorage.#ctor(System.TimeSpan)">
            <summary>
            Returns a new HttpRuntimeCacheStorage class that will cache MiniProfilers for the specified duration.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Storage.HttpRuntimeCacheStorage.Save(NServiceKit.MiniProfiler.Profiler)">
            <summary>
            Saves <paramref name="profiler"/> to the HttpRuntime.Cache under a key concated with <see cref="F:NServiceKit.MiniProfiler.Storage.HttpRuntimeCacheStorage.CacheKeyPrefix"/>
            and the parameter's <see cref="P:NServiceKit.MiniProfiler.Profiler.Id"/>.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Storage.HttpRuntimeCacheStorage.Load(System.Guid)">
            <summary>
            Returns the saved <see cref="T:NServiceKit.MiniProfiler.Profiler"/> identified by <paramref name="id"/>. Also marks the resulting
            profiler <see cref="P:NServiceKit.MiniProfiler.Profiler.HasUserViewed"/> to true.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Storage.HttpRuntimeCacheStorage.GetUnviewedIds(System.String)">
            <summary>
            Returns a list of <see cref="P:NServiceKit.MiniProfiler.Profiler.Id"/>s that haven't been seen by <paramref name="user"/>.
            </summary>
            <param name="user">User identified by the current <see cref="P:NServiceKit.MiniProfiler.Profiler.Settings.UserProvider"/>.</param>
        </member>
        <member name="F:NServiceKit.MiniProfiler.Storage.HttpRuntimeCacheStorage.AddPerUserUnviewedIdsLock">
            <summary>
            Syncs access to runtime cache when adding a new list of ids for a user.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Storage.HttpRuntimeCacheStorage.CacheDuration">
            <summary>
            How long to cache each <see cref="T:NServiceKit.MiniProfiler.Profiler"/> for (i.e. the absolute expiration parameter of 
            <see cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan,System.Web.Caching.CacheItemUpdateCallback)"/>)
            </summary>
        </member>
        <member name="T:NServiceKit.MiniProfiler.Timing">
            <summary>
            An individual profiling step that can contain child steps.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Timing.RebuildParentTimings">
            <summary>
            Rebuilds all the parent timings on deserialization calls
            </summary>
        </member>
        <member name="F:NServiceKit.MiniProfiler.Timing._startTicks">
            <summary>
            Offset from parent MiniProfiler's creation that this Timing was created.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Timing.#ctor(NServiceKit.MiniProfiler.Profiler,NServiceKit.MiniProfiler.Timing,System.String)">
            <summary>
            Creates a new Timing named 'name' in the 'profiler's session, with 'parent' as this Timing's immediate ancestor.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Timing.#ctor">
            <summary>
            Obsolete - used for serialization.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Timing.ToString">
            <summary>
            Returns this Timing's Name.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Timing.Equals(System.Object)">
            <summary>
            Returns true if Ids match.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Timing.GetHashCode">
            <summary>
            Returns hashcode of Id.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Timing.AddKeyValue(System.String,System.String)">
            <summary>
            Adds arbitrary string 'value' under 'key', allowing custom properties to be stored in this Timing step.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Timing.Stop">
            <summary>
            Completes this Timing's duration and sets the MiniProfiler's Head up one level.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Timing.AddChild(NServiceKit.MiniProfiler.Timing)">
            <summary>
            Add the parameter 'timing' to this Timing's Children collection.
            </summary>
            <remarks>
            Used outside this assembly for custom deserialization when creating an <see cref="T:NServiceKit.MiniProfiler.Storage.IStorage"/> implementation.
            </remarks>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Timing.AddSqlTiming(NServiceKit.MiniProfiler.SqlTiming)">
            <summary>
            Adds the parameter 'sqlTiming' to this Timing's SqlTimings collection.
            </summary>
            <param name="sqlTiming">A sql statement profiling that was executed in this Timing step.</param>
            <remarks>
            Used outside this assembly for custom deserialization when creating an <see cref="T:NServiceKit.MiniProfiler.Storage.IStorage"/> implementation.
            </remarks>
        </member>
        <member name="M:NServiceKit.MiniProfiler.Timing.GetExecutedCount(NServiceKit.MiniProfiler.Data.ExecuteType)">
            <summary>
            Returns the number of sql statements of <paramref name="type"/> that were executed in this <see cref="T:NServiceKit.MiniProfiler.Timing"/>.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Timing.Id">
            <summary>
            Unique identifer for this timing; set during construction.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Timing.Name">
            <summary>
            Text displayed when this Timing is rendered.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Timing.DurationMilliseconds">
            <summary>
            How long this Timing step took in ms; includes any <see cref="P:NServiceKit.MiniProfiler.Timing.Children"/> Timings' durations.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Timing.StartMilliseconds">
            <summary>
            The offset from the start of profiling.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Timing.Children">
            <summary>
            All sub-steps that occur within this Timing step. Add new children through <see cref="M:NServiceKit.MiniProfiler.Timing.AddChild(NServiceKit.MiniProfiler.Timing)"/>
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Timing.KeyValues">
            <summary>
            Stores arbitrary key/value strings on this Timing step. Add new tuples through <see cref="M:NServiceKit.MiniProfiler.Timing.AddKeyValue(System.String,System.String)"/>.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Timing.SqlTimings">
            <summary>
            Any queries that occurred during this Timing step.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Timing.ParentTimingId">
            <summary>
            Needed for database deserialization and JSON serialization.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Timing.ParentTiming">
            <summary>
            Which Timing this Timing is under - the duration that this step takes will be added to its parent's duration.
            </summary>
            <remarks>This will be null for the root (initial) Timing.</remarks>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Timing.DurationWithoutChildrenMilliseconds">
            <summary>
            Gets the elapsed milliseconds in this step without any children's durations.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Timing.SqlTimingsDurationMilliseconds">
            <summary>
            Gets the aggregate elapsed milliseconds of all SqlTimings executed in this Timing, excluding Children Timings.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Timing.IsTrivial">
            <summary>
            Returns true when this <see cref="P:NServiceKit.MiniProfiler.Timing.DurationWithoutChildrenMilliseconds"/> is less than the configured
            <see cref="P:NServiceKit.MiniProfiler.Profiler.Settings.TrivialDurationThresholdMilliseconds"/>, by default 2.0 ms.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Timing.Profiler">
            <summary>
            Reference to the containing profiler, allowing this Timing to affect the Head and get Stopwatch readings.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Timing.HasChildren">
            <summary>
            Returns true when this Timing has inner Timing steps.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Timing.HasSqlTimings">
            <summary>
            Returns true if this Timing step collected sql execution timings.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Timing.HasDuplicateSqlTimings">
            <summary>
            Returns true if any <see cref="T:NServiceKit.MiniProfiler.SqlTiming"/>s executed in this step are detected as duplicate statements.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Timing.IsRoot">
            <summary>
            Returns true when this Timing is the first one created in a MiniProfiler session.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Timing.Depth">
            <summary>
            How far away this Timing is from the Profiler's Root.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Timing.ExecutedReaders">
            <summary>
            How many sql data readers were executed in this Timing step. Does not include queries in any child Timings.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Timing.ExecutedScalars">
            <summary>
            How many sql scalar queries were executed in this Timing step. Does not include queries in any child Timings.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.Timing.ExecutedNonQueries">
            <summary>
            How many sql non-query statements were executed in this Timing step. Does not include queries in any child Timings.
            </summary>
        </member>
        <member name="T:NServiceKit.MiniProfiler.UI.MiniProfilerHandler">
            <summary>
            Understands how to route and respond to MiniProfiler UI urls.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.UI.MiniProfilerHandler.MatchesRequest(NServiceKit.ServiceHost.IHttpRequest)">
             <summary>Matches request.</summary>
            
             <param name="request">The request.</param>
            
             <returns>An IHttpHandler.</returns>
        </member>
        <member name="M:NServiceKit.MiniProfiler.UI.MiniProfilerHandler.RenderIncludes(NServiceKit.MiniProfiler.Profiler,System.Nullable{NServiceKit.MiniProfiler.RenderPosition},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Boolean},System.String)">
             <summary>Renders the includes.</summary>
            
             <param name="profiler">            The profiler.</param>
             <param name="position">            The position.</param>
             <param name="showTrivial">         The show trivial.</param>
             <param name="showTimeWithChildren">The show time with children.</param>
             <param name="maxTracesToShow">     The maximum traces to show.</param>
             <param name="xhtml">               true to xhtml.</param>
             <param name="showControls">        The show controls.</param>
             <param name="path">                Full pathname of the file.</param>
            
             <returns>A HtmlString.</returns>
        </member>
        <member name="M:NServiceKit.MiniProfiler.UI.MiniProfilerHandler.GetFileNameWithoutExtension(System.String)">
             <summary>Gets file name without extension.</summary>
            
             <param name="pathInfo">Information describing the path.</param>
            
             <returns>The file name without extension.</returns>
        </member>
        <member name="M:NServiceKit.MiniProfiler.UI.MiniProfilerHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Returns either includes' css/javascript or results' html.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.UI.MiniProfilerHandler.ProcessRequest(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse,System.String)">
             <summary>Returns either includes' css/javascript or results' html.</summary>
            
             <param name="httpReq">      The HTTP request.</param>
             <param name="httpRes">      The HTTP resource.</param>
             <param name="operationName">Name of the operation.</param>
        </member>
        <member name="M:NServiceKit.MiniProfiler.UI.MiniProfilerHandler.Includes(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse,System.String)">
            <summary>
            Handles rendering static content files.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.UI.MiniProfilerHandler.Results(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse)">
            <summary>
            Handles rendering a previous MiniProfiler session, identified by its "?id=GUID" on the query.
            </summary>
        </member>
        <member name="F:NServiceKit.MiniProfiler.UI.MiniProfilerHandler._ResourceCache">
            <summary>
            Embedded resource contents keyed by filename.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.UI.MiniProfilerHandler.NotFound(NServiceKit.ServiceHost.IHttpResponse,System.String,System.String)">
            <summary>
            Helper method that sets a proper 404 response code.
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.UI.MiniProfilerHandler.IsReusable">
            <summary>
            Try to keep everything static so we can easily be reused.
            </summary>
        </member>
        <member name="T:NServiceKit.MiniProfiler.WebRequestProfilerProvider">
            <summary>
            HttpContext based profiler provider.  This is the default provider to use in a web context.
            The current profiler is associated with a HttpContext.Current ensuring that profilers are 
            specific to a individual HttpRequest.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.WebRequestProfilerProvider.#ctor">
            <summary>
            Public constructor.  This also registers any UI routes needed to display results
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.WebRequestProfilerProvider.Start(NServiceKit.MiniProfiler.ProfileLevel)">
            <summary>
            Starts a new MiniProfiler and associates it with the current <see cref="P:System.Web.HttpContext.Current"/>.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.WebRequestProfilerProvider.Stop(System.Boolean)">
            <summary>
            Ends the current profiling session, if one exists.
            </summary>
            <param name="discardResults">
            When true, clears the <see cref="P:NServiceKit.MiniProfiler.Profiler.Current"/> for this HttpContext, allowing profiling to 
            be prematurely stopped and discarded. Useful for when a specific route does not need to be profiled.
            </param>
        </member>
        <member name="M:NServiceKit.MiniProfiler.WebRequestProfilerProvider.EnsureName(NServiceKit.MiniProfiler.Profiler,System.Web.HttpRequest)">
            <summary>
            Makes sure 'profiler' has a Name, pulling it from route data or url.
            </summary>
        </member>
        <member name="M:NServiceKit.MiniProfiler.WebRequestProfilerProvider.GetCurrentProfiler">
            <summary>
            Returns the current profiler
            </summary>
            <returns></returns>
        </member>
        <member name="P:NServiceKit.MiniProfiler.WebRequestProfilerProvider.Current">
            <summary>
            Gets the currently running MiniProfiler for the current HttpContext; null if no MiniProfiler was <see cref="M:NServiceKit.MiniProfiler.WebRequestProfilerProvider.Start(NServiceKit.MiniProfiler.ProfileLevel)"/>ed.
            </summary>
        </member>
        <member name="T:NServiceKit.MiniProfiler.WebRequestProfilerProvider.Settings">
            <summary>
            WebRequestProfilerProvider specific configurations
            </summary>
        </member>
        <member name="P:NServiceKit.MiniProfiler.WebRequestProfilerProvider.Settings.UserProvider">
            <summary>
            Provides user identification for a given profiling request.
            </summary>
        </member>
        <member name="T:NServiceKit.ServiceHost.ContainerResolveCache">
            <summary>A container resolve cache.</summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.ContainerResolveCache.#ctor(Funq.Container)">
             <summary>Initializes a new instance of the NServiceKit.ServiceHost.ContainerResolveCache class.</summary>
            
             <param name="container">The container.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.ContainerResolveCache.CreateInstance(System.Type)">
            <summary>
            Creates instance using straight Resolve approach.
            This will throw an exception if resolution fails
            </summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.ContainerResolveCache.CreateInstance(System.Type,System.Boolean)">
            <summary>
            Creates instance using the TryResolve approach if tryResolve = true.
            Otherwise uses Resolve approach, which will throw an exception if resolution fails
            </summary>
        </member>
        <member name="T:NServiceKit.ServiceHost.Cookies">
            <summary>A cookies.</summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.Cookies.#ctor(NServiceKit.ServiceHost.IHttpResponse)">
             <summary>Initializes a new instance of the NServiceKit.ServiceHost.Cookies class.</summary>
            
             <param name="httpRes">The HTTP resource.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.Cookies.AddPermanentCookie(System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Sets a persistent cookie which never expires
            </summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.Cookies.AddSessionCookie(System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Sets a session cookie which expires after the browser session closes
            </summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.Cookies.DeleteCookie(System.String)">
            <summary>
            Deletes a specified cookie by setting its value to empty and expiration to -1 days
            </summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.Cookies.ToHttpCookie(System.Net.Cookie)">
             <summary>Converts a cookie to a HTTP cookie.</summary>
            
             <param name="cookie">The cookie.</param>
            
             <returns>cookie as a HttpCookie.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.Cookies.GetHeaderValue(System.Net.Cookie)">
             <summary>Gets header value.</summary>
            
             <param name="cookie">The cookie.</param>
            
             <returns>The header value.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.Cookies.AddCookie(System.Net.Cookie)">
            <summary>
            Sets a persistent cookie which expires after the given time
            </summary>
        </member>
        <member name="T:NServiceKit.ServiceHost.DefaultRequestAttribute">
            <summary>
            Lets you Register new Services and the optional restPaths will be registered against 
            this default Request Type
            </summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.DefaultRequestAttribute.#ctor(System.Type)">
             <summary>Initializes a new instance of the NServiceKit.ServiceHost.DefaultRequestAttribute class.</summary>
            
             <param name="requestType">Type of the request.</param>
        </member>
        <member name="P:NServiceKit.ServiceHost.DefaultRequestAttribute.RequestType">
             <summary>Gets or sets the type of the request.</summary>
            
             <value>The type of the request.</value>
        </member>
        <member name="T:NServiceKit.ServiceHost.DtoUtils">
            <summary>A dto utilities.</summary>
        </member>
        <member name="F:NServiceKit.ServiceHost.DtoUtils.ResponseStatusPropertyName">
            <summary>
            Naming convention for the ResponseStatus property name on the response DTO
            </summary>
        </member>
        <member name="F:NServiceKit.ServiceHost.DtoUtils.UrnServiceErrorType">
            <summary>
            Service error logs are kept in 'urn:ServiceErrors:{ServiceName}'
            </summary>
        </member>
        <member name="F:NServiceKit.ServiceHost.DtoUtils.CombinedServiceLogId">
            <summary>
            Combined service error logs are maintained in 'urn:ServiceErrors:All'
            </summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.DtoUtils.ToResponseStatus(System.Exception)">
             <summary>A ValidationErrorResult extension method that converts a validationResult to a response status.</summary>
            
             <param name="exception">The exception to act on.</param>
            
             <returns>validationResult as the ResponseStatus.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.DtoUtils.ToResponseStatus(NServiceKit.Validation.ValidationError)">
             <summary>A ValidationErrorResult extension method that converts a validationResult to a response status.</summary>
            
             <param name="validationException">The validationException to act on.</param>
            
             <returns>validationResult as the ResponseStatus.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.DtoUtils.ToResponseStatus(NServiceKit.Validation.ValidationErrorResult)">
             <summary>A ValidationErrorResult extension method that converts a validationResult to a response status.</summary>
            
             <param name="validationResult">The validationResult to act on.</param>
            
             <returns>validationResult as the ResponseStatus.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.DtoUtils.CreateSuccessResponse(System.String)">
             <summary>Creates success response.</summary>
            
             <param name="message">The message.</param>
            
             <returns>The new success response.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.DtoUtils.CreateResponseStatus(System.String)">
             <summary>Creates response status.</summary>
            
             <param name="errorCode">The error code.</param>
            
             <returns>The new response status.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.DtoUtils.CreateResponseStatus(System.String,System.String)">
             <summary>Creates response status.</summary>
            
             <param name="errorCode">   The error code.</param>
             <param name="errorMessage">Message describing the error.</param>
            
             <returns>The new response status.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.DtoUtils.CreateErrorResponse(System.String,System.String,System.Collections.Generic.IEnumerable{NServiceKit.Validation.ValidationErrorField})">
             <summary>Creates error response.</summary>
            
             <param name="errorCode">       The error code.</param>
             <param name="errorMessage">    Message describing the error.</param>
             <param name="validationErrors">The validation errors.</param>
            
             <returns>The new error response.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.DtoUtils.CreateErrorResponse(System.Object,NServiceKit.Validation.ValidationErrorResult)">
             <summary>Creates error response.</summary>
            
             <param name="request">        .</param>
             <param name="validationError">The validation error.</param>
            
             <returns>The new error response.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.DtoUtils.CreateErrorResponse(System.Object,System.Exception,NServiceKit.ServiceInterface.ServiceModel.ResponseStatus)">
             <summary>Creates error response.</summary>
            
             <param name="request">       .</param>
             <param name="ex">            .</param>
             <param name="responseStatus">.</param>
            
             <returns>The new error response.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.DtoUtils.CreateResponseDto(System.Object,NServiceKit.ServiceInterface.ServiceModel.ResponseStatus)">
            <summary>
            Create an instance of the service response dto type and inject it with the supplied responseStatus
            </summary>
            <param name="request"></param>
            <param name="responseStatus"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.DtoUtils.HandleException(NServiceKit.ServiceHost.IResolver,System.Object,System.Exception)">
            <summary>
            
            </summary>
            <param name="iocResolver"></param>
            <param name="request"></param>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.DtoUtils.LogErrorInRedisIfExists(NServiceKit.Redis.IRedisClientsManager,System.String,NServiceKit.ServiceInterface.ServiceModel.ResponseStatus)">
             <summary>Logs error in redis if exists.</summary>
            
             <param name="redisManager">  Manager for redis.</param>
             <param name="operationName"> Name of the operation.</param>
             <param name="responseStatus">.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.DtoUtils.GetRequestErrorBody(System.Object)">
            <summary>
            Override to provide additional/less context about the Service Exception. 
            By default the request is serialized and appended to the ResponseStatus StackTrace.
            </summary>
        </member>
        <member name="T:NServiceKit.ServiceHost.IRequiresSoapMessage">
            <summary>Interface for requires SOAP message.</summary>
        </member>
        <member name="P:NServiceKit.ServiceHost.IRequiresSoapMessage.Message">
             <summary>Gets or sets the message.</summary>
            
             <value>The message.</value>
        </member>
        <member name="T:NServiceKit.ServiceHost.MetadataPagesConfig">
            <summary>A metadata pages configuration.</summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.MetadataPagesConfig.#ctor(NServiceKit.ServiceHost.ServiceMetadata,NServiceKit.WebHost.Endpoints.ServiceEndpointsMetadataConfig,System.Collections.Generic.HashSet{System.String},System.Collections.Generic.List{System.String})">
             <summary>Initializes a new instance of the NServiceKit.ServiceHost.MetadataPagesConfig class.</summary>
            
             <param name="metadata">          The metadata.</param>
             <param name="metadataConfig">    The metadata configuration.</param>
             <param name="ignoredFormats">    The ignored formats.</param>
             <param name="contentTypeFormats">The content type formats.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.MetadataPagesConfig.GetMetadataConfig(System.String)">
             <summary>Gets metadata configuration.</summary>
            
             <param name="format">Describes the format to use.</param>
            
             <returns>The metadata configuration.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.MetadataPagesConfig.IsVisible(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.Format,System.String)">
             <summary>Query if 'httpRequest' is visible.</summary>
            
             <param name="httpRequest">The HTTP request.</param>
             <param name="format">     Describes the format to use.</param>
             <param name="operation">  The operation.</param>
            
             <returns>true if visible, false if not.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.MetadataPagesConfig.CanAccess(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.Format,System.String)">
             <summary>Determine if we can access.</summary>
            
             <param name="httpRequest">The HTTP request.</param>
             <param name="format">     Describes the format to use.</param>
             <param name="operation">  The operation.</param>
            
             <returns>true if we can access, false if not.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.MetadataPagesConfig.CanAccess(NServiceKit.ServiceHost.Format,System.String)">
             <summary>Determine if we can access.</summary>
            
             <param name="format">   Describes the format to use.</param>
             <param name="operation">The operation.</param>
            
             <returns>true if we can access, false if not.</returns>
        </member>
        <member name="P:NServiceKit.ServiceHost.MetadataPagesConfig.AvailableFormatConfigs">
             <summary>Gets the available format configs.</summary>
            
             <value>The available format configs.</value>
        </member>
        <member name="T:NServiceKit.ServiceHost.MqRequest">
            <summary>A mq request.</summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.MqRequest.#ctor(NServiceKit.ServiceHost.MqRequestContext)">
             <summary>Initializes a new instance of the NServiceKit.ServiceHost.MqRequest class.</summary>
            
             <param name="requestContext">Context for the request.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.MqRequest.TryResolve``1">
             <summary>Try resolve.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
            
             <returns>A T.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.MqRequest.GetRawBody">
             <summary>The entire string contents of Request.InputStream.</summary>
            
             <returns>The raw body.</returns>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqRequest.OriginalRequest">
             <summary>The underlying ASP.NET or HttpListener HttpRequest.</summary>
            
             <value>The original request.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqRequest.OperationName">
             <summary>The name of the service being called (e.g. Request DTO Name)</summary>
            
             <value>The name of the operation.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqRequest.ContentType">
             <summary>The request ContentType.</summary>
            
             <value>The type of the content.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqRequest.HttpMethod">
             <summary>Gets the HTTP method.</summary>
            
             <value>The HTTP method.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqRequest.UserAgent">
             <summary>Gets the user agent.</summary>
            
             <value>The user agent.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqRequest.IsLocal">
             <summary>Gets a value indicating whether this object is local.</summary>
            
             <value>true if this object is local, false if not.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqRequest.Cookies">
             <summary>Gets the cookies.</summary>
            
             <value>The cookies.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqRequest.ResponseContentType">
             <summary>The expected Response ContentType for this request.</summary>
            
             <value>The type of the response content.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqRequest.Items">
             <summary>Attach any data to this request that all filters and services can access.</summary>
            
             <value>The items.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqRequest.Headers">
             <summary>Gets the headers.</summary>
            
             <value>The headers.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqRequest.QueryString">
             <summary>Gets the query string.</summary>
            
             <value>The query string.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqRequest.FormData">
             <summary>Gets information describing the form.</summary>
            
             <value>Information describing the form.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqRequest.UseBufferedStream">
             <summary>Buffer the Request InputStream so it can be re-read.</summary>
            
             <value>true if use buffered stream, false if not.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqRequest.RawUrl">
             <summary>Gets URL of the raw.</summary>
            
             <value>The raw URL.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqRequest.AbsoluteUri">
             <summary>Gets URI of the absolute.</summary>
            
             <value>The absolute URI.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqRequest.UserHostAddress">
             <summary>The Remote Ip as reported by Request.UserHostAddress.</summary>
            
             <value>The user host address.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqRequest.RemoteIp">
             <summary>The Remote Ip as reported by X-Forwarded-For, X-Real-IP or Request.UserHostAddress.</summary>
            
             <value>The remote IP.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqRequest.XForwardedFor">
             <summary>The value of the X-Forwarded-For header, null if null or empty.</summary>
            
             <value>The x coordinate forwarded for.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqRequest.XRealIp">
             <summary>The value of the X-Real-IP header, null if null or empty.</summary>
            
             <value>The x coordinate real IP.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqRequest.IsSecureConnection">
             <summary>e.g. is https or not.</summary>
            
             <value>true if this object is secure connection, false if not.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqRequest.AcceptTypes">
             <summary>Gets a list of types of the accepts.</summary>
            
             <value>A list of types of the accepts.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqRequest.PathInfo">
             <summary>Gets information describing the path.</summary>
            
             <value>Information describing the path.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqRequest.InputStream">
             <summary>Gets the input stream.</summary>
            
             <value>The input stream.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqRequest.ContentLength">
             <summary>Gets the length of the content.</summary>
            
             <value>The length of the content.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqRequest.Files">
             <summary>Access to the multi-part/formdata files posted on this request.</summary>
            
             <value>The files.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqRequest.ApplicationFilePath">
             <summary>Gets the full pathname of the application file.</summary>
            
             <value>The full pathname of the application file.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqRequest.UrlReferrer">
             <summary>The value of the Referrer, null if not available.</summary>
            
             <value>The URL referrer.</value>
        </member>
        <member name="T:NServiceKit.ServiceHost.MqResponse">
            <summary>A mq response.</summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.MqResponse.#ctor(NServiceKit.ServiceHost.MqRequestContext)">
             <summary>Initializes a new instance of the NServiceKit.ServiceHost.MqResponse class.</summary>
            
             <param name="requestContext">Context for the request.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.MqResponse.AddHeader(System.String,System.String)">
             <summary>Adds a header to 'value'.</summary>
            
             <param name="name"> The name.</param>
             <param name="value">The value.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.MqResponse.Redirect(System.String)">
             <summary>Redirects the given document.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <param name="url">URL of the document.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.MqResponse.Write(System.String)">
             <summary>Writes.</summary>
            
             <param name="text">The text to write.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.MqResponse.Close">
            <summary>
            Signal that this response has been handled and no more processing should be done. When used in a request or response filter, no more filters or processing is done on this request.
            </summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.MqResponse.End">
            <summary>Calls Response.End() on ASP.NET HttpResponse otherwise is an alias for Close(). Useful when you want to prevent ASP.NET to provide it's own custom error page.</summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.MqResponse.Flush">
            <summary>Response.Flush() and OutputStream.Flush() seem to have different behaviour in ASP.NET.</summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.MqResponse.SetContentLength(System.Int64)">
             <summary>Sets content length.</summary>
            
             <param name="contentLength">Length of the content.</param>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqResponse.OriginalResponse">
             <summary>The underlying ASP.NET or HttpListener HttpResponse.</summary>
            
             <value>The original response.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqResponse.StatusCode">
             <summary>Gets or sets the status code.</summary>
            
             <value>The status code.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqResponse.StatusDescription">
             <summary>Gets or sets information describing the status.</summary>
            
             <value>Information describing the status.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqResponse.ContentType">
             <summary>Gets or sets the type of the content.</summary>
            
             <value>The type of the content.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqResponse.Cookies">
             <summary>Gets the cookies.</summary>
            
             <value>The cookies.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqResponse.OutputStream">
             <summary>Gets the output stream.</summary>
            
             <value>The output stream.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqResponse.IsClosed">
             <summary>Gets or sets a value indicating whether this instance is closed.</summary>
            
             <value>true if this object is closed, false if not.</value>
        </member>
        <member name="T:NServiceKit.ServiceHost.MqRequestContext">
            <summary>A mq request context.</summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.MqRequestContext.#ctor">
            <summary>Initializes a new instance of the NServiceKit.ServiceHost.MqRequestContext class.</summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.MqRequestContext.#ctor(NServiceKit.ServiceHost.IResolver,NServiceKit.Messaging.IMessage)">
             <summary>Initializes a new instance of the NServiceKit.ServiceHost.MqRequestContext class.</summary>
            
             <param name="resolver">The resolver.</param>
             <param name="message"> The message.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.MqRequestContext.Get``1">
             <summary>Gets the get.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
            
             <returns>A T.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.MqRequestContext.GetHeader(System.String)">
             <summary>Gets a header.</summary>
            
             <param name="headerName">Name of the header.</param>
            
             <returns>The header.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.MqRequestContext.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqRequestContext.Resolver">
             <summary>Gets or sets the resolver.</summary>
            
             <value>The resolver.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqRequestContext.Message">
             <summary>Gets or sets the message.</summary>
            
             <value>The message.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqRequestContext.Request">
             <summary>Gets or sets the request.</summary>
            
             <value>The request.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqRequestContext.Response">
             <summary>Gets or sets the response.</summary>
            
             <value>The response.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqRequestContext.OperationName">
             <summary>Gets or sets the name of the operation.</summary>
            
             <value>The name of the operation.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqRequestContext.IpAddress">
             <summary>Gets or sets the IP address.</summary>
            
             <value>The IP address.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqRequestContext.Headers">
             <summary>Gets the headers.</summary>
            
             <value>The headers.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqRequestContext.Cookies">
             <summary>Gets the cookies.</summary>
            
             <value>The cookies.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqRequestContext.EndpointAttributes">
             <summary>Gets the endpoint attributes.</summary>
            
             <value>The endpoint attributes.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqRequestContext.RequestAttributes">
             <summary>Gets or sets the request attributes.</summary>
            
             <value>The request attributes.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqRequestContext.ContentType">
             <summary>Gets or sets the type of the content.</summary>
            
             <value>The type of the content.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqRequestContext.ResponseContentType">
             <summary>Gets or sets the type of the response content.</summary>
            
             <value>The type of the response content.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqRequestContext.CompressionType">
             <summary>Gets or sets the type of the compression.</summary>
            
             <value>The type of the compression.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqRequestContext.AbsoluteUri">
             <summary>Gets or sets URI of the absolute.</summary>
            
             <value>The absolute URI.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqRequestContext.PathInfo">
             <summary>Gets or sets information describing the path.</summary>
            
             <value>Information describing the path.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.MqRequestContext.Files">
             <summary>Gets or sets the files.</summary>
            
             <value>The files.</value>
        </member>
        <member name="T:NServiceKit.ServiceHost.MqExtensions">
            <summary>A mq extensions.</summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.MqExtensions.ToHeaders(NServiceKit.Messaging.IMessage)">
             <summary>An IMessage extension method that converts a message to the headers.</summary>
            
             <param name="message">The message to act on.</param>
            
             <returns>message as a Dictionary&lt;string,string&gt;</returns>
        </member>
        <member name="T:NServiceKit.ServiceHost.INServiceExec">
            <summary>Interface for in service execute.</summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.INServiceExec.Execute(NServiceKit.ServiceHost.IRequestContext,System.Object,System.Object)">
             <summary>Executes.</summary>
            
             <param name="requestContext">Context for the request.</param>
             <param name="instance">      The instance.</param>
             <param name="request">       The request.</param>
            
             <returns>An object.</returns>
        </member>
        <member name="T:NServiceKit.ServiceHost.NServiceRequestExec`2">
            <summary>A service request execute.</summary>
            <typeparam name="TService">Type of the service.</typeparam>
            <typeparam name="TRequest">Type of the request.</typeparam>
        </member>
        <member name="M:NServiceKit.ServiceHost.NServiceRequestExec`2.Execute(NServiceKit.ServiceHost.IRequestContext,System.Object,System.Object)">
             <summary>Executes.</summary>
            
             <param name="requestContext">Context for the request.</param>
             <param name="instance">      The instance.</param>
             <param name="request">       The request.</param>
            
             <returns>An object.</returns>
        </member>
        <member name="T:NServiceKit.ServiceHost.NServiceExecExtensions">
            <summary>A service execute extensions.</summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.NServiceExecExtensions.GetActions(System.Type)">
             <summary>Gets the actions in this collection.</summary>
            
             <param name="serviceType">The serviceType to act on.</param>
            
             <returns>An enumerator that allows foreach to be used to process the actions in this collection.</returns>
        </member>
        <member name="T:NServiceKit.ServiceHost.NServiceExec`1">
            <summary>A service execute.</summary>
            <typeparam name="TService">Type of the service.</typeparam>
        </member>
        <member name="M:NServiceKit.ServiceHost.NServiceExec`1.CreateExecFn(System.Type,System.Reflection.MethodInfo)">
             <summary>Creates execute function.</summary>
            
             <param name="requestType">Type of the request.</param>
             <param name="mi">         The mi.</param>
            
             <returns>The new execute function.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.NServiceExec`1.GetActionsFor``1">
             <summary>Gets actions for.</summary>
            
             <typeparam name="TRequest">Type of the request.</typeparam>
            
             <returns>The actions for.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.NServiceExec`1.CreateServiceRunnersFor``1">
             <summary>Creates service runners for.</summary>
            
             <typeparam name="TRequest">Type of the request.</typeparam>
        </member>
        <member name="M:NServiceKit.ServiceHost.NServiceExec`1.Execute(NServiceKit.ServiceHost.IRequestContext,System.Object,System.Object,System.String)">
             <summary>Executes.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <param name="requestContext">Context for the request.</param>
             <param name="instance">      The instance.</param>
             <param name="request">       The request.</param>
             <param name="requestName">   Name of the request.</param>
            
             <returns>An object.</returns>
        </member>
        <member name="T:NServiceKit.ServiceHost.RouteNamingConventionDelegate">
             <summary>Route naming convention delegate.</summary>
            
             <param name="routes">      The routes.</param>
             <param name="requestType"> Type of the request.</param>
             <param name="allowedVerbs">The allowed verbs.</param>
        </member>
        <member name="T:NServiceKit.ServiceHost.RouteNamingConvention">
            <summary>A route naming convention.</summary>
        </member>
        <member name="F:NServiceKit.ServiceHost.RouteNamingConvention.AttributeNamesToMatch">
            <summary>A match specifying the attribute names to.</summary>
        </member>
        <member name="F:NServiceKit.ServiceHost.RouteNamingConvention.PropertyNamesToMatch">
            <summary>A match specifying the property names to.</summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.RouteNamingConvention.WithRequestDtoName(NServiceKit.ServiceHost.IServiceRoutes,System.Type,System.String)">
             <summary>With request dto name.</summary>
            
             <param name="routes">      The routes.</param>
             <param name="requestType"> Type of the request.</param>
             <param name="allowedVerbs">The allowed verbs.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.RouteNamingConvention.WithMatchingAttributes(NServiceKit.ServiceHost.IServiceRoutes,System.Type,System.String)">
             <summary>With matching attributes.</summary>
            
             <param name="routes">      The routes.</param>
             <param name="requestType"> Type of the request.</param>
             <param name="allowedVerbs">The allowed verbs.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.RouteNamingConvention.WithMatchingPropertyNames(NServiceKit.ServiceHost.IServiceRoutes,System.Type,System.String)">
             <summary>With matching property names.</summary>
            
             <param name="routes">      The routes.</param>
             <param name="requestType"> Type of the request.</param>
             <param name="allowedVerbs">The allowed verbs.</param>
        </member>
        <member name="T:NServiceKit.ServiceHost.ServiceRunner`1">
            <summary>A service runner.</summary>
            <typeparam name="TRequest">Type of the request.</typeparam>
        </member>
        <member name="F:NServiceKit.ServiceHost.ServiceRunner`1.Log">
            <summary>The log.</summary>
        </member>
        <member name="F:NServiceKit.ServiceHost.ServiceRunner`1.AppHost">
            <summary>The application host.</summary>
        </member>
        <member name="F:NServiceKit.ServiceHost.ServiceRunner`1.ServiceAction">
            <summary>The service action.</summary>
        </member>
        <member name="F:NServiceKit.ServiceHost.ServiceRunner`1.RequestFilters">
            <summary>The request filters.</summary>
        </member>
        <member name="F:NServiceKit.ServiceHost.ServiceRunner`1.ResponseFilters">
            <summary>The response filters.</summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceRunner`1.#ctor">
            <summary>Initializes a new instance of the NServiceKit.ServiceHost.ServiceRunner&lt;TRequest&gt; class.</summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceRunner`1.#ctor(NServiceKit.WebHost.Endpoints.IAppHost,NServiceKit.WebHost.Endpoints.ActionContext)">
             <summary>Initializes a new instance of the NServiceKit.ServiceHost.ServiceRunner&lt;TRequest&gt; class.</summary>
            
             <param name="appHost">      The application host.</param>
             <param name="actionContext">Context for the action.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceRunner`1.GetAppHost">
             <summary>Gets application host.</summary>
            
             <returns>The application host.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceRunner`1.TryResolve``1">
             <summary>Try resolve.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
            
             <returns>A T.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceRunner`1.ResolveService``1(NServiceKit.ServiceHost.IRequestContext)">
             <summary>Resolve service.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="requestContext">Context for the request.</param>
            
             <returns>A T.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceRunner`1.BeforeEachRequest(NServiceKit.ServiceHost.IRequestContext,`0)">
             <summary>Before each request.</summary>
            
             <param name="requestContext">Context for the request.</param>
             <param name="request">       The request.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceRunner`1.AfterEachRequest(NServiceKit.ServiceHost.IRequestContext,`0,System.Object)">
             <summary>After each request.</summary>
            
             <param name="requestContext">Context for the request.</param>
             <param name="request">       The request.</param>
             <param name="response">      The response.</param>
            
             <returns>An object.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceRunner`1.OnBeforeExecute(NServiceKit.ServiceHost.IRequestContext,`0)">
             <summary>Executes the before execute action.</summary>
            
             <param name="requestContext">Context for the request.</param>
             <param name="request">       The request.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceRunner`1.OnAfterExecute(NServiceKit.ServiceHost.IRequestContext,System.Object)">
             <summary>Executes the after execute action.</summary>
            
             <param name="requestContext">Context for the request.</param>
             <param name="response">      The response.</param>
            
             <returns>An object.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceRunner`1.Execute(NServiceKit.ServiceHost.IRequestContext,System.Object,`0)">
             <summary>Executes.</summary>
            
             <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            
             <param name="requestContext">Context for the request.</param>
             <param name="instance">      The instance.</param>
             <param name="request">       The request.</param>
            
             <returns>An object.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceRunner`1.Execute(NServiceKit.ServiceHost.IRequestContext,System.Object,NServiceKit.Messaging.IMessage{`0})">
             <summary>Executes.</summary>
            
             <param name="requestContext">Context for the request.</param>
             <param name="instance">      The instance.</param>
             <param name="request">       The request.</param>
            
             <returns>An object.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceRunner`1.HandleException(NServiceKit.ServiceHost.IRequestContext,`0,System.Exception)">
             <summary>Handles the exception.</summary>
            
             <param name="requestContext">Context for the request.</param>
             <param name="request">       The request.</param>
             <param name="ex">            The ex.</param>
            
             <returns>An object.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceRunner`1.ExecuteOneWay(NServiceKit.ServiceHost.IRequestContext,System.Object,`0)">
             <summary>Executes the one way operation.</summary>
            
             <param name="requestContext">Context for the request.</param>
             <param name="instance">      The instance.</param>
             <param name="request">       The request.</param>
            
             <returns>An object.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceRunner`1.Process(NServiceKit.ServiceHost.IRequestContext,System.Object,System.Object)">
             <summary>signature matches ServiceExecFn.</summary>
            
             <param name="requestContext">Context for the request.</param>
             <param name="instance">      The instance.</param>
             <param name="request">       The request.</param>
            
             <returns>An object.</returns>
        </member>
        <member name="T:NServiceKit.NServiceKitHttpHandler">
            <summary>A service kit HTTP handler.</summary>
        </member>
        <member name="M:NServiceKit.NServiceKitHttpHandler.#ctor(NServiceKit.WebHost.Endpoints.Support.INServiceKitHttpHandler)">
             <summary>Initializes a new instance of the NServiceKit.NServiceKitHttpHandler class.</summary>
            
             <param name="NServiceKitHandler">The service kit handler.</param>
        </member>
        <member name="M:NServiceKit.NServiceKitHttpHandler.ProcessRequest(System.Web.HttpContext)">
             <summary>Enables processing of HTTP Web requests by a custom HttpHandler that implements the <see cref="T:System.Web.IHttpHandler" /> interface.</summary>
            
             <param name="context">An <see cref="T:System.Web.HttpContext" /> object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) used to
             service HTTP requests.
             </param>
        </member>
        <member name="M:NServiceKit.NServiceKitHttpHandler.ProcessRequest(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse,System.String)">
             <summary>Process the request.</summary>
            
             <param name="httpReq">      The HTTP request.</param>
             <param name="httpRes">      The HTTP resource.</param>
             <param name="operationName">Name of the operation.</param>
        </member>
        <member name="P:NServiceKit.NServiceKitHttpHandler.IsReusable">
             <summary>Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler" /> instance.</summary>
            
             <value>true if the <see cref="T:System.Web.IHttpHandler" /> instance is reusable; otherwise, false.</value>
        </member>
        <member name="T:NServiceKit.VirtualPath.AbstractVirtualDirectoryBase">
            <summary>
            Abstract base class for virtual directories.
            </summary>
        </member>
        <member name="F:NServiceKit.VirtualPath.AbstractVirtualDirectoryBase.VirtualPathProvider">
            <summary>The virtual path provider.</summary>
        </member>
        <member name="M:NServiceKit.VirtualPath.AbstractVirtualDirectoryBase.#ctor(NServiceKit.IO.IVirtualPathProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NServiceKit.VirtualPath.AbstractVirtualDirectoryBase"/> class.
            </summary>
            <param name="owningProvider">The owning provider.</param>
        </member>
        <member name="M:NServiceKit.VirtualPath.AbstractVirtualDirectoryBase.#ctor(NServiceKit.IO.IVirtualPathProvider,NServiceKit.IO.IVirtualDirectory)">
            <summary>
            Initializes a new instance of the <see cref="T:NServiceKit.VirtualPath.AbstractVirtualDirectoryBase"/> class.
            </summary>
            <param name="owningProvider">The owning provider.</param>
            <param name="parentDirectory">The parent directory.</param>
            <exception cref="T:System.ArgumentNullException">owningProvider</exception>
        </member>
        <member name="M:NServiceKit.VirtualPath.AbstractVirtualDirectoryBase.GetFile(System.String)">
            <summary>
            Gets the file.
            </summary>
            <param name="virtualPath">The virtual path.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.VirtualPath.AbstractVirtualDirectoryBase.GetDirectory(System.String)">
            <summary>
            Gets the directory.
            </summary>
            <param name="virtualPath">The virtual path.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.VirtualPath.AbstractVirtualDirectoryBase.GetFile(System.Collections.Generic.Stack{System.String})">
            <summary>
            Gets the file.
            </summary>
            <param name="virtualPath">The virtual path.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.VirtualPath.AbstractVirtualDirectoryBase.GetDirectory(System.Collections.Generic.Stack{System.String})">
            <summary>
            Gets the directory.
            </summary>
            <param name="virtualPath">The virtual path.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.VirtualPath.AbstractVirtualDirectoryBase.GetAllMatchingFiles(System.String,System.Int32)">
            <summary>
            Gets all matching files.
            </summary>
            <param name="globPattern">The glob pattern.</param>
            <param name="maxDepth">The maximum depth.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.VirtualPath.AbstractVirtualDirectoryBase.GetVirtualPathToRoot">
            <summary>
            Gets the virtual path to root.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.VirtualPath.AbstractVirtualDirectoryBase.GetRealPathToRoot">
            <summary>
            Gets the real path to root.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.VirtualPath.AbstractVirtualDirectoryBase.GetPathToRoot(System.String,System.Func{NServiceKit.IO.IVirtualDirectory,System.String})">
            <summary>
            Gets the path to root.
            </summary>
            <param name="separator">The separator.</param>
            <param name="pathSel">The path sel.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.VirtualPath.AbstractVirtualDirectoryBase.Equals(System.Object)">
             <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</summary>
            
             <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
            
             <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.</returns>
        </member>
        <member name="M:NServiceKit.VirtualPath.AbstractVirtualDirectoryBase.GetHashCode">
             <summary>Serves as a hash function for a particular type.</summary>
            
             <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
        </member>
        <member name="M:NServiceKit.VirtualPath.AbstractVirtualDirectoryBase.ToString">
             <summary>Returns a string that represents the current object.</summary>
            
             <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:NServiceKit.VirtualPath.AbstractVirtualDirectoryBase.GetEnumerator">
             <summary>Gets the enumerator.</summary>
            
             <returns>The enumerator.</returns>
        </member>
        <member name="M:NServiceKit.VirtualPath.AbstractVirtualDirectoryBase.GetFileFromBackingDirectoryOrDefault(System.String)">
            <summary>
            Gets the file from backing directory or default.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.VirtualPath.AbstractVirtualDirectoryBase.GetMatchingFilesInDir(System.String)">
            <summary>
            Gets the matching files in dir.
            </summary>
            <param name="globPattern">The glob pattern.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.VirtualPath.AbstractVirtualDirectoryBase.GetDirectoryFromBackingDirectoryOrDefault(System.String)">
            <summary>
            Gets the directory from backing directory or default.
            </summary>
            <param name="directoryName">Name of the directory.</param>
            <returns></returns>
        </member>
        <member name="P:NServiceKit.VirtualPath.AbstractVirtualDirectoryBase.ParentDirectory">
            <summary>
            Gets or sets the parent directory.
            </summary>
            <value>
            The parent directory.
            </value>
        </member>
        <member name="P:NServiceKit.VirtualPath.AbstractVirtualDirectoryBase.Directory">
            <summary>
            Gets the directory.
            </summary>
            <value>
            The directory.
            </value>
        </member>
        <member name="P:NServiceKit.VirtualPath.AbstractVirtualDirectoryBase.LastModified">
            <summary>
            Gets the last modified.
            </summary>
            <value>
            The last modified.
            </value>
        </member>
        <member name="P:NServiceKit.VirtualPath.AbstractVirtualDirectoryBase.VirtualPath">
            <summary>
            Gets the virtual path.
            </summary>
            <value>
            The virtual path.
            </value>
        </member>
        <member name="P:NServiceKit.VirtualPath.AbstractVirtualDirectoryBase.RealPath">
            <summary>
            Gets the real path.
            </summary>
            <value>
            The real path.
            </value>
        </member>
        <member name="P:NServiceKit.VirtualPath.AbstractVirtualDirectoryBase.IsDirectory">
            <summary>
            Gets a value indicating whether this instance is directory.
            </summary>
            <value>
            <c>true</c> if this instance is directory; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NServiceKit.VirtualPath.AbstractVirtualDirectoryBase.IsRoot">
            <summary>
            Gets a value indicating whether this instance is root.
            </summary>
            <value>
              <c>true</c> if this instance is root; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NServiceKit.VirtualPath.AbstractVirtualDirectoryBase.Files">
            <summary>
            Gets the files.
            </summary>
            <value>
            The files.
            </value>
        </member>
        <member name="P:NServiceKit.VirtualPath.AbstractVirtualDirectoryBase.Directories">
            <summary>
            Gets the directories.
            </summary>
            <value>
            The directories.
            </value>
        </member>
        <member name="P:NServiceKit.VirtualPath.AbstractVirtualDirectoryBase.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="T:NServiceKit.VirtualPath.AbstractVirtualFileBase">
            <summary>An abstract virtual file base.</summary>
        </member>
        <member name="M:NServiceKit.VirtualPath.AbstractVirtualFileBase.#ctor(NServiceKit.IO.IVirtualPathProvider,NServiceKit.IO.IVirtualDirectory)">
             <summary>Initializes a new instance of the NServiceKit.VirtualPath.AbstractVirtualFileBase class.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <param name="owningProvider">The owning provider.</param>
             <param name="directory">     Pathname of the directory.</param>
        </member>
        <member name="M:NServiceKit.VirtualPath.AbstractVirtualFileBase.GetFileHash">
             <summary>Gets the file hash.</summary>
            
             <returns>The file hash.</returns>
        </member>
        <member name="M:NServiceKit.VirtualPath.AbstractVirtualFileBase.OpenText">
             <summary>Opens a StreamReader.</summary>
            
             <returns>A StreamReader.</returns>
        </member>
        <member name="M:NServiceKit.VirtualPath.AbstractVirtualFileBase.ReadAllText">
             <summary>Reads all text.</summary>
            
             <returns>all text.</returns>
        </member>
        <member name="M:NServiceKit.VirtualPath.AbstractVirtualFileBase.OpenRead">
             <summary>Opens the file for reading.</summary>
            
             <returns>A Stream.</returns>
        </member>
        <member name="M:NServiceKit.VirtualPath.AbstractVirtualFileBase.GetVirtualPathToRoot">
             <summary>Gets virtual path to root.</summary>
            
             <returns>The virtual path to root.</returns>
        </member>
        <member name="M:NServiceKit.VirtualPath.AbstractVirtualFileBase.GetRealPathToRoot">
             <summary>Gets real path to root.</summary>
            
             <returns>The real path to root.</returns>
        </member>
        <member name="M:NServiceKit.VirtualPath.AbstractVirtualFileBase.GetPathToRoot(System.String,System.Func{NServiceKit.IO.IVirtualDirectory,System.String})">
             <summary>Gets path to root.</summary>
            
             <param name="separator">The separator.</param>
             <param name="pathSel">  The path selected.</param>
            
             <returns>The path to root.</returns>
        </member>
        <member name="M:NServiceKit.VirtualPath.AbstractVirtualFileBase.Equals(System.Object)">
             <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</summary>
            
             <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
            
             <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.</returns>
        </member>
        <member name="M:NServiceKit.VirtualPath.AbstractVirtualFileBase.GetHashCode">
             <summary>Serves as a hash function for a particular type.</summary>
            
             <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
        </member>
        <member name="M:NServiceKit.VirtualPath.AbstractVirtualFileBase.ToString">
             <summary>Returns a string that represents the current object.</summary>
            
             <returns>A string that represents the current object.</returns>
        </member>
        <member name="P:NServiceKit.VirtualPath.AbstractVirtualFileBase.VirtualPathProvider">
             <summary>Gets or sets the virtual path provider.</summary>
            
             <value>The virtual path provider.</value>
        </member>
        <member name="P:NServiceKit.VirtualPath.AbstractVirtualFileBase.Extension">
             <summary>Gets the extension.</summary>
            
             <value>The extension.</value>
        </member>
        <member name="P:NServiceKit.VirtualPath.AbstractVirtualFileBase.Directory">
             <summary>Gets or sets the pathname of the directory.</summary>
            
             <value>The pathname of the directory.</value>
        </member>
        <member name="P:NServiceKit.VirtualPath.AbstractVirtualFileBase.Name">
             <summary>Gets the name.</summary>
            
             <value>The name.</value>
        </member>
        <member name="P:NServiceKit.VirtualPath.AbstractVirtualFileBase.VirtualPath">
             <summary>Gets the full pathname of the virtual file.</summary>
            
             <value>The full pathname of the virtual file.</value>
        </member>
        <member name="P:NServiceKit.VirtualPath.AbstractVirtualFileBase.RealPath">
             <summary>Gets the full pathname of the real file.</summary>
            
             <value>The full pathname of the real file.</value>
        </member>
        <member name="P:NServiceKit.VirtualPath.AbstractVirtualFileBase.IsDirectory">
             <summary>Gets a value indicating whether this object is directory.</summary>
            
             <value>true if this object is directory, false if not.</value>
        </member>
        <member name="P:NServiceKit.VirtualPath.AbstractVirtualFileBase.LastModified">
             <summary>Gets the Date/Time of the last modified.</summary>
            
             <value>The last modified.</value>
        </member>
        <member name="T:NServiceKit.VirtualPath.AbstractVirtualPathProviderBase">
            <summary>
            Abstract base class for all <see cref="T:NServiceKit.IO.IVirtualPathProvider">VirtualPathProviders</see>.
            </summary>
        </member>
        <member name="M:NServiceKit.VirtualPath.AbstractVirtualPathProviderBase.#ctor(NServiceKit.WebHost.Endpoints.IAppHost)">
            <summary>
            
            </summary>
            <param name="appHost"></param>
        </member>
        <member name="M:NServiceKit.VirtualPath.AbstractVirtualPathProviderBase.CombineVirtualPath(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="basePath"></param>
            <param name="relativePath"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.VirtualPath.AbstractVirtualPathProviderBase.FileExists(System.String)">
            <summary>
            
            </summary>
            <param name="virtualPath"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.VirtualPath.AbstractVirtualPathProviderBase.DirectoryExists(System.String)">
            <summary>
            
            </summary>
            <param name="virtualPath"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.VirtualPath.AbstractVirtualPathProviderBase.GetFile(System.String)">
            <summary>
            
            </summary>
            <param name="virtualPath"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.VirtualPath.AbstractVirtualPathProviderBase.GetFileHash(System.String)">
            <summary>
            
            </summary>
            <param name="virtualPath"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.VirtualPath.AbstractVirtualPathProviderBase.GetFileHash(NServiceKit.IO.IVirtualFile)">
            <summary>
            
            </summary>
            <param name="virtualFile"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.VirtualPath.AbstractVirtualPathProviderBase.GetDirectory(System.String)">
            <summary>
            
            </summary>
            <param name="virtualPath"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.VirtualPath.AbstractVirtualPathProviderBase.GetAllMatchingFiles(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="globPattern"></param>
            <param name="maxDepth"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.VirtualPath.AbstractVirtualPathProviderBase.IsSharedFile(NServiceKit.IO.IVirtualFile)">
            <summary>
            
            </summary>
            <param name="virtualFile"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.VirtualPath.AbstractVirtualPathProviderBase.IsViewFile(NServiceKit.IO.IVirtualFile)">
            <summary>
            
            </summary>
            <param name="virtualFile"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.VirtualPath.AbstractVirtualPathProviderBase.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="P:NServiceKit.VirtualPath.AbstractVirtualPathProviderBase.AppHost">
            <summary>
            
            </summary>
        </member>
        <member name="P:NServiceKit.VirtualPath.AbstractVirtualPathProviderBase.RootDirectory">
            <summary>
            
            </summary>
        </member>
        <member name="P:NServiceKit.VirtualPath.AbstractVirtualPathProviderBase.VirtualPathSeparator">
            <summary>
            
            </summary>
        </member>
        <member name="P:NServiceKit.VirtualPath.AbstractVirtualPathProviderBase.RealPathSeparator">
            <summary>
            
            </summary>
        </member>
        <member name="T:NServiceKit.VirtualPath.EmbeddedResourceVirtualPathProvider">
            <summary>
            <see cref="T:NServiceKit.IO.IVirtualPathProvider"/> implementation which looks at embedded resources.
            Resources will have the assembly name stripped off and subsequent namespace levels will be treated as directories.
            For example, if you embed A.B.C.D.txt in an assembly named A, it will be provided as: /B/C/D.txt
            When used with the RazorFormat plug-in, this lets you embed your views as resources within
            the assembly and distribute a self-contained DLL.
            </summary>
            <example>
            To use this with the RazorFormat plug-in, do something like the following:
                   this.LoadPlugin(new RazorFormat
                   {
                       WatchForModifiedPages = false,
                       VirtualPathProvider = new EmbeddedResourceVirtualPathProvider(this).IncludeAssemblies(typeof(Program).Assembly)
                   });
            </example>
        </member>
        <member name="M:NServiceKit.VirtualPath.EmbeddedResourceVirtualPathProvider.#ctor(NServiceKit.WebHost.Endpoints.IAppHost)">
            <summary>
            Initializes a new instance of the <see cref="T:NServiceKit.VirtualPath.EmbeddedResourceVirtualPathProvider"/> class.
            </summary>
            <param name="appHost"></param>
        </member>
        <member name="M:NServiceKit.VirtualPath.EmbeddedResourceVirtualPathProvider.IncludeAssemblies(System.Reflection.Assembly[])">
            <summary>
            Adds to the list of assemblies that will be scanned for embedded resources.
            </summary>
            <param name="assemblies"></param>
        </member>
        <member name="M:NServiceKit.VirtualPath.EmbeddedResourceVirtualPathProvider.Initialize">
            <summary>
            </summary>
        </member>
        <member name="M:NServiceKit.VirtualPath.EmbeddedResourceVirtualPathProvider.PopulateFromEmbeddedResources">
            <summary>
            Populates the root directory from embedded resources.
            </summary>
        </member>
        <member name="M:NServiceKit.VirtualPath.EmbeddedResourceVirtualPathProvider.InferFileNameAndDirectoryPath(System.String,System.String@,System.String[]@)">
            <summary>
            Takes in a relative path and figures out which portions represent the file name and any directories in between.
            e.g. A.B.C.txt would produce "C.txt" and ["A", "B"]
            </summary>
            <param name="relativeName"></param>
            <param name="fileName"></param>
            <param name="directoryPath"></param>
        </member>
        <member name="P:NServiceKit.VirtualPath.EmbeddedResourceVirtualPathProvider.FileExcluder">
            <summary>
            If set, will run on all discovered resources. Returning true will cause the resource to be excluded.
            </summary>
        </member>
        <member name="P:NServiceKit.VirtualPath.EmbeddedResourceVirtualPathProvider.RootDirectory">
             <summary>Gets the pathname of the root directory.</summary>
            
             <value>The pathname of the root directory.</value>
        </member>
        <member name="P:NServiceKit.VirtualPath.EmbeddedResourceVirtualPathProvider.VirtualPathSeparator">
             <summary>Gets the virtual path separator.</summary>
            
             <value>The virtual path separator.</value>
        </member>
        <member name="P:NServiceKit.VirtualPath.EmbeddedResourceVirtualPathProvider.RealPathSeparator">
             <summary>Gets the real path separator.</summary>
            
             <value>The real path separator.</value>
        </member>
        <member name="T:NServiceKit.VirtualPath.EmbeddedResourceVirtualPathProvider.StreamBasedVirtualFile">
            <summary>
            Virtual file that wraps a stream. Doesn't get unwrapped until it's resolved.
            </summary>
        </member>
        <member name="T:NServiceKit.VirtualPath.InMemoryVirtualFile">
            <summary>An in memory virtual file.</summary>
        </member>
        <member name="M:NServiceKit.VirtualPath.InMemoryVirtualFile.#ctor(NServiceKit.IO.IVirtualPathProvider,NServiceKit.IO.IVirtualDirectory)">
             <summary>Initializes a new instance of the NServiceKit.VirtualPath.InMemoryVirtualFile class.</summary>
            
             <param name="owningProvider">The owning provider.</param>
             <param name="directory">     Pathname of the directory.</param>
        </member>
        <member name="M:NServiceKit.VirtualPath.InMemoryVirtualFile.OpenRead">
             <summary>Opens the file for reading.</summary>
            
             <returns>A Stream.</returns>
        </member>
        <member name="P:NServiceKit.VirtualPath.InMemoryVirtualFile.FilePath">
             <summary>Gets or sets the full pathname of the file.</summary>
            
             <value>The full pathname of the file.</value>
        </member>
        <member name="P:NServiceKit.VirtualPath.InMemoryVirtualFile.FileName">
             <summary>Gets or sets the filename of the file.</summary>
            
             <value>The name of the file.</value>
        </member>
        <member name="P:NServiceKit.VirtualPath.InMemoryVirtualFile.Name">
             <summary>Gets the name.</summary>
            
             <value>The name.</value>
        </member>
        <member name="P:NServiceKit.VirtualPath.InMemoryVirtualFile.FileLastModified">
             <summary>Gets or sets the Date/Time of the file last modified.</summary>
            
             <value>The file last modified.</value>
        </member>
        <member name="P:NServiceKit.VirtualPath.InMemoryVirtualFile.LastModified">
             <summary>Gets the Date/Time of the last modified.</summary>
            
             <value>The last modified.</value>
        </member>
        <member name="P:NServiceKit.VirtualPath.InMemoryVirtualFile.TextContents">
             <summary>Gets or sets the text contents.</summary>
            
             <value>The text contents.</value>
        </member>
        <member name="P:NServiceKit.VirtualPath.InMemoryVirtualFile.ByteContents">
             <summary>Gets or sets the byte contents.</summary>
            
             <value>The byte contents.</value>
        </member>
        <member name="M:NServiceKit.VirtualPath.EmbeddedResourceVirtualPathProvider.StreamBasedVirtualFile.#ctor(NServiceKit.IO.IVirtualPathProvider,NServiceKit.IO.IVirtualDirectory,System.IO.Stream,System.String,System.DateTime)">
             <summary>Initializes a new instance of the NServiceKit.VirtualPath.EmbeddedResourceVirtualPathProvider.StreamBasedVirtualFile class.</summary>
            
             <param name="owningProvider">The owning provider.</param>
             <param name="directory">     Pathname of the directory.</param>
             <param name="contents">      The contents.</param>
             <param name="name">          The name.</param>
             <param name="lastModified">  The last modified.</param>
        </member>
        <member name="M:NServiceKit.VirtualPath.EmbeddedResourceVirtualPathProvider.StreamBasedVirtualFile.OpenRead">
             <summary>Opens the file for reading.</summary>
            
             <returns>A Stream.</returns>
        </member>
        <member name="P:NServiceKit.VirtualPath.EmbeddedResourceVirtualPathProvider.StreamBasedVirtualFile.Name">
             <summary>Gets the name.</summary>
            
             <value>The name.</value>
        </member>
        <member name="P:NServiceKit.VirtualPath.EmbeddedResourceVirtualPathProvider.StreamBasedVirtualFile.LastModified">
             <summary>Gets the Date/Time of the last modified.</summary>
            
             <value>The last modified.</value>
        </member>
        <member name="T:NServiceKit.VirtualPath.FileSystemVirtualDirectory">
            <summary>A file system virtual directory.</summary>
        </member>
        <member name="F:NServiceKit.VirtualPath.FileSystemVirtualDirectory.BackingDirInfo">
            <summary>Information describing the backing dir.</summary>
        </member>
        <member name="M:NServiceKit.VirtualPath.FileSystemVirtualDirectory.#ctor(NServiceKit.IO.IVirtualPathProvider,NServiceKit.IO.IVirtualDirectory,System.IO.DirectoryInfo)">
             <summary>Initializes a new instance of the NServiceKit.VirtualPath.FileSystemVirtualDirectory class.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <param name="owningProvider"> The owning provider.</param>
             <param name="parentDirectory">Pathname of the parent directory.</param>
             <param name="dInfo">          The information.</param>
        </member>
        <member name="M:NServiceKit.VirtualPath.FileSystemVirtualDirectory.GetEnumerator">
             <summary>Gets the enumerator.</summary>
            
             <returns>The enumerator.</returns>
        </member>
        <member name="M:NServiceKit.VirtualPath.FileSystemVirtualDirectory.GetFileFromBackingDirectoryOrDefault(System.String)">
             <summary>Gets the file from backing directory or default.</summary>
            
             <param name="fName">Name of the file.</param>
            
             <returns>The file from backing directory or default.</returns>
        </member>
        <member name="M:NServiceKit.VirtualPath.FileSystemVirtualDirectory.GetMatchingFilesInDir(System.String)">
             <summary>Gets the matching files in dir.</summary>
            
             <param name="globPattern">The glob pattern.</param>
            
             <returns>An enumerator that allows foreach to be used to process the matching files in dirs in this collection.</returns>
        </member>
        <member name="M:NServiceKit.VirtualPath.FileSystemVirtualDirectory.GetDirectoryFromBackingDirectoryOrDefault(System.String)">
             <summary>Gets the directory from backing directory or default.</summary>
            
             <param name="dName">Name of the directory.</param>
            
             <returns>The directory from backing directory or default.</returns>
        </member>
        <member name="M:NServiceKit.VirtualPath.FileSystemVirtualDirectory.EnumerateFiles(System.String)">
             <summary>Enumerates the files in this collection.</summary>
            
             <param name="pattern">Specifies the pattern.</param>
            
             <returns>An enumerator that allows foreach to be used to process the files in this collection.</returns>
        </member>
        <member name="M:NServiceKit.VirtualPath.FileSystemVirtualDirectory.EnumerateDirectories(System.String)">
             <summary>Enumerates the directories in this collection.</summary>
            
             <param name="dirName">Pathname of the directory.</param>
            
             <returns>An enumerator that allows foreach to be used to process the directories in this collection.</returns>
        </member>
        <member name="P:NServiceKit.VirtualPath.FileSystemVirtualDirectory.Files">
             <summary>Gets the files.</summary>
            
             <value>The files.</value>
        </member>
        <member name="P:NServiceKit.VirtualPath.FileSystemVirtualDirectory.Directories">
             <summary>Gets the directories.</summary>
            
             <value>The directories.</value>
        </member>
        <member name="P:NServiceKit.VirtualPath.FileSystemVirtualDirectory.Name">
             <summary>Gets the name.</summary>
            
             <value>The name.</value>
        </member>
        <member name="P:NServiceKit.VirtualPath.FileSystemVirtualDirectory.LastModified">
             <summary>Gets the last modified.</summary>
            
             <value>The last modified.</value>
        </member>
        <member name="P:NServiceKit.VirtualPath.FileSystemVirtualDirectory.RealPath">
             <summary>Gets the real path.</summary>
            
             <value>The real path.</value>
        </member>
        <member name="T:NServiceKit.VirtualPath.FileSystemVirtualFile">
            <summary>A file system virtual file.</summary>
        </member>
        <member name="F:NServiceKit.VirtualPath.FileSystemVirtualFile.BackingFile">
            <summary>The backing file.</summary>
        </member>
        <member name="M:NServiceKit.VirtualPath.FileSystemVirtualFile.#ctor(NServiceKit.IO.IVirtualPathProvider,NServiceKit.IO.IVirtualDirectory,System.IO.FileInfo)">
             <summary>Initializes a new instance of the NServiceKit.VirtualPath.FileSystemVirtualFile class.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <param name="owningProvider">The owning provider.</param>
             <param name="directory">     Pathname of the directory.</param>
             <param name="fInfo">         The information.</param>
        </member>
        <member name="M:NServiceKit.VirtualPath.FileSystemVirtualFile.OpenRead">
             <summary>Opens the file for reading.</summary>
            
             <returns>A Stream.</returns>
        </member>
        <member name="P:NServiceKit.VirtualPath.FileSystemVirtualFile.Name">
             <summary>Gets the name.</summary>
            
             <value>The name.</value>
        </member>
        <member name="P:NServiceKit.VirtualPath.FileSystemVirtualFile.RealPath">
             <summary>Gets the full pathname of the real file.</summary>
            
             <value>The full pathname of the real file.</value>
        </member>
        <member name="P:NServiceKit.VirtualPath.FileSystemVirtualFile.LastModified">
             <summary>Gets the Date/Time of the last modified.</summary>
            
             <value>The last modified.</value>
        </member>
        <member name="T:NServiceKit.VirtualPath.FileSystemVirtualPathProvider">
            <summary>A file system virtual path provider.</summary>
        </member>
        <member name="F:NServiceKit.VirtualPath.FileSystemVirtualPathProvider.RootDirInfo">
            <summary>Information describing the root dir.</summary>
        </member>
        <member name="F:NServiceKit.VirtualPath.FileSystemVirtualPathProvider.RootDir">
            <summary>The root dir.</summary>
        </member>
        <member name="M:NServiceKit.VirtualPath.FileSystemVirtualPathProvider.#ctor(NServiceKit.WebHost.Endpoints.IAppHost,System.String)">
             <summary>Initializes a new instance of the NServiceKit.VirtualPath.FileSystemVirtualPathProvider class.</summary>
            
             <param name="appHost">          The application host.</param>
             <param name="rootDirectoryPath">Pathname of the root directory.</param>
        </member>
        <member name="M:NServiceKit.VirtualPath.FileSystemVirtualPathProvider.#ctor(NServiceKit.WebHost.Endpoints.IAppHost,System.IO.DirectoryInfo)">
             <summary>Initializes a new instance of the NServiceKit.VirtualPath.FileSystemVirtualPathProvider class.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <param name="appHost">    The application host.</param>
             <param name="rootDirInfo">Information describing the root dir.</param>
        </member>
        <member name="M:NServiceKit.VirtualPath.FileSystemVirtualPathProvider.#ctor(NServiceKit.WebHost.Endpoints.IAppHost)">
             <summary>Initializes a new instance of the NServiceKit.VirtualPath.FileSystemVirtualPathProvider class.</summary>
            
             <param name="appHost">The application host.</param>
        </member>
        <member name="M:NServiceKit.VirtualPath.FileSystemVirtualPathProvider.Initialize">
             <summary>Initializes this object.</summary>
            
             <exception cref="T:System.ApplicationException">Thrown when an Application error condition occurs.</exception>
        </member>
        <member name="P:NServiceKit.VirtualPath.FileSystemVirtualPathProvider.RootDirectory">
             <summary>Gets the pathname of the root directory.</summary>
            
             <value>The pathname of the root directory.</value>
        </member>
        <member name="P:NServiceKit.VirtualPath.FileSystemVirtualPathProvider.VirtualPathSeparator">
             <summary>Gets the virtual path separator.</summary>
            
             <value>The virtual path separator.</value>
        </member>
        <member name="P:NServiceKit.VirtualPath.FileSystemVirtualPathProvider.RealPathSeparator">
             <summary>Gets the real path separator.</summary>
            
             <value>The real path separator.</value>
        </member>
        <member name="T:NServiceKit.VirtualPath.IWriteableVirtualPathProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:NServiceKit.VirtualPath.IWriteableVirtualPathProvider.AddFile(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="filePath"></param>
            <param name="contents"></param>
        </member>
        <member name="T:NServiceKit.VirtualPath.InMemoryVirtualPathProvider">
            <summary>
            In Memory repository for files. Useful for testing.
            </summary>
        </member>
        <member name="M:NServiceKit.VirtualPath.InMemoryVirtualPathProvider.#ctor(NServiceKit.WebHost.Endpoints.IAppHost)">
            <summary>
            
            </summary>
            <param name="appHost"></param>
        </member>
        <member name="F:NServiceKit.VirtualPath.InMemoryVirtualPathProvider.rootDirectory">
            <summary>
            
            </summary>
        </member>
        <member name="M:NServiceKit.VirtualPath.InMemoryVirtualPathProvider.Initialize">
            <summary>Initializes this object.</summary>
        </member>
        <member name="M:NServiceKit.VirtualPath.InMemoryVirtualPathProvider.AddFile(System.String,System.String)">
             <summary>Adds a file to 'contents'.</summary>
            
             <param name="filePath">.</param>
             <param name="contents">.</param>
        </member>
        <member name="M:NServiceKit.VirtualPath.InMemoryVirtualPathProvider.GetFile(System.String)">
             <summary>Gets a file.</summary>
            
             <param name="virtualPath">.</param>
            
             <returns>The file.</returns>
        </member>
        <member name="P:NServiceKit.VirtualPath.InMemoryVirtualPathProvider.RootDirectory">
             <summary>Gets the pathname of the root directory.</summary>
            
             <value>The pathname of the root directory.</value>
        </member>
        <member name="P:NServiceKit.VirtualPath.InMemoryVirtualPathProvider.VirtualPathSeparator">
             <summary>Gets the virtual path separator.</summary>
            
             <value>The virtual path separator.</value>
        </member>
        <member name="P:NServiceKit.VirtualPath.InMemoryVirtualPathProvider.RealPathSeparator">
             <summary>Gets the real path separator.</summary>
            
             <value>The real path separator.</value>
        </member>
        <member name="T:NServiceKit.VirtualPath.InMemoryVirtualDirectory">
            <summary>
            
            </summary>
        </member>
        <member name="M:NServiceKit.VirtualPath.InMemoryVirtualDirectory.#ctor(NServiceKit.IO.IVirtualPathProvider)">
            <summary>
            
            </summary>
            <param name="owningProvider"></param>
        </member>
        <member name="M:NServiceKit.VirtualPath.InMemoryVirtualDirectory.#ctor(NServiceKit.IO.IVirtualPathProvider,NServiceKit.IO.IVirtualDirectory)">
            <summary>
            
            </summary>
            <param name="owningProvider"></param>
            <param name="parentDirectory"></param>
        </member>
        <member name="F:NServiceKit.VirtualPath.InMemoryVirtualDirectory.files">
            <summary>
            
            </summary>
        </member>
        <member name="F:NServiceKit.VirtualPath.InMemoryVirtualDirectory.dirs">
            <summary>
            
            </summary>
        </member>
        <member name="M:NServiceKit.VirtualPath.InMemoryVirtualDirectory.GetFile(System.String)">
            <summary>
            Gets the file.
            </summary>
            <param name="virtualPath">The virtual path.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.VirtualPath.InMemoryVirtualDirectory.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.VirtualPath.InMemoryVirtualDirectory.GetFileFromBackingDirectoryOrDefault(System.String)">
            <summary>
            Gets the file from backing directory or default.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.VirtualPath.InMemoryVirtualDirectory.GetMatchingFilesInDir(System.String)">
            <summary>
            Gets the matching files in dir.
            </summary>
            <param name="globPattern">The glob pattern.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.VirtualPath.InMemoryVirtualDirectory.EnumerateFiles(System.String)">
            <summary>
            Enumerates the files.
            </summary>
            <param name="pattern">The pattern.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.VirtualPath.InMemoryVirtualDirectory.GetDirectoryFromBackingDirectoryOrDefault(System.String)">
            <summary>
            Gets the directory from backing directory or default.
            </summary>
            <param name="directoryName">Name of the directory.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.VirtualPath.InMemoryVirtualDirectory.AddFile(System.String,System.String)">
            <summary>
            Adds the file.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="contents">The contents.</param>
        </member>
        <member name="M:NServiceKit.VirtualPath.InMemoryVirtualDirectory.StripBeginningDirectorySeparator(System.String)">
            <summary>
            Strips the beginning directory separator.
            </summary>
            <param name="filePath">The file path.</param>
            <returns></returns>
        </member>
        <member name="P:NServiceKit.VirtualPath.InMemoryVirtualDirectory.FlattenFileEnumeration">
            <summary>
            Whether EnumerateFiles should flatten and expand all subdirectories or not.
            </summary>
            <value>
            When true, EnumerateFiles returns all files in all subdirectories (default). When false, only returns for this directory.
            </value>
        </member>
        <member name="P:NServiceKit.VirtualPath.InMemoryVirtualDirectory.DirLastModified">
            <summary>
            
            </summary>
        </member>
        <member name="P:NServiceKit.VirtualPath.InMemoryVirtualDirectory.LastModified">
            <summary>
            
            </summary>
        </member>
        <member name="P:NServiceKit.VirtualPath.InMemoryVirtualDirectory.Files">
            <summary>
            
            </summary>
        </member>
        <member name="P:NServiceKit.VirtualPath.InMemoryVirtualDirectory.Directories">
            <summary>
            
            </summary>
        </member>
        <member name="P:NServiceKit.VirtualPath.InMemoryVirtualDirectory.DirName">
            <summary>
            
            </summary>
        </member>
        <member name="P:NServiceKit.VirtualPath.InMemoryVirtualDirectory.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:NServiceKit.VirtualPath.VirtualPathExtension">
            <summary>A virtual path extension.</summary>
        </member>
        <member name="M:NServiceKit.VirtualPath.VirtualPathExtension.TokenizeVirtualPath(System.String,NServiceKit.IO.IVirtualPathProvider)">
             <summary>A string extension method that tokenize virtual path.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <param name="str">         The str to act on.</param>
             <param name="pathProvider">The path provider.</param>
            
             <returns>A Stack&lt;string&gt;</returns>
        </member>
        <member name="M:NServiceKit.VirtualPath.VirtualPathExtension.TokenizeVirtualPath(System.String,System.String)">
             <summary>A string extension method that tokenize virtual path.</summary>
            
             <param name="str">                 The str to act on.</param>
             <param name="virtualPathSeparator">The virtual path separator.</param>
            
             <returns>A Stack&lt;string&gt;</returns>
        </member>
        <member name="M:NServiceKit.VirtualPath.VirtualPathExtension.TokenizeResourcePath(System.String,System.Char)">
             <summary>A string extension method that tokenize resource path.</summary>
            
             <param name="str">          The str to act on.</param>
             <param name="pathSeparator">The path separator.</param>
            
             <returns>A Stack&lt;string&gt;</returns>
        </member>
        <member name="M:NServiceKit.VirtualPath.VirtualPathExtension.GroupByFirstToken(System.Collections.Generic.IEnumerable{System.String},System.Char)">
             <summary>Enumerates group by first token in this collection.</summary>
            
             <param name="resourceNames">The resourceNames to act on.</param>
             <param name="pathSeparator">The path separator.</param>
            
             <returns>An enumerator that allows foreach to be used to process group by first token in this collection.</returns>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.ActionContext">
            <summary>
            Context to capture IService action
            </summary>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.ActionContext.AnyAction">
            <summary>any action.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.ActionContext.Key(System.String,System.String)">
             <summary>Keys.</summary>
            
             <param name="method">        The method.</param>
             <param name="requestDtoName">Name of the request dto.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.ActionContext.AnyKey(System.String)">
             <summary>Any key.</summary>
            
             <param name="requestDtoName">Name of the request dto.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.ActionContext.Id">
             <summary>Gets or sets the identifier.</summary>
            
             <value>The identifier.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.ActionContext.RequestType">
             <summary>Gets or sets the type of the request.</summary>
            
             <value>The type of the request.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.ActionContext.ServiceType">
             <summary>Gets or sets the type of the service.</summary>
            
             <value>The type of the service.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.ActionContext.ServiceAction">
             <summary>Gets or sets the service action.</summary>
            
             <value>The service action.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.ActionContext.RequestFilters">
             <summary>Gets or sets the request filters.</summary>
            
             <value>The request filters.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.ActionContext.ResponseFilters">
             <summary>Gets or sets the response filters.</summary>
            
             <value>The response filters.</value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.AppHostExtensions">
            <summary>An application host extensions.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.AppHostExtensions.RegisterService``1(NServiceKit.WebHost.Endpoints.IAppHost,System.String[])">
             <summary>An IAppHost extension method that registers the service.</summary>
            
             <typeparam name="TService">Type of the service.</typeparam>
             <param name="appHost">    .</param>
             <param name="atRestPaths">A variable-length parameters list containing at rest paths.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.AppHostExtensions.RegisterRequestBinder``1(NServiceKit.WebHost.Endpoints.IAppHost,System.Func{NServiceKit.ServiceHost.IHttpRequest,System.Object})">
             <summary>An IAppHost extension method that registers the request binder.</summary>
            
             <typeparam name="TRequest">Type of the request.</typeparam>
             <param name="appHost">.</param>
             <param name="binder"> The binder.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.AppHostExtensions.AddPluginsFromAssembly(NServiceKit.WebHost.Endpoints.IAppHost,System.Reflection.Assembly[])">
             <summary>An IAppHost extension method that adds the plugins from assembly to 'assembliesWithPlugins'.</summary>
            
             <param name="appHost">              .</param>
             <param name="assembliesWithPlugins">A variable-length parameters list containing assemblies with plugins.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.AppHostExtensions.GetContainer(NServiceKit.WebHost.Endpoints.IAppHost)">
            <summary>
            Get an IAppHost container. 
            Note: Registering dependencies should only be done during setup/configuration 
            stage and remain immutable there after for thread-safety.
            </summary>
            <param name="appHost"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.Html.CachedExpressionCompiler.Compiler`2.Compile(System.Linq.Expressions.Expression{System.Func{`0,`1}})">
             <summary>Compiles the given expression.</summary>
            
             <param name="expr">The expression.</param>
            
             <returns>A Func&lt;TIn,TOut&gt;</returns>
        </member>
        <member name="T:NServiceKit.Html.ExpressionHelper">
            <summary>An expression helper.</summary>
        </member>
        <member name="M:NServiceKit.Html.ExpressionHelper.GetExpressionText(System.String)">
             <summary>Gets expression text.</summary>
            
             <param name="expression">The expression.</param>
            
             <returns>The expression text.</returns>
        </member>
        <member name="M:NServiceKit.Html.ExpressionHelper.GetExpressionText(System.Linq.Expressions.LambdaExpression)">
             <summary>Gets expression text.</summary>
            
             <param name="expression">The expression.</param>
            
             <returns>The expression text.</returns>
        </member>
        <member name="T:NServiceKit.Html.HtmlHelperExtensions">
            <summary>A HTML helper extensions.</summary>
        </member>
        <member name="M:NServiceKit.Html.HtmlHelperExtensions.GetHttpRequest(NServiceKit.Html.HtmlHelper)">
             <summary>A HtmlHelper extension method that gets HTTP request.</summary>
            
             <param name="html">The HTML to act on.</param>
            
             <returns>The HTTP request.</returns>
        </member>
        <member name="T:NServiceKit.Html.DisplayTextExtensions">
            <summary>A display text extensions.</summary>
        </member>
        <member name="M:NServiceKit.Html.DisplayTextExtensions.DisplayText(NServiceKit.Html.HtmlHelper,System.String)">
             <summary>A HtmlHelper extension method that displays a text.</summary>
            
             <param name="html">The HTML to act on.</param>
             <param name="name">The name.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.DisplayTextExtensions.DisplayTextFor``2(NServiceKit.Html.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
             <summary>A HtmlHelper&lt;TModel&gt; extension method that displays a text for.</summary>
            
             <typeparam name="TModel"> Type of the model.</typeparam>
             <typeparam name="TResult">Type of the result.</typeparam>
             <param name="html">      The HTML to act on.</param>
             <param name="expression">The expression.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="T:NServiceKit.Html.InputExtensions">
            <summary>An input extensions.</summary>
        </member>
        <member name="M:NServiceKit.Html.InputExtensions.CheckBox(NServiceKit.Html.HtmlHelper,System.String)">
             <summary>A HtmlHelper extension method that check box.</summary>
            
             <param name="htmlHelper">The htmlHelper to act on.</param>
             <param name="name">      The name.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.InputExtensions.CheckBox(NServiceKit.Html.HtmlHelper,System.String,System.Boolean)">
             <summary>A HtmlHelper extension method that check box.</summary>
            
             <param name="htmlHelper">The htmlHelper to act on.</param>
             <param name="name">      The name.</param>
             <param name="isChecked"> true if this object is checked.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.InputExtensions.CheckBox(NServiceKit.Html.HtmlHelper,System.String,System.Boolean,System.Object)">
             <summary>A HtmlHelper extension method that check box.</summary>
            
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="name">          The name.</param>
             <param name="isChecked">     true if this object is checked.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.InputExtensions.CheckBox(NServiceKit.Html.HtmlHelper,System.String,System.Object)">
             <summary>A HtmlHelper extension method that check box.</summary>
            
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="name">          The name.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.InputExtensions.CheckBox(NServiceKit.Html.HtmlHelper,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
             <summary>A HtmlHelper extension method that check box.</summary>
            
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="name">          The name.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.InputExtensions.CheckBox(NServiceKit.Html.HtmlHelper,System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
             <summary>A HtmlHelper extension method that check box.</summary>
            
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="name">          The name.</param>
             <param name="isChecked">     true if this object is checked.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.InputExtensions.CheckBoxFor``1(NServiceKit.Html.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
             <summary>A HtmlHelper&lt;TModel&gt; extension method that check box for.</summary>
            
             <typeparam name="TModel">Type of the model.</typeparam>
             <param name="htmlHelper">The htmlHelper to act on.</param>
             <param name="expression">The expression.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.InputExtensions.CheckBoxFor``1(NServiceKit.Html.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object)">
             <summary>A HtmlHelper&lt;TModel&gt; extension method that check box for.</summary>
            
             <typeparam name="TModel">Type of the model.</typeparam>
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="expression">    The expression.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.InputExtensions.CheckBoxFor``1(NServiceKit.Html.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IDictionary{System.String,System.Object})">
             <summary>A HtmlHelper&lt;TModel&gt; extension method that check box for.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <typeparam name="TModel">Type of the model.</typeparam>
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="expression">    The expression.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.InputExtensions.Hidden(NServiceKit.Html.HtmlHelper,System.String)">
             <summary>A HtmlHelper extension method that hiddens.</summary>
            
             <param name="htmlHelper">The htmlHelper to act on.</param>
             <param name="name">      The name.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.InputExtensions.Hidden(NServiceKit.Html.HtmlHelper,System.String,System.Object)">
             <summary>A HtmlHelper extension method that hiddens.</summary>
            
             <param name="htmlHelper">The htmlHelper to act on.</param>
             <param name="name">      The name.</param>
             <param name="value">     The value.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.InputExtensions.Hidden(NServiceKit.Html.HtmlHelper,System.String,System.Object,System.Object)">
             <summary>A HtmlHelper extension method that hiddens.</summary>
            
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="name">          The name.</param>
             <param name="value">         The value.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.InputExtensions.Hidden(NServiceKit.Html.HtmlHelper,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
             <summary>A HtmlHelper extension method that hiddens.</summary>
            
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="name">          The name.</param>
             <param name="value">         The value.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.InputExtensions.HiddenFor``2(NServiceKit.Html.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
             <summary>A HtmlHelper&lt;TModel&gt; extension method that hidden for.</summary>
            
             <typeparam name="TModel">   Type of the model.</typeparam>
             <typeparam name="TProperty">Type of the property.</typeparam>
             <param name="htmlHelper">The htmlHelper to act on.</param>
             <param name="expression">The expression.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.InputExtensions.HiddenFor``2(NServiceKit.Html.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
             <summary>A HtmlHelper&lt;TModel&gt; extension method that hidden for.</summary>
            
             <typeparam name="TModel">   Type of the model.</typeparam>
             <typeparam name="TProperty">Type of the property.</typeparam>
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="expression">    The expression.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.InputExtensions.HiddenFor``2(NServiceKit.Html.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IDictionary{System.String,System.Object})">
             <summary>A HtmlHelper&lt;TModel&gt; extension method that hidden for.</summary>
            
             <typeparam name="TModel">   Type of the model.</typeparam>
             <typeparam name="TProperty">Type of the property.</typeparam>
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="expression">    The expression.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.InputExtensions.Password(NServiceKit.Html.HtmlHelper,System.String)">
             <summary>A HtmlHelper extension method that passwords.</summary>
            
             <param name="htmlHelper">The htmlHelper to act on.</param>
             <param name="name">      The name.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.InputExtensions.Password(NServiceKit.Html.HtmlHelper,System.String,System.Object)">
             <summary>A HtmlHelper extension method that passwords.</summary>
            
             <param name="htmlHelper">The htmlHelper to act on.</param>
             <param name="name">      The name.</param>
             <param name="value">     The value.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.InputExtensions.Password(NServiceKit.Html.HtmlHelper,System.String,System.Object,System.Object)">
             <summary>A HtmlHelper extension method that passwords.</summary>
            
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="name">          The name.</param>
             <param name="value">         The value.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.InputExtensions.Password(NServiceKit.Html.HtmlHelper,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
             <summary>A HtmlHelper extension method that passwords.</summary>
            
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="name">          The name.</param>
             <param name="value">         The value.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.InputExtensions.PasswordFor``2(NServiceKit.Html.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
             <summary>A HtmlHelper&lt;TModel&gt; extension method that password for.</summary>
            
             <typeparam name="TModel">   Type of the model.</typeparam>
             <typeparam name="TProperty">Type of the property.</typeparam>
             <param name="htmlHelper">The htmlHelper to act on.</param>
             <param name="expression">The expression.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.InputExtensions.PasswordFor``2(NServiceKit.Html.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
             <summary>A HtmlHelper&lt;TModel&gt; extension method that password for.</summary>
            
             <typeparam name="TModel">   Type of the model.</typeparam>
             <typeparam name="TProperty">Type of the property.</typeparam>
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="expression">    The expression.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.InputExtensions.PasswordFor``2(NServiceKit.Html.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IDictionary{System.String,System.Object})">
             <summary>A HtmlHelper&lt;TModel&gt; extension method that password for.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <typeparam name="TModel">   Type of the model.</typeparam>
             <typeparam name="TProperty">Type of the property.</typeparam>
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="expression">    The expression.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.InputExtensions.RadioButton(NServiceKit.Html.HtmlHelper,System.String,System.Object)">
             <summary>A HtmlHelper extension method that radio button.</summary>
            
             <param name="htmlHelper">The htmlHelper to act on.</param>
             <param name="name">      The name.</param>
             <param name="value">     The value.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.InputExtensions.RadioButton(NServiceKit.Html.HtmlHelper,System.String,System.Object,System.Object)">
             <summary>A HtmlHelper extension method that radio button.</summary>
            
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="name">          The name.</param>
             <param name="value">         The value.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.InputExtensions.RadioButton(NServiceKit.Html.HtmlHelper,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
             <summary>A HtmlHelper extension method that radio button.</summary>
            
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="name">          The name.</param>
             <param name="value">         The value.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.InputExtensions.RadioButton(NServiceKit.Html.HtmlHelper,System.String,System.Object,System.Boolean)">
             <summary>A HtmlHelper extension method that radio button.</summary>
            
             <param name="htmlHelper">The htmlHelper to act on.</param>
             <param name="name">      The name.</param>
             <param name="value">     The value.</param>
             <param name="isChecked"> true if this object is checked.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.InputExtensions.RadioButton(NServiceKit.Html.HtmlHelper,System.String,System.Object,System.Boolean,System.Object)">
             <summary>A HtmlHelper extension method that radio button.</summary>
            
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="name">          The name.</param>
             <param name="value">         The value.</param>
             <param name="isChecked">     true if this object is checked.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.InputExtensions.RadioButton(NServiceKit.Html.HtmlHelper,System.String,System.Object,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
             <summary>A HtmlHelper extension method that radio button.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="name">          The name.</param>
             <param name="value">         The value.</param>
             <param name="isChecked">     true if this object is checked.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.InputExtensions.RadioButtonFor``2(NServiceKit.Html.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
             <summary>A HtmlHelper&lt;TModel&gt; extension method that radio button for.</summary>
            
             <typeparam name="TModel">   Type of the model.</typeparam>
             <typeparam name="TProperty">Type of the property.</typeparam>
             <param name="htmlHelper">The htmlHelper to act on.</param>
             <param name="expression">The expression.</param>
             <param name="value">     The value.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.InputExtensions.RadioButtonFor``2(NServiceKit.Html.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object,System.Object)">
             <summary>A HtmlHelper&lt;TModel&gt; extension method that radio button for.</summary>
            
             <typeparam name="TModel">   Type of the model.</typeparam>
             <typeparam name="TProperty">Type of the property.</typeparam>
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="expression">    The expression.</param>
             <param name="value">         The value.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.InputExtensions.RadioButtonFor``2(NServiceKit.Html.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
             <summary>A HtmlHelper&lt;TModel&gt; extension method that radio button for.</summary>
            
             <typeparam name="TModel">   Type of the model.</typeparam>
             <typeparam name="TProperty">Type of the property.</typeparam>
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="expression">    The expression.</param>
             <param name="value">         The value.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.InputExtensions.TextBox(NServiceKit.Html.HtmlHelper,System.String)">
             <summary>A HtmlHelper extension method that text box.</summary>
            
             <param name="htmlHelper">The htmlHelper to act on.</param>
             <param name="name">      The name.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.InputExtensions.TextBox(NServiceKit.Html.HtmlHelper,System.String,System.Object)">
             <summary>A HtmlHelper extension method that text box.</summary>
            
             <param name="htmlHelper">The htmlHelper to act on.</param>
             <param name="name">      The name.</param>
             <param name="value">     The value.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.InputExtensions.TextBox(NServiceKit.Html.HtmlHelper,System.String,System.Object,System.String)">
             <summary>A HtmlHelper extension method that text box.</summary>
            
             <param name="htmlHelper">The htmlHelper to act on.</param>
             <param name="name">      The name.</param>
             <param name="value">     The value.</param>
             <param name="format">    Describes the format to use.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.InputExtensions.TextBox(NServiceKit.Html.HtmlHelper,System.String,System.Object,System.Object)">
             <summary>A HtmlHelper extension method that text box.</summary>
            
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="name">          The name.</param>
             <param name="value">         The value.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.InputExtensions.TextBox(NServiceKit.Html.HtmlHelper,System.String,System.Object,System.String,System.Object)">
             <summary>A HtmlHelper extension method that text box.</summary>
            
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="name">          The name.</param>
             <param name="value">         The value.</param>
             <param name="format">        Describes the format to use.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.InputExtensions.TextBox(NServiceKit.Html.HtmlHelper,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
             <summary>A HtmlHelper extension method that text box.</summary>
            
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="name">          The name.</param>
             <param name="value">         The value.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.InputExtensions.TextBox(NServiceKit.Html.HtmlHelper,System.String,System.Object,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
             <summary>A HtmlHelper extension method that text box.</summary>
            
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="name">          The name.</param>
             <param name="value">         The value.</param>
             <param name="format">        Describes the format to use.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.InputExtensions.TextBoxFor``2(NServiceKit.Html.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
             <summary>A HtmlHelper&lt;TModel&gt; extension method that text box for.</summary>
            
             <typeparam name="TModel">   Type of the model.</typeparam>
             <typeparam name="TProperty">Type of the property.</typeparam>
             <param name="htmlHelper">The htmlHelper to act on.</param>
             <param name="expression">The expression.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.InputExtensions.TextBoxFor``2(NServiceKit.Html.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
             <summary>A HtmlHelper&lt;TModel&gt; extension method that text box for.</summary>
            
             <typeparam name="TModel">   Type of the model.</typeparam>
             <typeparam name="TProperty">Type of the property.</typeparam>
             <param name="htmlHelper">The htmlHelper to act on.</param>
             <param name="expression">The expression.</param>
             <param name="format">    Describes the format to use.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.InputExtensions.TextBoxFor``2(NServiceKit.Html.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
             <summary>A HtmlHelper&lt;TModel&gt; extension method that text box for.</summary>
            
             <typeparam name="TModel">   Type of the model.</typeparam>
             <typeparam name="TProperty">Type of the property.</typeparam>
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="expression">    The expression.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.InputExtensions.TextBoxFor``2(NServiceKit.Html.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Object)">
             <summary>A HtmlHelper&lt;TModel&gt; extension method that text box for.</summary>
            
             <typeparam name="TModel">   Type of the model.</typeparam>
             <typeparam name="TProperty">Type of the property.</typeparam>
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="expression">    The expression.</param>
             <param name="format">        Describes the format to use.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.InputExtensions.TextBoxFor``2(NServiceKit.Html.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IDictionary{System.String,System.Object})">
             <summary>A HtmlHelper&lt;TModel&gt; extension method that text box for.</summary>
            
             <typeparam name="TModel">   Type of the model.</typeparam>
             <typeparam name="TProperty">Type of the property.</typeparam>
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="expression">    The expression.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.InputExtensions.TextBoxFor``2(NServiceKit.Html.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
             <summary>A HtmlHelper&lt;TModel&gt; extension method that text box for.</summary>
            
             <typeparam name="TModel">   Type of the model.</typeparam>
             <typeparam name="TProperty">Type of the property.</typeparam>
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="expression">    The expression.</param>
             <param name="format">        Describes the format to use.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.InputExtensions.ReturnUrl(NServiceKit.Html.HtmlHelper,System.String)">
             <summary>A HtmlHelper extension method that returns an URL.</summary>
            
             <param name="htmlHelper">The htmlHelper to act on.</param>
             <param name="name">      The name.</param>
            
             <returns>The URL.</returns>
        </member>
        <member name="T:NServiceKit.Html.LabelExtensions">
            <summary>A label extensions.</summary>
        </member>
        <member name="M:NServiceKit.Html.LabelExtensions.Label(NServiceKit.Html.HtmlHelper,System.String)">
             <summary>A HtmlHelper extension method that labels.</summary>
            
             <param name="html">      The HTML to act on.</param>
             <param name="expression">The expression.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.LabelExtensions.Label(NServiceKit.Html.HtmlHelper,System.String,System.String)">
             <summary>A HtmlHelper extension method that labels.</summary>
            
             <param name="html">      The HTML to act on.</param>
             <param name="expression">The expression.</param>
             <param name="labelText"> The label text.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.LabelExtensions.LabelFor``2(NServiceKit.Html.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
             <summary>A HtmlHelper&lt;TModel&gt; extension method that label for.</summary>
            
             <typeparam name="TModel">Type of the model.</typeparam>
             <typeparam name="TValue">Type of the value.</typeparam>
             <param name="html">      The HTML to act on.</param>
             <param name="expression">The expression.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.LabelExtensions.LabelFor``2(NServiceKit.Html.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
             <summary>A HtmlHelper&lt;TModel&gt; extension method that label for.</summary>
            
             <typeparam name="TModel">Type of the model.</typeparam>
             <typeparam name="TValue">Type of the value.</typeparam>
             <param name="html">      The HTML to act on.</param>
             <param name="expression">The expression.</param>
             <param name="labelText"> The label text.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.LabelExtensions.LabelForModel(NServiceKit.Html.HtmlHelper)">
             <summary>A HtmlHelper extension method that label for model.</summary>
            
             <param name="html">The HTML to act on.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.LabelExtensions.LabelForModel(NServiceKit.Html.HtmlHelper,System.String)">
             <summary>A HtmlHelper extension method that label for model.</summary>
            
             <param name="html">     The HTML to act on.</param>
             <param name="labelText">The label text.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="T:NServiceKit.Html.TextAreaExtensions">
            <summary>A text area extensions.</summary>
        </member>
        <member name="M:NServiceKit.Html.TextAreaExtensions.TextArea(NServiceKit.Html.HtmlHelper,System.String)">
             <summary>A HtmlHelper extension method that text area.</summary>
            
             <param name="htmlHelper">The htmlHelper to act on.</param>
             <param name="name">      The name.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.TextAreaExtensions.TextArea(NServiceKit.Html.HtmlHelper,System.String,System.Object)">
             <summary>A HtmlHelper extension method that text area.</summary>
            
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="name">          The name.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.TextAreaExtensions.TextArea(NServiceKit.Html.HtmlHelper,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
             <summary>A HtmlHelper extension method that text area.</summary>
            
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="name">          The name.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.TextAreaExtensions.TextArea(NServiceKit.Html.HtmlHelper,System.String,System.String)">
             <summary>A HtmlHelper extension method that text area.</summary>
            
             <param name="htmlHelper">The htmlHelper to act on.</param>
             <param name="name">      The name.</param>
             <param name="value">     The value.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.TextAreaExtensions.TextArea(NServiceKit.Html.HtmlHelper,System.String,System.String,System.Object)">
             <summary>A HtmlHelper extension method that text area.</summary>
            
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="name">          The name.</param>
             <param name="value">         The value.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.TextAreaExtensions.TextArea(NServiceKit.Html.HtmlHelper,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
             <summary>A HtmlHelper extension method that text area.</summary>
            
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="name">          The name.</param>
             <param name="value">         The value.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.TextAreaExtensions.TextArea(NServiceKit.Html.HtmlHelper,System.String,System.String,System.Int32,System.Int32,System.Object)">
             <summary>A HtmlHelper extension method that text area.</summary>
            
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="name">          The name.</param>
             <param name="value">         The value.</param>
             <param name="rows">          The rows.</param>
             <param name="columns">       The columns.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.TextAreaExtensions.TextArea(NServiceKit.Html.HtmlHelper,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
             <summary>A HtmlHelper extension method that text area.</summary>
            
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="name">          The name.</param>
             <param name="value">         The value.</param>
             <param name="rows">          The rows.</param>
             <param name="columns">       The columns.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.TextAreaExtensions.TextAreaFor``2(NServiceKit.Html.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
             <summary>A HtmlHelper&lt;TModel&gt; extension method that text area for.</summary>
            
             <typeparam name="TModel">   Type of the model.</typeparam>
             <typeparam name="TProperty">Type of the property.</typeparam>
             <param name="htmlHelper">The htmlHelper to act on.</param>
             <param name="expression">The expression.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.TextAreaExtensions.TextAreaFor``2(NServiceKit.Html.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
             <summary>A HtmlHelper&lt;TModel&gt; extension method that text area for.</summary>
            
             <typeparam name="TModel">   Type of the model.</typeparam>
             <typeparam name="TProperty">Type of the property.</typeparam>
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="expression">    The expression.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.TextAreaExtensions.TextAreaFor``2(NServiceKit.Html.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IDictionary{System.String,System.Object})">
             <summary>A HtmlHelper&lt;TModel&gt; extension method that text area for.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <typeparam name="TModel">   Type of the model.</typeparam>
             <typeparam name="TProperty">Type of the property.</typeparam>
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="expression">    The expression.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.TextAreaExtensions.TextAreaFor``2(NServiceKit.Html.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Int32,System.Int32,System.Object)">
             <summary>A HtmlHelper&lt;TModel&gt; extension method that text area for.</summary>
            
             <typeparam name="TModel">   Type of the model.</typeparam>
             <typeparam name="TProperty">Type of the property.</typeparam>
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="expression">    The expression.</param>
             <param name="rows">          The rows.</param>
             <param name="columns">       The columns.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.TextAreaExtensions.TextAreaFor``2(NServiceKit.Html.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
             <summary>A HtmlHelper&lt;TModel&gt; extension method that text area for.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <typeparam name="TModel">   Type of the model.</typeparam>
             <typeparam name="TProperty">Type of the property.</typeparam>
             <param name="htmlHelper">    The htmlHelper to act on.</param>
             <param name="expression">    The expression.</param>
             <param name="rows">          The rows.</param>
             <param name="columns">       The columns.</param>
             <param name="htmlAttributes">The HTML attributes.</param>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="T:NServiceKit.Markdown.MarkdownViewBase`1">
            <summary>A markdown view base.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="T:NServiceKit.Markdown.MarkdownViewBase">
            <summary>A markdown view base.</summary>
        </member>
        <member name="T:NServiceKit.Html.ITemplatePage">
            <summary>Interface for template page.</summary>
        </member>
        <member name="M:NServiceKit.Html.ITemplatePage.Get``1">
             <summary>Gets the get.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
            
             <returns>A T.</returns>
        </member>
        <member name="P:NServiceKit.Html.ITemplatePage.ViewEngine">
             <summary>Gets or sets the view engine.</summary>
            
             <value>The view engine.</value>
        </member>
        <member name="P:NServiceKit.Html.ITemplatePage.AppHost">
             <summary>Gets or sets the application host.</summary>
            
             <value>The application host.</value>
        </member>
        <member name="P:NServiceKit.Html.ITemplatePage.ScopeArgs">
             <summary>Gets or sets the scope arguments.</summary>
            
             <value>The scope arguments.</value>
        </member>
        <member name="M:NServiceKit.Markdown.MarkdownViewBase.#ctor">
            <summary>Initializes a new instance of the NServiceKit.Markdown.MarkdownViewBase class.</summary>
        </member>
        <member name="M:NServiceKit.Markdown.MarkdownViewBase.GetHtmlHelper">
            <summary>
            Ensure the same instance is used for subclasses
            </summary>
        </member>
        <member name="M:NServiceKit.Markdown.MarkdownViewBase.Init(NServiceKit.WebHost.Endpoints.IAppHost,NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownPage,System.Collections.Generic.Dictionary{System.String,System.Object},System.Object,System.Boolean)">
             <summary>Initialises this object.</summary>
            
             <param name="appHost">     The AppHost so you can access configuration and resolve dependencies, etc.</param>
             <param name="markdownPage">This precompiled Markdown page with Metadata.</param>
             <param name="scopeArgs">   All variables passed to and created by your page. The Response DTO is stored and accessible via the 'Model' variable.
             
             All variables and outputs created are stored in ScopeArgs which is what's available to your website template. The Generated page is stored in the 'Body' variable.
             </param>
             <param name="model">       .</param>
             <param name="renderHtml">  Whether HTML or Markdown output is requested.</param>
        </member>
        <member name="M:NServiceKit.Markdown.MarkdownViewBase.InitHelpers">
            <summary>
            Called before page is executed
            </summary>
        </member>
        <member name="M:NServiceKit.Markdown.MarkdownViewBase.OnLoad">
            <summary>
            Called after page is executed but before it's merged with the 
            website template if any.
            </summary>
        </member>
        <member name="M:NServiceKit.Markdown.MarkdownViewBase.Raw(System.String)">
            <summary>
            Don't HTML encode safe output
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.Markdown.MarkdownViewBase.Partial(System.String,System.Object)">
            <summary>
            Return the output of a different view with the specified name 
            using the supplied model
            </summary>
            <param name="viewName"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.Markdown.MarkdownViewBase.Get``1">
            <summary>
            Resolve registered Assemblies
            </summary>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.Markdown.MarkdownViewBase.Lower(System.String)">
             <summary>Lowers.</summary>
            
             <param name="name">The name.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.Markdown.MarkdownViewBase.Upper(System.String)">
             <summary>Uppers.</summary>
            
             <param name="name">The name.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.Markdown.MarkdownViewBase.Combine(System.String,System.String[])">
             <summary>Combines.</summary>
            
             <param name="separator">The separator.</param>
             <param name="parts">    A variable-length parameters list containing parts.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="P:NServiceKit.Markdown.MarkdownViewBase.ViewEngine">
            <summary>
            Reference to MarkdownViewEngine
            </summary>
        </member>
        <member name="P:NServiceKit.Markdown.MarkdownViewBase.AppHost">
            <summary>
            The AppHost so you can access configuration and resolve dependencies, etc.
            </summary>
        </member>
        <member name="P:NServiceKit.Markdown.MarkdownViewBase.MarkdownPage">
            <summary>
            This precompiled Markdown page with Metadata
            </summary>
        </member>
        <member name="P:NServiceKit.Markdown.MarkdownViewBase.Html">
            <summary>
            ASP.NET MVC's HtmlHelper
            </summary>
        </member>
        <member name="P:NServiceKit.Markdown.MarkdownViewBase.ScopeArgs">
            <summary>
            All variables passed to and created by your page. 
            The Response DTO is stored and accessible via the 'Model' variable.
             
            All variables and outputs created are stored in ScopeArgs which is what's available
            to your website template. The Generated page is stored in the 'Body' variable.
            </summary>
        </member>
        <member name="P:NServiceKit.Markdown.MarkdownViewBase.RenderHtml">
            <summary>
            Whether HTML or Markdown output is requested
            </summary>
        </member>
        <member name="P:NServiceKit.Markdown.MarkdownViewBase.Model">
            <summary>
            The Response DTO
            </summary>
        </member>
        <member name="M:NServiceKit.Markdown.MarkdownViewBase`1.GetHtmlHelper">
             <summary>Ensure the same instance is used for subclasses.</summary>
            
             <returns>The HTML helper.</returns>
        </member>
        <member name="M:NServiceKit.Markdown.MarkdownViewBase`1.Init(NServiceKit.WebHost.Endpoints.IAppHost,NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownPage,System.Collections.Generic.Dictionary{System.String,System.Object},System.Object,System.Boolean)">
             <summary>Initialises this object.</summary>
            
             <param name="appHost">     The AppHost so you can access configuration and resolve dependencies, etc.</param>
             <param name="markdownPage">This precompiled Markdown page with Metadata.</param>
             <param name="scopeArgs">   All variables passed to and created by your page. The Response DTO is stored and accessible via the 'Model' variable.
             
              All variables and outputs created are stored in ScopeArgs which is what's available to your website template. The Generated page is stored in the 'Body' variable.
             </param>
             <param name="model">       .</param>
             <param name="renderHtml">  Whether HTML or Markdown output is requested.</param>
        </member>
        <member name="P:NServiceKit.Markdown.MarkdownViewBase`1.Html">
             <summary>Gets the HTML.</summary>
            
             <value>The HTML.</value>
        </member>
        <member name="T:NServiceKit.Html.ModelMetadata">
            <summary>A model metadata.</summary>
        </member>
        <member name="F:NServiceKit.Html.ModelMetadata.DefaultOrder">
            <summary>The default order.</summary>
        </member>
        <member name="M:NServiceKit.Html.ModelMetadata.#ctor(NServiceKit.Html.ModelMetadataProvider,System.Type,System.Func{System.Object},System.Type,System.String)">
             <summary>Initializes a new instance of the NServiceKit.Html.ModelMetadata class.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <param name="provider">     The provider.</param>
             <param name="containerType">The type of the container.</param>
             <param name="modelAccessor">The model accessor.</param>
             <param name="modelType">    The type of the model.</param>
             <param name="propertyName"> The name of the property.</param>
        </member>
        <member name="M:NServiceKit.Html.ModelMetadata.FromLambdaExpression``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},NServiceKit.Html.ViewDataDictionary{``0})">
             <summary>From lambda expression.</summary>
            
             <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null.</exception>
             <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            
             <typeparam name="TParameter">Type of the parameter.</typeparam>
             <typeparam name="TValue">    Type of the value.</typeparam>
             <param name="expression">The expression.</param>
             <param name="viewData">  Information describing the view.</param>
            
             <returns>A ModelMetadata.</returns>
        </member>
        <member name="M:NServiceKit.Html.ModelMetadata.FromStringExpression(System.String,NServiceKit.Html.ViewDataDictionary)">
             <summary>From string expression.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <param name="expression">The expression.</param>
             <param name="viewData">  Information describing the view.</param>
            
             <returns>A ModelMetadata.</returns>
        </member>
        <member name="M:NServiceKit.Html.ModelMetadata.GetDisplayName">
             <summary>Gets display name.</summary>
            
             <returns>The display name.</returns>
        </member>
        <member name="M:NServiceKit.Html.ModelMetadata.GetSimpleDisplayText">
             <summary>Gets simple display text.</summary>
            
             <returns>The simple display text.</returns>
        </member>
        <member name="P:NServiceKit.Html.ModelMetadata.AdditionalValues">
             <summary>Gets the additional values.</summary>
            
             <value>The additional values.</value>
        </member>
        <member name="P:NServiceKit.Html.ModelMetadata.ContainerType">
             <summary>Gets the type of the container.</summary>
            
             <value>The type of the container.</value>
        </member>
        <member name="P:NServiceKit.Html.ModelMetadata.ConvertEmptyStringToNull">
             <summary>Gets or sets a value indicating whether the convert empty string to null.</summary>
            
             <value>true if convert empty string to null, false if not.</value>
        </member>
        <member name="P:NServiceKit.Html.ModelMetadata.DataTypeName">
             <summary>Gets or sets the name of the data type.</summary>
            
             <value>The name of the data type.</value>
        </member>
        <member name="P:NServiceKit.Html.ModelMetadata.Description">
             <summary>Gets or sets the description.</summary>
            
             <value>The description.</value>
        </member>
        <member name="P:NServiceKit.Html.ModelMetadata.DisplayFormatString">
             <summary>Gets or sets the display format string.</summary>
            
             <value>The display format string.</value>
        </member>
        <member name="P:NServiceKit.Html.ModelMetadata.DisplayName">
             <summary>Gets or sets the name of the display.</summary>
            
             <value>The name of the display.</value>
        </member>
        <member name="P:NServiceKit.Html.ModelMetadata.EditFormatString">
             <summary>Gets or sets the edit format string.</summary>
            
             <value>The edit format string.</value>
        </member>
        <member name="P:NServiceKit.Html.ModelMetadata.HideSurroundingHtml">
             <summary>Gets or sets a value indicating whether the surrounding HTML is hidden.</summary>
            
             <value>true if hide surrounding html, false if not.</value>
        </member>
        <member name="P:NServiceKit.Html.ModelMetadata.IsComplexType">
             <summary>Gets a value indicating whether this object is complex type.</summary>
            
             <value>true if this object is complex type, false if not.</value>
        </member>
        <member name="P:NServiceKit.Html.ModelMetadata.IsNullableValueType">
             <summary>Gets a value indicating whether this object is nullable value type.</summary>
            
             <value>true if this object is nullable value type, false if not.</value>
        </member>
        <member name="P:NServiceKit.Html.ModelMetadata.IsReadOnly">
             <summary>Gets or sets a value indicating whether this object is read only.</summary>
            
             <value>true if this object is read only, false if not.</value>
        </member>
        <member name="P:NServiceKit.Html.ModelMetadata.IsRequired">
             <summary>Gets or sets a value indicating whether this object is required.</summary>
            
             <value>true if this object is required, false if not.</value>
        </member>
        <member name="P:NServiceKit.Html.ModelMetadata.Model">
             <summary>Gets or sets the model.</summary>
            
             <value>The model.</value>
        </member>
        <member name="P:NServiceKit.Html.ModelMetadata.ModelType">
             <summary>Gets the type of the model.</summary>
            
             <value>The type of the model.</value>
        </member>
        <member name="P:NServiceKit.Html.ModelMetadata.NullDisplayText">
             <summary>Gets or sets the null display text.</summary>
            
             <value>The null display text.</value>
        </member>
        <member name="P:NServiceKit.Html.ModelMetadata.Order">
             <summary>Gets or sets the order.</summary>
            
             <value>The order.</value>
        </member>
        <member name="P:NServiceKit.Html.ModelMetadata.Properties">
             <summary>Gets the properties.</summary>
            
             <value>The properties.</value>
        </member>
        <member name="P:NServiceKit.Html.ModelMetadata.PropertyName">
             <summary>Gets the name of the property.</summary>
            
             <value>The name of the property.</value>
        </member>
        <member name="P:NServiceKit.Html.ModelMetadata.Provider">
             <summary>Gets or sets the provider.</summary>
            
             <value>The provider.</value>
        </member>
        <member name="P:NServiceKit.Html.ModelMetadata.RequestValidationEnabled">
             <summary>Gets or sets a value indicating whether the request validation is enabled.</summary>
            
             <value>true if request validation enabled, false if not.</value>
        </member>
        <member name="P:NServiceKit.Html.ModelMetadata.ShortDisplayName">
             <summary>Gets or sets the name of the short display.</summary>
            
             <value>The name of the short display.</value>
        </member>
        <member name="P:NServiceKit.Html.ModelMetadata.ShowForDisplay">
             <summary>Gets or sets a value indicating whether for display is shown.</summary>
            
             <value>true if show for display, false if not.</value>
        </member>
        <member name="P:NServiceKit.Html.ModelMetadata.ShowForEdit">
             <summary>Gets or sets a value indicating whether for edit is shown.</summary>
            
             <value>true if show for edit, false if not.</value>
        </member>
        <member name="P:NServiceKit.Html.ModelMetadata.SimpleDisplayText">
             <summary>Gets or sets the simple display text.</summary>
            
             <value>The simple display text.</value>
        </member>
        <member name="P:NServiceKit.Html.ModelMetadata.TemplateHint">
             <summary>Gets or sets the template hint.</summary>
            
             <value>The template hint.</value>
        </member>
        <member name="P:NServiceKit.Html.ModelMetadata.Watermark">
             <summary>Gets or sets the watermark.</summary>
            
             <value>The watermark.</value>
        </member>
        <member name="T:NServiceKit.Html.ModelMetadataProviders">
            <summary>A model metadata providers.</summary>
        </member>
        <member name="P:NServiceKit.Html.ModelMetadataProviders.Current">
             <summary>Gets or sets the current.</summary>
            
             <value>The current.</value>
        </member>
        <member name="T:NServiceKit.Html.RouteValueDictionary">
            <summary>Dictionary of route values.</summary>
        </member>
        <member name="M:NServiceKit.Html.RouteValueDictionary.#ctor">
            <summary>Initializes a new instance of the NServiceKit.Html.RouteValueDictionary class.</summary>
        </member>
        <member name="M:NServiceKit.Html.RouteValueDictionary.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
             <summary>Initializes a new instance of the NServiceKit.Html.RouteValueDictionary class.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:NServiceKit.Html.RouteValueDictionary.#ctor(System.Object)">
             <summary>Initializes a new instance of the NServiceKit.Html.RouteValueDictionary class.</summary>
            
             <param name="values">The values.</param>
        </member>
        <member name="M:NServiceKit.Html.RouteValueDictionary.Add(System.String,System.Object)">
             <summary>Adds key.</summary>
            
             <param name="key">  The key.</param>
             <param name="value">The value.</param>
        </member>
        <member name="M:NServiceKit.Html.RouteValueDictionary.Clear">
            <summary>Clears this object to its blank/initial state.</summary>
        </member>
        <member name="M:NServiceKit.Html.RouteValueDictionary.ContainsKey(System.String)">
             <summary>Query if 'key' contains key.</summary>
            
             <param name="key">The key.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.Html.RouteValueDictionary.ContainsValue(System.Object)">
             <summary>Query if 'value' contains value.</summary>
            
             <param name="value">The value.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.Html.RouteValueDictionary.GetEnumerator">
             <summary>Gets the enumerator.</summary>
            
             <returns>The enumerator.</returns>
        </member>
        <member name="M:NServiceKit.Html.RouteValueDictionary.Remove(System.String)">
             <summary>Removes the given key.</summary>
            
             <param name="key">The key to remove.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.Html.RouteValueDictionary.TryGetValue(System.String,System.Object@)">
             <summary>Attempts to get value from the given data.</summary>
            
             <param name="key">  The key.</param>
             <param name="value">The value.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="P:NServiceKit.Html.RouteValueDictionary.Count">
             <summary>Gets the number of. </summary>
            
             <value>The count.</value>
        </member>
        <member name="P:NServiceKit.Html.RouteValueDictionary.Item(System.String)">
             <summary>Indexer to get or set items within this collection using array index syntax.</summary>
            
             <param name="key">The key.</param>
            
             <returns>The indexed item.</returns>
        </member>
        <member name="P:NServiceKit.Html.RouteValueDictionary.Keys">
             <summary>Gets the keys.</summary>
            
             <value>The keys.</value>
        </member>
        <member name="P:NServiceKit.Html.RouteValueDictionary.Values">
             <summary>Gets the values.</summary>
            
             <value>The values.</value>
        </member>
        <member name="F:NServiceKit.Html.RouteValueDictionary.CaseInsensitiveStringComparer.Instance">
            <summary>The instance.</summary>
        </member>
        <member name="M:NServiceKit.Html.RouteValueDictionary.CaseInsensitiveStringComparer.GetHashCode(System.String)">
             <summary>Returns a hash code for this object.</summary>
            
             <param name="obj">The object.</param>
            
             <returns>A hash code for this object.</returns>
        </member>
        <member name="M:NServiceKit.Html.RouteValueDictionary.CaseInsensitiveStringComparer.Equals(System.String,System.String)">
             <summary>Tests if two string objects are considered equal.</summary>
            
             <param name="obj1">String to be compared.</param>
             <param name="obj2">String to be compared.</param>
            
             <returns>true if the objects are considered equal, false if they are not.</returns>
        </member>
        <member name="T:NServiceKit.Html.TagBuilder">
            <summary>A tag builder.</summary>
        </member>
        <member name="F:NServiceKit.Html.TagBuilder.IdAttributeDotReplacement">
            <summary>The identifier attribute dot replacement.</summary>
        </member>
        <member name="M:NServiceKit.Html.TagBuilder.#ctor(System.String)">
             <summary>Initializes a new instance of the NServiceKit.Html.TagBuilder class.</summary>
            
             <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or illegal values.</exception>
            
             <param name="tagName">The name of the tag.</param>
        </member>
        <member name="M:NServiceKit.Html.TagBuilder.AddCssClass(System.String)">
             <summary>Adds the CSS class.</summary>
            
             <param name="value">The value.</param>
        </member>
        <member name="M:NServiceKit.Html.TagBuilder.CreateSanitizedId(System.String)">
             <summary>Creates sanitized identifier.</summary>
            
             <param name="originalId">Identifier for the original.</param>
            
             <returns>The new sanitized identifier.</returns>
        </member>
        <member name="M:NServiceKit.Html.TagBuilder.GenerateId(System.String)">
             <summary>Generates an identifier.</summary>
            
             <param name="name">The name.</param>
        </member>
        <member name="M:NServiceKit.Html.TagBuilder.MergeAttribute(System.String,System.String)">
             <summary>Merge attribute.</summary>
            
             <param name="key">  The key.</param>
             <param name="value">The value.</param>
        </member>
        <member name="M:NServiceKit.Html.TagBuilder.MergeAttribute(System.String,System.String,System.Boolean)">
             <summary>Merge attribute.</summary>
            
             <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or illegal values.</exception>
            
             <param name="key">            The key.</param>
             <param name="value">          The value.</param>
             <param name="replaceExisting">true to replace existing.</param>
        </member>
        <member name="M:NServiceKit.Html.TagBuilder.MergeAttributes``2(System.Collections.Generic.IDictionary{``0,``1})">
             <summary>Merge attributes.</summary>
            
             <typeparam name="TKey">  Type of the key.</typeparam>
             <typeparam name="TValue">Type of the value.</typeparam>
             <param name="attributes">The attributes.</param>
        </member>
        <member name="M:NServiceKit.Html.TagBuilder.MergeAttributes``2(System.Collections.Generic.IDictionary{``0,``1},System.Boolean)">
             <summary>Merge attributes.</summary>
            
             <typeparam name="TKey">  Type of the key.</typeparam>
             <typeparam name="TValue">Type of the value.</typeparam>
             <param name="attributes">     The attributes.</param>
             <param name="replaceExisting">true to replace existing.</param>
        </member>
        <member name="M:NServiceKit.Html.TagBuilder.SetInnerText(System.String)">
             <summary>Sets inner text.</summary>
            
             <param name="innerText">The inner text.</param>
        </member>
        <member name="M:NServiceKit.Html.TagBuilder.ToString">
             <summary>Returns a string that represents the current object.</summary>
            
             <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:NServiceKit.Html.TagBuilder.ToString(NServiceKit.Html.TagRenderMode)">
             <summary>Convert this object into a string representation.</summary>
            
             <param name="renderMode">The render mode.</param>
            
             <returns>A string that represents this object.</returns>
        </member>
        <member name="P:NServiceKit.Html.TagBuilder.Attributes">
             <summary>Gets the attributes.</summary>
            
             <value>The attributes.</value>
        </member>
        <member name="P:NServiceKit.Html.TagBuilder.InnerHtml">
             <summary>Gets or sets the inner HTML.</summary>
            
             <value>The inner HTML.</value>
        </member>
        <member name="P:NServiceKit.Html.TagBuilder.TagName">
             <summary>Gets the name of the tag.</summary>
            
             <value>The name of the tag.</value>
        </member>
        <member name="M:NServiceKit.Html.TagBuilder.Html401IdUtil.IsLetter(System.Char)">
             <summary>Query if 'c' is letter.</summary>
            
             <param name="c">The character.</param>
            
             <returns>true if letter, false if not.</returns>
        </member>
        <member name="M:NServiceKit.Html.TagBuilder.Html401IdUtil.IsValidIdCharacter(System.Char)">
             <summary>Query if 'c' is valid identifier character.</summary>
            
             <param name="c">The character.</param>
            
             <returns>true if valid identifier character, false if not.</returns>
        </member>
        <member name="F:NServiceKit.Html.TypeHelpers.MsCorLibAssembly">
            <summary>The milliseconds cor library assembly.</summary>
        </member>
        <member name="F:NServiceKit.Html.TypeHelpers.SystemWebAssembly">
            <summary>The system web assembly.</summary>
        </member>
        <member name="M:NServiceKit.Html.TypeHelpers.CreateDelegate``1(System.Type,System.String,System.Object)">
             <summary>Creates a delegate.</summary>
            
             <typeparam name="TDelegate">Type of the delegate.</typeparam>
             <param name="targetType">   Type of the target.</param>
             <param name="methodName">   Name of the method.</param>
             <param name="thisParameter">this parameter.</param>
            
             <returns>The new delegate.</returns>
        </member>
        <member name="M:NServiceKit.Html.TypeHelpers.CreateTryGetValueDelegate(System.Type)">
             <summary>Creates try get value delegate.</summary>
            
             <param name="targetType">Type of the target.</param>
            
             <returns>The new try get value delegate.</returns>
        </member>
        <member name="M:NServiceKit.Html.TypeHelpers.ExtractGenericInterface(System.Type,System.Type)">
             <summary>Extracts the generic interface.</summary>
            
             <param name="queryType">    Type of the query.</param>
             <param name="interfaceType">Type of the interface.</param>
            
             <returns>The extracted generic interface.</returns>
        </member>
        <member name="M:NServiceKit.Html.TypeHelpers.GetDefaultValue(System.Type)">
             <summary>Gets default value.</summary>
            
             <param name="type">The type.</param>
            
             <returns>The default value.</returns>
        </member>
        <member name="M:NServiceKit.Html.TypeHelpers.IsCompatibleObject``1(System.Object)">
             <summary>Query if 'value' is compatible object.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="value">The value.</param>
            
             <returns>true if compatible object, false if not.</returns>
        </member>
        <member name="M:NServiceKit.Html.TypeHelpers.IsNullableValueType(System.Type)">
             <summary>Query if 'type' is nullable value type.</summary>
            
             <param name="type">The type.</param>
            
             <returns>true if nullable value type, false if not.</returns>
        </member>
        <member name="M:NServiceKit.Html.TypeHelpers.TypeAllowsNullValue(System.Type)">
             <summary>Type allows null value.</summary>
            
             <param name="type">The type.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="T:NServiceKit.Html.UrlHelper">
            <summary>An URL helper.</summary>
        </member>
        <member name="M:NServiceKit.Html.UrlHelper.Content(System.String)">
             <summary>Contents the given document.</summary>
            
             <param name="url">URL of the document.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="T:NServiceKit.Html.ViewDataDictionary">
            <summary>Dictionary of view data.</summary>
        </member>
        <member name="M:NServiceKit.Html.ViewDataDictionary.#ctor">
            <summary>Initializes a new instance of the NServiceKit.Html.ViewDataDictionary class.</summary>
        </member>
        <member name="M:NServiceKit.Html.ViewDataDictionary.#ctor(System.Object)">
             <summary>Initializes a new instance of the NServiceKit.Html.ViewDataDictionary class.</summary>
            
             <param name="model">The model.</param>
        </member>
        <member name="M:NServiceKit.Html.ViewDataDictionary.#ctor(NServiceKit.Html.ViewDataDictionary)">
             <summary>Initializes a new instance of the NServiceKit.Html.ViewDataDictionary class.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:NServiceKit.Html.ViewDataDictionary.PopulateModelState">
             <summary>Populate model state.</summary>
            
             <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
        </member>
        <member name="M:NServiceKit.Html.ViewDataDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
             <summary>Adds key.</summary>
            
             <param name="item">The item to remove.</param>
        </member>
        <member name="M:NServiceKit.Html.ViewDataDictionary.Add(System.String,System.Object)">
             <summary>Adds key.</summary>
            
             <param name="key">  The key.</param>
             <param name="value">The value.</param>
        </member>
        <member name="M:NServiceKit.Html.ViewDataDictionary.Clear">
            <summary>Clears this object to its blank/initial state.</summary>
        </member>
        <member name="M:NServiceKit.Html.ViewDataDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
             <summary>Query if this object contains the given item.</summary>
            
             <param name="item">The item to remove.</param>
            
             <returns>true if the object is in this collection, false if not.</returns>
        </member>
        <member name="M:NServiceKit.Html.ViewDataDictionary.ContainsKey(System.String)">
             <summary>Query if 'key' contains key.</summary>
            
             <param name="key">The key.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.Html.ViewDataDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
             <summary>Copies to.</summary>
            
             <param name="array">     The array.</param>
             <param name="arrayIndex">Zero-based index of the array.</param>
        </member>
        <member name="M:NServiceKit.Html.ViewDataDictionary.Eval(System.String)">
             <summary>Evals.</summary>
            
             <param name="expression">The expression.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.Html.ViewDataDictionary.Eval(System.String,System.String)">
             <summary>Evals.</summary>
            
             <param name="expression">The expression.</param>
             <param name="format">    Describes the format to use.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.Html.ViewDataDictionary.GetEnumerator">
             <summary>Gets the enumerator.</summary>
            
             <returns>The enumerator.</returns>
        </member>
        <member name="M:NServiceKit.Html.ViewDataDictionary.GetViewDataInfo(System.String)">
             <summary>Gets view data information.</summary>
            
             <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or illegal values.</exception>
            
             <param name="expression">The expression.</param>
            
             <returns>The view data information.</returns>
        </member>
        <member name="M:NServiceKit.Html.ViewDataDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
             <summary>Removes the given key.</summary>
            
             <param name="item">The item to remove.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.Html.ViewDataDictionary.Remove(System.String)">
             <summary>Removes the given key.</summary>
            
             <param name="key">The key to remove.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.Html.ViewDataDictionary.SetModel(System.Object)">
             <summary>
             This method will execute before the derived type's instance constructor executes. Derived types must be aware of this and should plan accordingly. For example, the logic in SetModel() should be
             simple enough so as not to depend on the "this" pointer referencing a fully constructed object.
             </summary>
            
             <param name="value">The value.</param>
        </member>
        <member name="M:NServiceKit.Html.ViewDataDictionary.TryGetValue(System.String,System.Object@)">
             <summary>Attempts to get value from the given data.</summary>
            
             <param name="key">  The key.</param>
             <param name="value">The value.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.Html.ViewDataDictionary.AsRawJson">
             <summary>Converts this object to a raw JSON.</summary>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="M:NServiceKit.Html.ViewDataDictionary.AsRaw">
             <summary>Converts this object to a raw.</summary>
            
             <returns>A MvcHtmlString.</returns>
        </member>
        <member name="P:NServiceKit.Html.ViewDataDictionary.Count">
             <summary>Gets the number of. </summary>
            
             <value>The count.</value>
        </member>
        <member name="P:NServiceKit.Html.ViewDataDictionary.IsReadOnly">
             <summary>Gets a value indicating whether this object is read only.</summary>
            
             <value>true if this object is read only, false if not.</value>
        </member>
        <member name="P:NServiceKit.Html.ViewDataDictionary.Keys">
             <summary>Gets the keys.</summary>
            
             <value>The keys.</value>
        </member>
        <member name="P:NServiceKit.Html.ViewDataDictionary.Model">
             <summary>Gets or sets the model.</summary>
            
             <value>The model.</value>
        </member>
        <member name="P:NServiceKit.Html.ViewDataDictionary.ModelMetadata">
             <summary>Gets or sets the model metadata.</summary>
            
             <value>The model metadata.</value>
        </member>
        <member name="P:NServiceKit.Html.ViewDataDictionary.ModelState">
             <summary>Gets the state of the model.</summary>
            
             <value>The model state.</value>
        </member>
        <member name="P:NServiceKit.Html.ViewDataDictionary.Item(System.String)">
             <summary>Indexer to get or set items within this collection using array index syntax.</summary>
            
             <param name="key">The key.</param>
            
             <returns>The indexed item.</returns>
        </member>
        <member name="P:NServiceKit.Html.ViewDataDictionary.TemplateInfo">
             <summary>Gets or sets information describing the template.</summary>
            
             <value>Information describing the template.</value>
        </member>
        <member name="P:NServiceKit.Html.ViewDataDictionary.Values">
             <summary>Gets the values.</summary>
            
             <value>The values.</value>
        </member>
        <member name="M:NServiceKit.Html.ViewDataDictionary.ViewDataEvaluator.Eval(NServiceKit.Html.ViewDataDictionary,System.String)">
             <summary>Evals.</summary>
            
             <param name="vdd">       The vdd.</param>
             <param name="expression">The expression.</param>
            
             <returns>A ViewDataInfo.</returns>
        </member>
        <member name="F:NServiceKit.Html.ViewDataDictionary.ViewDataEvaluator.ExpressionPair.Left">
            <summary>The left.</summary>
        </member>
        <member name="F:NServiceKit.Html.ViewDataDictionary.ViewDataEvaluator.ExpressionPair.Right">
            <summary>The right.</summary>
        </member>
        <member name="M:NServiceKit.Html.ViewDataDictionary.ViewDataEvaluator.ExpressionPair.#ctor(System.String,System.String)">
             <summary>Initializes a new instance of the NServiceKit.Html.ViewDataDictionary.ViewDataEvaluator class.</summary>
            
             <param name="left"> The left.</param>
             <param name="right">The right.</param>
        </member>
        <member name="T:NServiceKit.Html.ViewDataDictionary`1">
            <summary>Dictionary of view data.</summary>
            <typeparam name="TModel">Type of the model.</typeparam>
        </member>
        <member name="M:NServiceKit.Html.ViewDataDictionary`1.#ctor">
            <summary>Initializes a new instance of the NServiceKit.Html.ViewDataDictionary&lt;TModel&gt; class.</summary>
        </member>
        <member name="M:NServiceKit.Html.ViewDataDictionary`1.#ctor(`0)">
             <summary>Initializes a new instance of the NServiceKit.Html.ViewDataDictionary&lt;TModel&gt; class.</summary>
            
             <param name="model">The model.</param>
        </member>
        <member name="M:NServiceKit.Html.ViewDataDictionary`1.#ctor(NServiceKit.Html.ViewDataDictionary)">
             <summary>Initializes a new instance of the NServiceKit.Html.ViewDataDictionary&lt;TModel&gt; class.</summary>
            
             <param name="viewDataDictionary">Dictionary of view data.</param>
        </member>
        <member name="M:NServiceKit.Html.ViewDataDictionary`1.SetModel(System.Object)">
             <summary>Sets a model.</summary>
            
             <exception>Thrown when an exception error condition occurs.</exception>
            
             <param name="value">The value.</param>
        </member>
        <member name="P:NServiceKit.Html.ViewDataDictionary`1.Model">
             <summary>Gets or sets the model.</summary>
            
             <value>The model.</value>
        </member>
        <member name="P:NServiceKit.Html.ViewDataDictionary`1.ModelMetadata">
             <summary>Gets or sets the model metadata.</summary>
            
             <value>The model metadata.</value>
        </member>
        <member name="T:NServiceKit.Html.ViewDataInfo">
            <summary>Information about the view data.</summary>
        </member>
        <member name="M:NServiceKit.Html.ViewDataInfo.#ctor">
            <summary>Initializes a new instance of the NServiceKit.Html.ViewDataInfo class.</summary>
        </member>
        <member name="M:NServiceKit.Html.ViewDataInfo.#ctor(System.Func{System.Object})">
             <summary>Initializes a new instance of the NServiceKit.Html.ViewDataInfo class.</summary>
            
             <param name="valueAccessor">The value accessor.</param>
        </member>
        <member name="P:NServiceKit.Html.ViewDataInfo.Container">
             <summary>Gets or sets the container.</summary>
            
             <value>The container.</value>
        </member>
        <member name="P:NServiceKit.Html.ViewDataInfo.PropertyDescriptor">
             <summary>Gets or sets the property descriptor.</summary>
            
             <value>The property descriptor.</value>
        </member>
        <member name="P:NServiceKit.Html.ViewDataInfo.Value">
             <summary>Gets or sets the value.</summary>
            
             <value>The value.</value>
        </member>
        <member name="T:NServiceKit.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NServiceKit.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NServiceKit.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NServiceKit.Properties.Resources.Registration_CantRegisterContainer">
            <summary>
              Looks up a localized string similar to Container service is built-in and read-only..
            </summary>
        </member>
        <member name="P:NServiceKit.Properties.Resources.Registration_IncompatibleAsType">
            <summary>
              Looks up a localized string similar to Service type {0} does not inherit or implement {1}..
            </summary>
        </member>
        <member name="P:NServiceKit.Properties.Resources.ResolutionException_MissingNamedType">
            <summary>
              Looks up a localized string similar to Required dependency of type {0} named &apos;{1}&apos; could not be resolved..
            </summary>
        </member>
        <member name="P:NServiceKit.Properties.Resources.ResolutionException_MissingType">
            <summary>
              Looks up a localized string similar to Required dependency of type {0} could not be resolved..
            </summary>
        </member>
        <member name="P:NServiceKit.Properties.Resources.ResolutionException_UnknownScope">
            <summary>
              Looks up a localized string similar to Unknown scope..
            </summary>
        </member>
        <member name="T:NServiceKit.ServiceHost.FileExtensions">
            <summary>A file extensions.</summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.FileExtensions.SaveTo(NServiceKit.ServiceHost.IFile,System.String)">
             <summary>An IFile extension method that saves to.</summary>
            
             <param name="file">    The file to act on.</param>
             <param name="filePath">Full pathname of the file.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.FileExtensions.WriteTo(NServiceKit.ServiceHost.IFile,System.IO.Stream)">
             <summary>An IFile extension method that writes to.</summary>
            
             <param name="file">  The file to act on.</param>
             <param name="stream">The stream.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.FileExtensions.MapServerPath(System.String)">
             <summary>A string extension method that map server path.</summary>
            
             <param name="relativePath">The relativePath to act on.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.FileExtensions.IsRelativePath(System.String)">
             <summary>A string extension method that query if 'relativeOrAbsolutePath' is relative path.</summary>
            
             <param name="relativeOrAbsolutePath">The relativeOrAbsolutePath to act on.</param>
            
             <returns>true if relative path, false if not.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.FileExtensions.ReadFully(System.IO.FileInfo)">
             <summary>A FileInfo extension method that reads a fully.</summary>
            
             <param name="file">The file to act on.</param>
            
             <returns>An array of byte.</returns>
        </member>
        <member name="T:NServiceKit.ServiceHost.HttpFile">
            <summary>A HTTP file.</summary>
        </member>
        <member name="P:NServiceKit.ServiceHost.HttpFile.FileName">
             <summary>Gets or sets the filename of the file.</summary>
            
             <value>The name of the file.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.HttpFile.ContentLength">
             <summary>Gets or sets the length of the content.</summary>
            
             <value>The length of the content.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.HttpFile.ContentType">
             <summary>Gets or sets the type of the content.</summary>
            
             <value>The type of the content.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.HttpFile.InputStream">
             <summary>Gets or sets the input stream.</summary>
            
             <value>The input stream.</value>
        </member>
        <member name="T:NServiceKit.ServiceHost.HttpRequestAuthentication">
            <summary>A HTTP request authentication.</summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.HttpRequestAuthentication.GetBasicAuth(NServiceKit.ServiceHost.IHttpRequest)">
             <summary>An IHttpRequest extension method that gets basic authentication.</summary>
            
             <param name="httpReq">The httpReq to act on.</param>
            
             <returns>The basic authentication.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.HttpRequestAuthentication.GetBasicAuthUserAndPassword(NServiceKit.ServiceHost.IHttpRequest)">
             <summary>An IHttpRequest extension method that gets basic authentication user and password.</summary>
            
             <param name="httpReq">The httpReq to act on.</param>
            
             <returns>The basic authentication user and password.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.HttpRequestAuthentication.GetDigestAuth(NServiceKit.ServiceHost.IHttpRequest)">
             <summary>An IHttpRequest extension method that gets digest authentication.</summary>
            
             <param name="httpReq">The httpReq to act on.</param>
            
             <returns>The digest authentication.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.HttpRequestAuthentication.GetCookieValue(NServiceKit.ServiceHost.IHttpRequest,System.String)">
             <summary>An IHttpRequest extension method that gets cookie value.</summary>
            
             <param name="httpReq">   The httpReq to act on.</param>
             <param name="cookieName">Name of the cookie.</param>
            
             <returns>The cookie value.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.HttpRequestAuthentication.GetItemStringValue(NServiceKit.ServiceHost.IHttpRequest,System.String)">
             <summary>An IHttpRequest extension method that gets item string value.</summary>
            
             <param name="httpReq"> The httpReq to act on.</param>
             <param name="itemName">Name of the item.</param>
            
             <returns>The item string value.</returns>
        </member>
        <member name="T:NServiceKit.ServiceHost.HttpRequestContext">
            <summary>A HTTP request context.</summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.HttpRequestContext.#ctor(System.Object)">
             <summary>Initializes a new instance of the NServiceKit.ServiceHost.HttpRequestContext class.</summary>
            
             <param name="dto">The dto.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.HttpRequestContext.#ctor(System.Object,NServiceKit.ServiceHost.EndpointAttributes)">
             <summary>Initializes a new instance of the NServiceKit.ServiceHost.HttpRequestContext class.</summary>
            
             <param name="dto">               The dto.</param>
             <param name="endpointAttributes">The endpoint attributes.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.HttpRequestContext.#ctor(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse,System.Object)">
             <summary>Initializes a new instance of the NServiceKit.ServiceHost.HttpRequestContext class.</summary>
            
             <param name="httpReq">The HTTP request.</param>
             <param name="httpRes">The HTTP resource.</param>
             <param name="dto">    The dto.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.HttpRequestContext.#ctor(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse,System.Object,NServiceKit.ServiceHost.EndpointAttributes)">
             <summary>Initializes a new instance of the NServiceKit.ServiceHost.HttpRequestContext class.</summary>
            
             <param name="httpReq">           The HTTP request.</param>
             <param name="httpRes">           The HTTP resource.</param>
             <param name="dto">               The dto.</param>
             <param name="endpointAttributes">The endpoint attributes.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.HttpRequestContext.#ctor(System.Object,NServiceKit.Configuration.IFactoryProvider)">
             <summary>Initializes a new instance of the NServiceKit.ServiceHost.HttpRequestContext class.</summary>
            
             <param name="requestDto">The request dto.</param>
             <param name="factory">   The factory.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.HttpRequestContext.#ctor(System.Object,NServiceKit.ServiceHost.EndpointAttributes,NServiceKit.Configuration.IFactoryProvider)">
             <summary>Initializes a new instance of the NServiceKit.ServiceHost.HttpRequestContext class.</summary>
            
             <param name="dto">               The dto.</param>
             <param name="endpointAttributes">The endpoint attributes.</param>
             <param name="factory">           The factory.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.HttpRequestContext.Get``1">
             <summary>Gets the get.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
            
             <returns>A T.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.HttpRequestContext.GetHeader(System.String)">
             <summary>Gets a header.</summary>
            
             <param name="headerName">Name of the header.</param>
            
             <returns>The header.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.HttpRequestContext.GetIpAddress">
             <summary>Gets IP address.</summary>
            
             <returns>The IP address.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.HttpRequestContext.Dispose">
            <summary>Releases the unmanaged resources used by the NServiceKit.ServiceHost.HttpRequestContext and optionally releases the managed resources.</summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.HttpRequestContext.Dispose(System.Boolean)">
             <summary>Releases the unmanaged resources used by the NServiceKit.ServiceHost.HttpRequestContext and optionally releases the managed resources.</summary>
            
             <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="P:NServiceKit.ServiceHost.HttpRequestContext.AutoDispose">
             <summary>Gets or sets a value indicating whether the automatic dispose.</summary>
            
             <value>true if automatic dispose, false if not.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.HttpRequestContext.Dto">
             <summary>Gets or sets the dto.</summary>
            
             <value>The dto.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.HttpRequestContext.Cookies">
             <summary>Gets the cookies.</summary>
            
             <value>The cookies.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.HttpRequestContext.EndpointAttributes">
             <summary>Gets the endpoint attributes.</summary>
            
             <value>The endpoint attributes.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.HttpRequestContext.RequestAttributes">
             <summary>Gets the request attributes.</summary>
            
             <value>The request attributes.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.HttpRequestContext.ContentType">
             <summary>Gets the type of the content.</summary>
            
             <value>The type of the content.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.HttpRequestContext.ResponseContentType">
             <summary>Gets or sets the type of the response content.</summary>
            
             <value>The type of the response content.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.HttpRequestContext.Factory">
             <summary>Gets or sets the factory.</summary>
            
             <value>The factory.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.HttpRequestContext.MimeType">
             <summary>Gets the type of the mime.</summary>
            
             <value>The type of the mime.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.HttpRequestContext.CompressionType">
             <summary>Gets the type of the compression.</summary>
            
             <value>The type of the compression.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.HttpRequestContext.AbsoluteUri">
             <summary>Gets URI of the absolute.</summary>
            
             <value>The absolute URI.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.HttpRequestContext.PathInfo">
             <summary>Gets information describing the path.</summary>
            
             <value>Information describing the path.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.HttpRequestContext.Files">
             <summary>Gets or sets the files.</summary>
            
             <value>The files.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.HttpRequestContext.IpAddress">
             <summary>Gets the IP address.</summary>
            
             <value>The IP address.</value>
        </member>
        <member name="T:NServiceKit.ServiceHost.HttpRequestExtensions">
            <summary>A HTTP request extensions.</summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.HttpRequestExtensions.GetItemOrCookie(NServiceKit.ServiceHost.IHttpRequest,System.String)">
            <summary>
            Gets string value from Items[name] then Cookies[name] if exists.
            Useful when *first* setting the users response cookie in the request filter.
            To access the value for this initial request you need to set it in Items[].
            </summary>
            <returns>string value or null if it doesn't exist</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.HttpRequestExtensions.GetParam(NServiceKit.ServiceHost.IHttpRequest,System.String)">
            <summary>
            Gets request paramater string value by looking in the following order:
            - QueryString[name]
            - FormData[name]
            - Cookies[name]
            - Items[name]
            </summary>
            <returns>string value or null if it doesn't exist</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.HttpRequestExtensions.GetParentAbsolutePath(NServiceKit.ServiceHost.IHttpRequest)">
             <summary>An IHttpRequest extension method that gets the parent absolute path.</summary>
            
             <param name="httpReq">The httpReq to act on.</param>
            
             <returns>The parent absolute path.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.HttpRequestExtensions.GetAbsolutePath(NServiceKit.ServiceHost.IHttpRequest)">
             <summary>An IHttpRequest extension method that gets absolute path.</summary>
            
             <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or illegal values.</exception>
            
             <param name="httpReq">The httpReq to act on.</param>
            
             <returns>The absolute path.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.HttpRequestExtensions.GetParentPathUrl(NServiceKit.ServiceHost.IHttpRequest)">
             <summary>An IHttpRequest extension method that gets the parent path URL.</summary>
            
             <param name="httpReq">The httpReq to act on.</param>
            
             <returns>The parent path URL.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.HttpRequestExtensions.GetPathUrl(NServiceKit.ServiceHost.IHttpRequest)">
             <summary>An IHttpRequest extension method that gets path URL.</summary>
            
             <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or illegal values.</exception>
            
             <param name="httpReq">The httpReq to act on.</param>
            
             <returns>The path URL.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.HttpRequestExtensions.GetUrlHostName(NServiceKit.ServiceHost.IHttpRequest)">
             <summary>An IHttpRequest extension method that gets URL host name.</summary>
            
             <param name="httpReq">The httpReq to act on.</param>
            
             <returns>The URL host name.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.HttpRequestExtensions.GetPhysicalPath(NServiceKit.ServiceHost.IHttpRequest)">
             <summary>An IHttpRequest extension method that gets physical path.</summary>
            
             <param name="httpReq">The httpReq to act on.</param>
            
             <returns>The physical path.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.HttpRequestExtensions.GetApplicationUrl(System.Web.HttpRequest)">
             <summary>An IHttpRequest extension method that gets application URL.</summary>
            
             <param name="httpReq">The httpReq to act on.</param>
            
             <returns>The application URL.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.HttpRequestExtensions.GetApplicationUrl(NServiceKit.ServiceHost.IHttpRequest)">
             <summary>An IHttpRequest extension method that gets application URL.</summary>
            
             <param name="httpReq">The httpReq to act on.</param>
            
             <returns>The application URL.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.HttpRequestExtensions.GetHttpMethodOverride(NServiceKit.ServiceHost.IHttpRequest)">
             <summary>An IHttpRequest extension method that gets HTTP method override.</summary>
            
             <param name="httpReq">The httpReq to act on.</param>
            
             <returns>The HTTP method override.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.HttpRequestExtensions.GetFormatModifier(NServiceKit.ServiceHost.IHttpRequest)">
             <summary>An IHttpRequest extension method that gets format modifier.</summary>
            
             <param name="httpReq">The httpReq to act on.</param>
            
             <returns>The format modifier.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.HttpRequestExtensions.HasNotModifiedSince(NServiceKit.ServiceHost.IHttpRequest,System.Nullable{System.DateTime})">
             <summary>An IHttpRequest extension method that query if 'httpReq' has not modified since.</summary>
            
             <param name="httpReq"> The httpReq to act on.</param>
             <param name="dateTime">The date time.</param>
            
             <returns>true if not modified since, false if not.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.HttpRequestExtensions.DidReturn304NotModified(NServiceKit.ServiceHost.IHttpRequest,System.Nullable{System.DateTime},NServiceKit.ServiceHost.IHttpResponse)">
             <summary>An IHttpRequest extension method that did return 304 not modified.</summary>
            
             <param name="httpReq"> The httpReq to act on.</param>
             <param name="dateTime">The date time.</param>
             <param name="httpRes"> The HTTP resource.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.HttpRequestExtensions.GetJsonpCallback(NServiceKit.ServiceHost.IHttpRequest)">
             <summary>An IHttpRequest extension method that callback, called when the get jsonp.</summary>
            
             <param name="httpReq">The httpReq to act on.</param>
            
             <returns>The jsonp callback.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.HttpRequestExtensions.CookiesAsDictionary(NServiceKit.ServiceHost.IHttpRequest)">
             <summary>An IHttpRequest extension method that cookies as dictionary.</summary>
            
             <param name="httpReq">The httpReq to act on.</param>
            
             <returns>A Dictionary&lt;string,string&gt;</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.HttpRequestExtensions.ToStatusCode(System.Exception)">
             <summary>An Exception extension method that converts an ex to the status code.</summary>
            
             <param name="ex">The ex to act on.</param>
            
             <returns>ex as an int.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.HttpRequestExtensions.ToErrorCode(System.Exception)">
             <summary>An Exception extension method that converts an ex to an error code.</summary>
            
             <param name="ex">The ex to act on.</param>
            
             <returns>ex as a string.</returns>
        </member>
        <member name="T:NServiceKit.ServiceHost.HttpResponseExtensions">
            <summary>A HTTP response extensions.</summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.HttpResponseExtensions.RedirectToUrl(NServiceKit.ServiceHost.IHttpResponse,System.String,System.Net.HttpStatusCode)">
             <summary>An IHttpResponse extension method that redirect to URL.</summary>
            
             <param name="httpRes">           The httpRes to act on.</param>
             <param name="url">               URL of the document.</param>
             <param name="redirectStatusCode">The redirect status code.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.HttpResponseExtensions.TransmitFile(NServiceKit.ServiceHost.IHttpResponse,System.String)">
             <summary>An IHttpResponse extension method that transmit file.</summary>
            
             <param name="httpRes"> The httpRes to act on.</param>
             <param name="filePath">Full pathname of the file.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.HttpResponseExtensions.WriteFile(NServiceKit.ServiceHost.IHttpResponse,System.String)">
             <summary>An IHttpResponse extension method that writes a file.</summary>
            
             <param name="httpRes"> The httpRes to act on.</param>
             <param name="filePath">Full pathname of the file.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.HttpResponseExtensions.Redirect(NServiceKit.ServiceHost.IHttpResponse,System.String)">
             <summary>An IHttpResponse extension method that redirects.</summary>
            
             <param name="httpRes">The httpRes to act on.</param>
             <param name="url">    URL of the document.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.HttpResponseExtensions.ReturnAuthRequired(NServiceKit.ServiceHost.IHttpResponse)">
             <summary>An IHttpResponse extension method that returns authentication required.</summary>
            
             <param name="httpRes">The httpRes to act on.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.HttpResponseExtensions.ReturnAuthRequired(NServiceKit.ServiceHost.IHttpResponse,System.String)">
             <summary>An IHttpResponse extension method that returns authentication required.</summary>
            
             <param name="httpRes">  The httpRes to act on.</param>
             <param name="authRealm">The authentication realm.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.HttpResponseExtensions.ReturnAuthRequired(NServiceKit.ServiceHost.IHttpResponse,NServiceKit.ServiceHost.AuthenticationHeaderType,System.String)">
             <summary>An IHttpResponse extension method that returns authentication required.</summary>
            
             <param name="httpRes">  The httpRes to act on.</param>
             <param name="authType"> Type of the authentication.</param>
             <param name="authRealm">The authentication realm.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.HttpResponseExtensions.SetPermanentCookie(NServiceKit.ServiceHost.IHttpResponse,System.String,System.String)">
            <summary>
            Sets a persistent cookie which never expires
            </summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.HttpResponseExtensions.SetSessionCookie(NServiceKit.ServiceHost.IHttpResponse,System.String,System.String)">
            <summary>
            Sets a session cookie which expires after the browser session closes
            </summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.HttpResponseExtensions.SetCookie(NServiceKit.ServiceHost.IHttpResponse,System.String,System.String,System.TimeSpan)">
            <summary>
            Sets a persistent cookie which expires after the given time
            </summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.HttpResponseExtensions.SetCookie(NServiceKit.ServiceHost.IHttpResponse,System.String,System.String,System.DateTime,System.String)">
            <summary>
            Sets a persistent cookie with an expiresAt date
            </summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.HttpResponseExtensions.DeleteCookie(NServiceKit.ServiceHost.IHttpResponse,System.String)">
            <summary>
            Deletes a specified cookie by setting its value to empty and expiration to -1 days
            </summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.HttpResponseExtensions.CookiesAsDictionary(NServiceKit.ServiceHost.IHttpResponse)">
             <summary>An IHttpResponse extension method that cookies as dictionary.</summary>
            
             <param name="httpRes">The httpRes to act on.</param>
            
             <returns>A Dictionary&lt;string,string&gt;</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.HttpResponseExtensions.AddHeaderLastModified(NServiceKit.ServiceHost.IHttpResponse,System.Nullable{System.DateTime})">
             <summary>An IHttpResponse extension method that adds a header last modified to 'lastModified'.</summary>
            
             <param name="httpRes">     The httpRes to act on.</param>
             <param name="lastModified">The last modified.</param>
        </member>
        <member name="T:NServiceKit.ServiceHost.AuthenticationHeaderType">
            <summary>Values that represent AuthenticationHeaderType.</summary>
        </member>
        <member name="F:NServiceKit.ServiceHost.AuthenticationHeaderType.Basic">
            <summary>An enum constant representing the basic option.</summary>
        </member>
        <member name="F:NServiceKit.ServiceHost.AuthenticationHeaderType.Digest">
            <summary>An enum constant representing the digest option.</summary>
        </member>
        <member name="T:NServiceKit.ServiceHost.RequestAttributes">
            <summary>A request attributes.</summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.RequestAttributes.#ctor(NServiceKit.ServiceHost.IHttpRequest)">
             <summary>Initializes a new instance of the NServiceKit.ServiceHost.RequestAttributes class.</summary>
            
             <param name="httpRequest">The HTTP request.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.RequestAttributes.#ctor(System.Web.HttpContext)">
             <summary>Initializes a new instance of the NServiceKit.ServiceHost.RequestAttributes class.</summary>
            
             <param name="httpContext">Context for the HTTP.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.RequestAttributes.GetWorker(System.Web.HttpContext)">
             <summary>Gets a worker.</summary>
            
             <param name="context">The context.</param>
            
             <returns>The worker.</returns>
        </member>
        <member name="P:NServiceKit.ServiceHost.RequestAttributes.HttpWorkerRequest">
             <summary>Gets the HTTP worker request.</summary>
            
             <value>The HTTP worker request.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.RequestAttributes.AcceptEncoding">
             <summary>Gets the accept encoding.</summary>
            
             <value>The accept encoding.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.RequestAttributes.AcceptsGzip">
             <summary>Gets a value indicating whether the accepts gzip.</summary>
            
             <value>true if accepts gzip, false if not.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.RequestAttributes.AcceptsDeflate">
             <summary>Gets a value indicating whether the accepts deflate.</summary>
            
             <value>true if accepts deflate, false if not.</value>
        </member>
        <member name="T:NServiceKit.ServiceHost.RequestContextExtensions">
            <summary>
            Extension methods operating on IRequestContext.
            </summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.RequestContextExtensions.ToOptimizedResult``1(NServiceKit.ServiceHost.IRequestContext,``0)">
            <summary>
            Returns the optimized result for the IRequestContext. 
            Does not use or store results in any cache.
            </summary>
            <param name="requestContext"></param>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.RequestContextExtensions.ToOptimizedResultUsingCache``1(NServiceKit.ServiceHost.IRequestContext,NServiceKit.CacheAccess.ICacheClient,System.String,System.Func{``0})">
            <summary>
            Overload for the Resolve method returning the most
            optimized result based on the MimeType and CompressionType from the IRequestContext.
            </summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.RequestContextExtensions.ToOptimizedResultUsingCache``1(NServiceKit.ServiceHost.IRequestContext,NServiceKit.CacheAccess.ICacheClient,System.String,System.Nullable{System.TimeSpan},System.Func{``0})">
            <summary>
            Overload for the Resolve method returning the most
            optimized result based on the MimeType and CompressionType from the IRequestContext.
            </summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.RequestContextExtensions.RemoveFromCache(NServiceKit.ServiceHost.IRequestContext,NServiceKit.CacheAccess.ICacheClient,System.String[])">
            <summary>
            Clears all the serialized and compressed caches set 
            by the 'Resolve' method for the cacheKey provided
            </summary>
            <param name="requestContext"></param>
            <param name="cacheClient"></param>
            <param name="cacheKeys"></param>
        </member>
        <member name="T:NServiceKit.ServiceHost.RestPath">
            <summary>A rest path.</summary>
        </member>
        <member name="F:NServiceKit.ServiceHost.RestPath.Verbs">
            <summary>The verbs.</summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.RestPath.GetPathPartsForMatching(System.String)">
             <summary>Gets path parts for matching.</summary>
            
             <param name="pathInfo">Information describing the path.</param>
            
             <returns>An array of string.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.RestPath.GetFirstMatchHashKeys(System.String[])">
             <summary>Gets the first match hash keys in this collection.</summary>
            
             <param name="pathPartsForMatching">The path parts for matching.</param>
            
             <returns>An enumerator that allows foreach to be used to process the first match hash keys in this collection.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.RestPath.GetFirstMatchWildCardHashKeys(System.String[])">
             <summary>Gets the first match wild card hash keys in this collection.</summary>
            
             <param name="pathPartsForMatching">The path parts for matching.</param>
            
             <returns>An enumerator that allows foreach to be used to process the first match wild card hash keys in this collection.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.RestPath.#ctor(System.Type,System.String)">
             <summary>Initializes a new instance of the NServiceKit.ServiceHost.RestPath class.</summary>
            
             <param name="requestType">Type of the request.</param>
             <param name="path">       Full pathname of the file.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.RestPath.#ctor(System.Type,System.String,System.String,System.String,System.String)">
             <summary>Initializes a new instance of the NServiceKit.ServiceHost.RestPath class.</summary>
            
             <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or illegal values.</exception>
            
             <param name="requestType">Type of the request.</param>
             <param name="path">       Full pathname of the file.</param>
             <param name="verbs">      The verbs.</param>
             <param name="summary">    The summary.</param>
             <param name="notes">      The notes.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.RestPath.MatchScore(System.String,System.String[])">
             <summary>Match score.</summary>
            
             <param name="httpMethod">       .</param>
             <param name="withPathInfoParts">.</param>
            
             <returns>An int.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.RestPath.IsMatch(System.String,System.String[])">
            <summary>
            For performance withPathInfoParts should already be a lower case string
            to minimize redundant matching operations.
            </summary>
            <param name="httpMethod"></param>
            <param name="withPathInfoParts"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.RestPath.IsMatch(System.String,System.String[],System.Int32@)">
            <summary>
            For performance withPathInfoParts should already be a lower case string
            to minimize redundant matching operations.
            </summary>
            <param name="httpMethod"></param>
            <param name="withPathInfoParts"></param>
            <param name="wildcardMatchCount"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.RestPath.CreateRequest(System.String)">
             <summary>Creates a request.</summary>
            
             <param name="pathInfo">Information describing the path.</param>
            
             <returns>The new request.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.RestPath.CreateRequest(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Object)">
             <summary>Creates a request.</summary>
            
             <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or illegal values.</exception>
            
             <param name="pathInfo">              Information describing the path.</param>
             <param name="queryStringAndFormData">Information describing the query string and form.</param>
             <param name="fromInstance">          from instance.</param>
            
             <returns>The new request.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.RestPath.GetHashCode">
             <summary>Serves as a hash function for a particular type.</summary>
            
             <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
        </member>
        <member name="P:NServiceKit.ServiceHost.RestPath.IsWildCardPath">
             <summary>Gets a value indicating whether this object is wild card path.</summary>
            
             <value>true if this object is wild card path, false if not.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.RestPath.PathComponentsCount">
            <summary>
            The number of segments separated by '/' determinable by path.Split('/').Length
            e.g. /path/to/here.ext == 3
            </summary>
        </member>
        <member name="P:NServiceKit.ServiceHost.RestPath.TotalComponentsCount">
            <summary>
            The total number of segments after subparts have been exploded ('.') 
            e.g. /path/to/here.ext == 4
            </summary>
        </member>
        <member name="P:NServiceKit.ServiceHost.RestPath.RequestType">
             <summary>Gets the type of the request.</summary>
            
             <value>The type of the request.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.RestPath.Path">
             <summary>Gets the full pathname of the file.</summary>
            
             <value>The full pathname of the file.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.RestPath.Summary">
             <summary>Gets the summary.</summary>
            
             <value>The summary.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.RestPath.Notes">
             <summary>Gets the notes.</summary>
            
             <value>The notes.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.RestPath.AllowsAllVerbs">
             <summary>Gets a value indicating whether we allows all verbs.</summary>
            
             <value>true if allows all verbs, false if not.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.RestPath.AllowedVerbs">
             <summary>Gets the allowed verbs.</summary>
            
             <value>The allowed verbs.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.RestPath.IsValid">
             <summary>Gets or sets a value indicating whether this object is valid.</summary>
            
             <value>true if this object is valid, false if not.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.RestPath.FirstMatchHashKey">
            <summary>
            Provide for quick lookups based on hashes that can be determined from a request url
            </summary>
        </member>
        <member name="P:NServiceKit.ServiceHost.RestPath.UniqueMatchHashKey">
             <summary>Gets the unique match hash key.</summary>
            
             <value>The unique match hash key.</value>
        </member>
        <member name="T:NServiceKit.ServiceHost.ServiceExecFn">
             <summary>Service execute function.</summary>
            
             <param name="requestContext">Context for the request.</param>
             <param name="request">       The request.</param>
            
             <returns>An object.</returns>
        </member>
        <member name="T:NServiceKit.ServiceHost.InstanceExecFn">
             <summary>Instance execute function.</summary>
            
             <param name="requestContext">Context for the request.</param>
             <param name="intance">       The intance.</param>
             <param name="request">       The request.</param>
            
             <returns>An object.</returns>
        </member>
        <member name="T:NServiceKit.ServiceHost.ActionInvokerFn">
             <summary>Action invoker function.</summary>
            
             <param name="intance">The intance.</param>
             <param name="request">The request.</param>
            
             <returns>An object.</returns>
        </member>
        <member name="T:NServiceKit.ServiceHost.VoidActionInvokerFn">
             <summary>Void action invoker function.</summary>
            
             <param name="intance">The intance.</param>
             <param name="request">The request.</param>
        </member>
        <member name="T:NServiceKit.ServiceHost.ServiceController">
            <summary>A controller for handling services.</summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceController.#ctor(System.Func{System.Collections.Generic.IEnumerable{System.Type}},NServiceKit.ServiceHost.ServiceMetadata)">
             <summary>Initializes a new instance of the NServiceKit.ServiceHost.ServiceController class.</summary>
            
             <param name="resolveServicesFn">The resolve services function.</param>
             <param name="metadata">         The metadata.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceController.Register``1(System.Func{NServiceKit.ServiceHost.IService{``0}})">
            <summary>.</summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceController.Register(NServiceKit.Configuration.ITypeFactory)">
             <summary>Registers this object.</summary>
            
             <param name="serviceFactoryFn">The service factory function.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceController.RegisterGService(NServiceKit.Configuration.ITypeFactory,System.Type)">
             <summary>Registers the g service.</summary>
            
             <param name="serviceFactoryFn">The service factory function.</param>
             <param name="serviceType">     Type of the service.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceController.RegisterNService(NServiceKit.Configuration.ITypeFactory,System.Type)">
             <summary>Registers the n service.</summary>
            
             <param name="serviceFactoryFn">The service factory function.</param>
             <param name="serviceType">     Type of the service.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceController.RegisterCommon(System.Type,System.Type,System.Type)">
             <summary>Registers the common.</summary>
            
             <param name="serviceType"> Type of the service.</param>
             <param name="requestType"> Type of the request.</param>
             <param name="responseType">Type of the response.</param>
        </member>
        <member name="F:NServiceKit.ServiceHost.ServiceController.RestPathMap">
            <summary>The rest path map.</summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceController.RegisterRestPaths(System.Type)">
             <summary>Registers the rest paths described by requestType.</summary>
            
             <exception cref="T:System.NotSupportedException">Thrown when the requested operation is not supported.</exception>
            
             <param name="requestType">Type of the request.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceController.RegisterRestPath(NServiceKit.ServiceHost.RestPath)">
             <summary>Registers the rest path described by restPath.</summary>
            
             <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or illegal values.</exception>
            
             <param name="restPath">Full pathname of the rest file.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceController.AfterInit">
            <summary>After initialise.</summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceController.GetRestPathForRequest(System.String,System.String)">
             <summary>Returns the first matching RestPath.</summary>
            
             <param name="httpMethod">.</param>
             <param name="pathInfo">  .</param>
            
             <returns>The rest path for request.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceController.Register(System.Type,System.Type)">
             <summary>Registers this object.</summary>
            
             <param name="requestType">Type of the request.</param>
             <param name="serviceType">Type of the service.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceController.Register(System.Type,System.Type,System.Func{System.Type,System.Object})">
             <summary>Registers this object.</summary>
            
             <param name="requestType">     Type of the request.</param>
             <param name="serviceType">     Type of the service.</param>
             <param name="handlerFactoryFn">The handler factory function.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceController.RegisterGServiceExecutor(System.Type,System.Type,NServiceKit.Configuration.ITypeFactory)">
             <summary>Registers the g service executor.</summary>
            
             <param name="requestType">     Type of the request.</param>
             <param name="serviceType">     Type of the service.</param>
             <param name="serviceFactoryFn">The service factory function.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceController.RegisterNServiceExecutor(System.Type,System.Type,NServiceKit.Configuration.ITypeFactory)">
             <summary>Registers the n service executor.</summary>
            
             <param name="requestType">     Type of the request.</param>
             <param name="serviceType">     Type of the service.</param>
             <param name="serviceFactoryFn">The service factory function.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceController.ExecuteMessage``1(NServiceKit.Messaging.IMessage{``0})">
             <summary>Execute MQ.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="mqMessage">Message describing the mq.</param>
            
             <returns>An object.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceController.ExecuteMessage``1(NServiceKit.Messaging.IMessage{``0},NServiceKit.ServiceHost.IRequestContext)">
             <summary>Execute MQ with requestContext.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="dto">           The dto.</param>
             <param name="requestContext">Context for the request.</param>
            
             <returns>An object.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceController.Execute(System.Object)">
             <summary>Executes the given request.</summary>
            
             <param name="request">The request.</param>
            
             <returns>An object.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceController.Execute(System.Object,NServiceKit.ServiceHost.IRequestContext)">
             <summary>Execute HTTP.</summary>
            
             <param name="request">       .</param>
             <param name="requestContext">.</param>
            
             <returns>An object.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceController.GetService(System.Type)">
             <summary>Gets a service.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <param name="requestType">Type of the request.</param>
            
             <returns>The service.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceController.ExecuteText(System.String,System.Type,NServiceKit.ServiceHost.IRequestContext)">
             <summary>Executes the text operation.</summary>
            
             <param name="requestXml">    The request XML.</param>
             <param name="requestType">   Type of the request.</param>
             <param name="requestContext">Context for the request.</param>
            
             <returns>An object.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceController.AssertServiceRestrictions(System.Type,NServiceKit.ServiceHost.EndpointAttributes)">
             <summary>Assert service restrictions.</summary>
            
             <exception cref="T:System.UnauthorizedAccessException">Thrown when an Unauthorized Access error condition occurs.</exception>
            
             <param name="requestType">     Type of the request.</param>
             <param name="actualAttributes">The actual attributes.</param>
        </member>
        <member name="P:NServiceKit.ServiceHost.ServiceController.EnableAccessRestrictions">
             <summary>Gets or sets a value indicating whether the access restrictions is enabled.</summary>
            
             <value>true if enable access restrictions, false if not.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.ServiceController.Metadata">
             <summary>Gets the metadata.</summary>
            
             <value>The metadata.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.ServiceController.RequestTypeFactoryMap">
             <summary>Gets or sets the request type factory map.</summary>
            
             <value>The request type factory map.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.ServiceController.DefaultOperationsNamespace">
             <summary>Gets or sets the default operations namespace.</summary>
            
             <value>The default operations namespace.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.ServiceController.Routes">
             <summary>Allow the registration of custom routes.</summary>
            
             <value>The routes.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.ServiceController.Resolver">
             <summary>Gets or sets the resolver.</summary>
            
             <value>The resolver.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.ServiceController.ResolveServicesFn">
             <summary>Gets or sets the resolve services function.</summary>
            
             <value>The resolve services function.</value>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceController.TypeFactoryWrapper.#ctor(System.Func{System.Type,System.Object})">
             <summary>Initializes a new instance of the NServiceKit.ServiceHost.ServiceController.TypeFactoryWrapper class.</summary>
            
             <param name="typeCreator">The type creator.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceController.TypeFactoryWrapper.CreateInstance(System.Type)">
             <summary>Creates an instance.</summary>
            
             <param name="type">The type.</param>
            
             <returns>The new instance.</returns>
        </member>
        <member name="T:NServiceKit.ServiceHost.ServiceControllerReflection">
            <summary>
            Keeping around just to compare how slow it is
            </summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceControllerReflection.Register``1(System.Func{NServiceKit.ServiceHost.IService{``0}})">
            <summary>
            
            </summary>
            <param name="invoker"></param>
            <typeparam name="TServiceRequest"></typeparam>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceControllerReflection.ExecuteReflection(System.Object)">
             <summary>Executes the reflection operation.</summary>
            
             <param name="dto">The dto.</param>
            
             <returns>An object.</returns>
        </member>
        <member name="T:NServiceKit.ServiceHost.GServiceExec">
            <summary>A service execute.</summary>
        </member>
        <member name="F:NServiceKit.ServiceHost.GServiceExec.Execute">
            <summary>The execute.</summary>
        </member>
        <member name="F:NServiceKit.ServiceHost.GServiceExec.ExecuteAsync">
            <summary>The execute asynchronous.</summary>
        </member>
        <member name="F:NServiceKit.ServiceHost.GServiceExec.RestGet">
            <summary>The rest get.</summary>
        </member>
        <member name="F:NServiceKit.ServiceHost.GServiceExec.RestPost">
            <summary>The rest post.</summary>
        </member>
        <member name="F:NServiceKit.ServiceHost.GServiceExec.RestPut">
            <summary>The rest put.</summary>
        </member>
        <member name="F:NServiceKit.ServiceHost.GServiceExec.RestDelete">
            <summary>The rest delete.</summary>
        </member>
        <member name="F:NServiceKit.ServiceHost.GServiceExec.RestPatch">
            <summary>The rest patch.</summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.GServiceExec.GetExecMethodInfo(System.Type,System.Type)">
             <summary>Gets execute method information.</summary>
            
             <param name="serviceType">Type of the service.</param>
             <param name="requestType">Type of the request.</param>
            
             <returns>The execute method information.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.GServiceExec.GetRunTimeExecMethod(System.Type,System.Type,NServiceKit.ServiceHost.EndpointAttributes)">
             <summary>Gets run time execute method.</summary>
            
             <param name="serviceType">Type of the service.</param>
             <param name="requestType">Type of the request.</param>
             <param name="attrs">      The attributes.</param>
            
             <returns>The run time execute method.</returns>
        </member>
        <member name="T:NServiceKit.ServiceHost.ServiceExec`1">
            <summary>A service execute.</summary>
            <typeparam name="TReq">Type of the request.</typeparam>
        </member>
        <member name="F:NServiceKit.ServiceHost.ServiceExec`1.ExecuteMethodName">
            <summary>Name of the execute method.</summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceExec`1.Execute(NServiceKit.ServiceHost.IService{`0},`0,NServiceKit.ServiceHost.EndpointAttributes)">
            <summary>.</summary>
        </member>
        <member name="T:NServiceKit.ServiceHost.ServiceExecOperations">
            <summary>
            Static type constants for referring to service exec methods
            </summary>
        </member>
        <member name="T:NServiceKit.ServiceHost.ServiceManager">
            <summary>Manager for services.</summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceManager.#ctor(System.Reflection.Assembly[])">
             <summary>Inject alternative container and strategy for resolving Service Types.</summary>
            
             <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or illegal values.</exception>
            
             <param name="assembliesWithServices">A variable-length parameters list containing assemblies with services.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceManager.#ctor(Funq.Container,System.Reflection.Assembly[])">
             <summary>Inject alternative container and strategy for resolving Service Types.</summary>
            
             <param name="container">             The container.</param>
             <param name="assembliesWithServices">A variable-length parameters list containing assemblies with services.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceManager.#ctor(Funq.Container,NServiceKit.ServiceHost.ServiceController)">
            <summary>
            Inject alternative container and strategy for resolving Service Types
            </summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceManager.Init">
             <summary>Initialises this object.</summary>
            
             <returns>A ServiceManager.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceManager.RegisterService``1">
            <summary>.</summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceManager.RegisterService(System.Type)">
             <summary>Registers the service described by serviceType.</summary>
            
             <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or illegal values.</exception>
            
             <param name="serviceType">Type of the service.</param>
            
             <returns>A Type.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceManager.Execute(System.Object)">
             <summary>Executes the given dto.</summary>
            
             <param name="dto">The dto.</param>
            
             <returns>An object.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceManager.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceManager.AfterInit">
            <summary>After initialise.</summary>
        </member>
        <member name="P:NServiceKit.ServiceHost.ServiceManager.Container">
             <summary>Gets the container.</summary>
            
             <value>The container.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.ServiceManager.ServiceController">
             <summary>Gets the service controller.</summary>
            
             <value>The service controller.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.ServiceManager.Metadata">
             <summary>Gets the metadata.</summary>
            
             <value>The metadata.</value>
        </member>
        <member name="T:NServiceKit.ServiceHost.ServiceMetadata">
            <summary>A service metadata.</summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceMetadata.#ctor">
            <summary>Initializes a new instance of the NServiceKit.ServiceHost.ServiceMetadata class.</summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceMetadata.Add(System.Type,System.Type,System.Type)">
             <summary>Adds serviceType.</summary>
            
             <param name="serviceType"> Type of the service.</param>
             <param name="requestType"> Type of the request.</param>
             <param name="responseType">Type of the response.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceMetadata.AfterInit">
            <summary>After initialise.</summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceMetadata.GetOperationDtos">
             <summary>Gets operation dtos.</summary>
            
             <returns>The operation dtos.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceMetadata.GetOperation(System.Type)">
             <summary>Gets an operation.</summary>
            
             <param name="operationType">Type of the operation.</param>
            
             <returns>The operation.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceMetadata.GetImplementedActions(System.Type,System.Type)">
             <summary>Gets implemented actions.</summary>
            
             <param name="serviceType">Type of the service.</param>
             <param name="requestType">Type of the request.</param>
            
             <returns>The implemented actions.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceMetadata.ToNewApiAction(System.String)">
             <summary>Converts an oldApiAction to a new API action.</summary>
            
             <param name="oldApiAction">The old API action.</param>
            
             <returns>oldApiAction as a string.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceMetadata.GetOperationType(System.String)">
             <summary>Gets operation type.</summary>
            
             <param name="operationTypeName">Name of the operation type.</param>
            
             <returns>The operation type.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceMetadata.GetServiceTypeByRequest(System.Type)">
             <summary>Gets service type by request.</summary>
            
             <param name="requestType">Type of the request.</param>
            
             <returns>The service type by request.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceMetadata.GetServiceTypeByResponse(System.Type)">
             <summary>Gets service type by response.</summary>
            
             <param name="responseType">Type of the response.</param>
            
             <returns>The service type by response.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceMetadata.GetResponseTypeByRequest(System.Type)">
             <summary>Gets response type by request.</summary>
            
             <param name="requestType">Type of the request.</param>
            
             <returns>The response type by request.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceMetadata.GetAllTypes">
             <summary>Gets all types.</summary>
            
             <returns>all types.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceMetadata.GetAllOperationNames">
             <summary>Gets all operation names.</summary>
            
             <returns>all operation names.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceMetadata.GetOperationNamesForMetadata(NServiceKit.ServiceHost.IHttpRequest)">
             <summary>Gets operation names for metadata.</summary>
            
             <param name="httpReq">The HTTP request.</param>
            
             <returns>The operation names for metadata.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceMetadata.GetOperationNamesForMetadata(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.Format)">
             <summary>Gets operation names for metadata.</summary>
            
             <param name="httpReq">The HTTP request.</param>
             <param name="format"> Describes the format to use.</param>
            
             <returns>The operation names for metadata.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceMetadata.IsVisible(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.Operation)">
             <summary>Query if 'httpReq' is visible.</summary>
            
             <param name="httpReq">  The HTTP request.</param>
             <param name="operation">The operation.</param>
            
             <returns>true if visible, false if not.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceMetadata.IsVisible(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.Format,System.String)">
             <summary>Query if 'httpReq' is visible.</summary>
            
             <param name="httpReq">      The HTTP request.</param>
             <param name="format">       Describes the format to use.</param>
             <param name="operationName">Name of the operation.</param>
            
             <returns>true if visible, false if not.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceMetadata.CanAccess(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.Format,System.String)">
             <summary>Determine if we can access.</summary>
            
             <param name="httpReq">      The HTTP request.</param>
             <param name="format">       Describes the format to use.</param>
             <param name="operationName">Name of the operation.</param>
            
             <returns>true if we can access, false if not.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceMetadata.CanAccess(NServiceKit.ServiceHost.EndpointAttributes,NServiceKit.ServiceHost.Format,System.String)">
             <summary>Determine if we can access.</summary>
            
             <param name="reqAttrs">     The request attributes.</param>
             <param name="format">       Describes the format to use.</param>
             <param name="operationName">Name of the operation.</param>
            
             <returns>true if we can access, false if not.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceMetadata.CanAccess(NServiceKit.ServiceHost.Format,System.String)">
             <summary>Determine if we can access.</summary>
            
             <param name="format">       Describes the format to use.</param>
             <param name="operationName">Name of the operation.</param>
            
             <returns>true if we can access, false if not.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceMetadata.HasImplementation(NServiceKit.ServiceHost.Operation,NServiceKit.ServiceHost.Format)">
             <summary>Query if 'operation' has implementation.</summary>
            
             <param name="operation">The operation.</param>
             <param name="format">   Describes the format to use.</param>
            
             <returns>true if implementation, false if not.</returns>
        </member>
        <member name="P:NServiceKit.ServiceHost.ServiceMetadata.OperationsMap">
             <summary>Gets the operations map.</summary>
            
             <value>The operations map.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.ServiceMetadata.OperationsResponseMap">
             <summary>Gets the operations response map.</summary>
            
             <value>The operations response map.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.ServiceMetadata.OperationNamesMap">
             <summary>Gets the operation names map.</summary>
            
             <value>The operation names map.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.ServiceMetadata.RequestTypes">
             <summary>Gets a list of types of the requests.</summary>
            
             <value>A list of types of the requests.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.ServiceMetadata.ServiceTypes">
             <summary>Gets a list of types of the services.</summary>
            
             <value>A list of types of the services.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.ServiceMetadata.ResponseTypes">
             <summary>Gets a list of types of the responses.</summary>
            
             <value>A list of types of the responses.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.ServiceMetadata.Routes">
             <summary>Gets or sets the routes.</summary>
            
             <value>The routes.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.ServiceMetadata.Operations">
             <summary>Gets the operations.</summary>
            
             <value>The operations.</value>
        </member>
        <member name="T:NServiceKit.ServiceHost.Operation">
            <summary>An operation.</summary>
        </member>
        <member name="P:NServiceKit.ServiceHost.Operation.Name">
             <summary>Gets the name.</summary>
            
             <value>The name.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.Operation.RequestType">
             <summary>Gets or sets the type of the request.</summary>
            
             <value>The type of the request.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.Operation.ServiceType">
             <summary>Gets or sets the type of the service.</summary>
            
             <value>The type of the service.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.Operation.ResponseType">
             <summary>Gets or sets the type of the response.</summary>
            
             <value>The type of the response.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.Operation.RestrictTo">
             <summary>Gets or sets the restrict to.</summary>
            
             <value>The restrict to.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.Operation.Actions">
             <summary>Gets or sets the actions.</summary>
            
             <value>The actions.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.Operation.Routes">
             <summary>Gets or sets the routes.</summary>
            
             <value>The routes.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.Operation.IsOneWay">
             <summary>Gets a value indicating whether this object is one way.</summary>
            
             <value>true if this object is one way, false if not.</value>
        </member>
        <member name="T:NServiceKit.ServiceHost.OperationDto">
            <summary>An operation dto.</summary>
        </member>
        <member name="P:NServiceKit.ServiceHost.OperationDto.Name">
             <summary>Gets or sets the name.</summary>
            
             <value>The name.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.OperationDto.ResponseName">
             <summary>Gets or sets the name of the response.</summary>
            
             <value>The name of the response.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.OperationDto.ServiceName">
             <summary>Gets or sets the name of the service.</summary>
            
             <value>The name of the service.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.OperationDto.RestrictTo">
             <summary>Gets or sets the restrict to.</summary>
            
             <value>The restrict to.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.OperationDto.VisibleTo">
             <summary>Gets or sets the visible to.</summary>
            
             <value>The visible to.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.OperationDto.Actions">
             <summary>Gets or sets the actions.</summary>
            
             <value>The actions.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.OperationDto.Routes">
             <summary>Gets or sets the routes.</summary>
            
             <value>The routes.</value>
        </member>
        <member name="T:NServiceKit.ServiceHost.XsdMetadata">
            <summary>An XSD metadata.</summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.XsdMetadata.#ctor(NServiceKit.ServiceHost.ServiceMetadata,System.Boolean)">
             <summary>Initializes a new instance of the NServiceKit.ServiceHost.XsdMetadata class.</summary>
            
             <param name="metadata">The metadata.</param>
             <param name="flash">   true to flash.</param>
        </member>
        <member name="M:NServiceKit.ServiceHost.XsdMetadata.GetAllTypes">
             <summary>Gets all types.</summary>
            
             <returns>all types.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.XsdMetadata.GetReplyOperationNames(NServiceKit.ServiceHost.Format)">
             <summary>Gets reply operation names.</summary>
            
             <param name="format">Describes the format to use.</param>
            
             <returns>The reply operation names.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.XsdMetadata.GetOneWayOperationNames(NServiceKit.ServiceHost.Format)">
             <summary>Gets one way operation names.</summary>
            
             <param name="format">Describes the format to use.</param>
            
             <returns>The one way operation names.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.XsdMetadata.GetBaseTypeWithTheSameName(System.Type)">
            <summary>
            Gets the name of the base most type in the heirachy tree with the same.
            
            We get an exception when trying to create a schema with multiple types of the same name
            like when inheriting from a DataContract with the same name.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="P:NServiceKit.ServiceHost.XsdMetadata.Metadata">
             <summary>Gets or sets the metadata.</summary>
            
             <value>The metadata.</value>
        </member>
        <member name="P:NServiceKit.ServiceHost.XsdMetadata.Flash">
             <summary>Gets or sets a value indicating whether the flash.</summary>
            
             <value>true if flash, false if not.</value>
        </member>
        <member name="T:NServiceKit.ServiceHost.ServiceMetadataExtensions">
            <summary>A service metadata extensions.</summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceMetadataExtensions.ToOperationDto(NServiceKit.ServiceHost.Operation)">
             <summary>An Operation extension method that converts an operation to an operation dto.</summary>
            
             <param name="operation">The operation to act on.</param>
            
             <returns>operation as an OperationDto.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceMetadataExtensions.GetDescription(System.Type)">
             <summary>A Type extension method that gets a description.</summary>
            
             <param name="operationType">The operationType to act on.</param>
            
             <returns>The description.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceMetadataExtensions.GetApiMembers(System.Type)">
             <summary>A Type extension method that gets API members.</summary>
            
             <param name="operationType">The operationType to act on.</param>
            
             <returns>The API members.</returns>
        </member>
        <member name="T:NServiceKit.ServiceHost.ServiceRoutes">
            <summary>A service routes.</summary>
        </member>
        <member name="F:NServiceKit.ServiceHost.ServiceRoutes.RestPaths">
            <summary>The rest paths.</summary>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceRoutes.Add``1(System.String)">
             <summary>Adds restPath.</summary>
            
             <typeparam name="TRequest">Type of the request.</typeparam>
             <param name="restPath">The path to map the request DTO to. See <see cref="P:NServiceKit.ServiceHost.RouteAttribute.Path">RestServiceAttribute.Path</see>   for details on the correct format.</param>
            
             <returns>The IServiceRoutes.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceRoutes.Add``1(System.String,System.String)">
             <summary>Adds restPath.</summary>
            
             <typeparam name="TRequest">Type of the request.</typeparam>
             <param name="restPath">The path to map the request DTO to. See <see cref="P:NServiceKit.ServiceHost.RouteAttribute.Path">RestServiceAttribute.Path</see>   for details on the correct format.</param>
             <param name="verbs">   The comma-delimited list of HTTP verbs supported by the path, such as "GET,PUT,DELETE".</param>
            
             <returns>The IServiceRoutes.</returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceRoutes.Add(System.Type,System.String,System.String)">
             <summary>Maps the specified REST path to the specified request DTO, specifies the HTTP verbs supported by the path, and indicates the default MIME type of the returned response.</summary>
            
             <param name="requestType">The type of request DTO to map the path to.</param>
             <param name="restPath">   The path to map the request DTO to. See <see cref="P:NServiceKit.ServiceHost.RouteAttribute.Path">RestServiceAttribute.Path</see>   for details on the correct format.</param>
             <param name="verbs">      The comma-delimited list of HTTP verbs supported by the path, such as "GET,PUT,DELETE".</param>
            
             <returns>
             The same <see cref="T:NServiceKit.ServiceHost.IServiceRoutes"/> instance;
             never <see langword="null"/>.
             </returns>
        </member>
        <member name="M:NServiceKit.ServiceHost.ServiceRoutes.Add(System.Type,System.String,System.String,System.String,System.String)">
             <summary>Maps the specified REST path to the specified request DTO, specifies the HTTP verbs supported by the path, and indicates the default MIME type of the returned response.</summary>
            
             <param name="requestType">The type of request DTO to map the path to.</param>
             <param name="restPath">   The path to map the request DTO to. See <see cref="P:NServiceKit.ServiceHost.RouteAttribute.Path">RestServiceAttribute.Path</see>   for details on the correct format.</param>
             <param name="verbs">      The comma-delimited list of HTTP verbs supported by the path, such as "GET,PUT,DELETE".</param>
             <param name="summary">    The short summary of what the REST does.</param>
             <param name="notes">      The longer text to explain the behaviour of the REST.</param>
            
             <returns>
             The same <see cref="T:NServiceKit.ServiceHost.IServiceRoutes"/> instance;
             never <see langword="null"/>.
             </returns>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.AppHostBase">
            <summary>
            Inherit from this class if you want to host your web services inside an
            ASP.NET application.
            </summary>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.IAppHost">
            <summary>
            ASP.NET or HttpListener NServiceKit host
            </summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.IAppHost.Register``1(``0)">
            <summary>
            Register dependency in AppHost IOC on Startup
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.IAppHost.RegisterAs``2">
            <summary>
            AutoWired Registration of an interface with a concrete type in AppHost IOC on Startup.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TAs"></typeparam>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.IAppHost.Release(System.Object)">
            <summary>
            Allows the clean up for executed autowired services and filters.
            Calls directly after services and filters are executed.
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.IAppHost.OnEndRequest">
            <summary>
            Called at the end of each request. Enables Request Scope.
            </summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.IAppHost.RegisterService(System.Type,System.String[])">
            <summary>
            Register an Adhoc web service on Startup
            </summary>
            <param name="serviceType"></param>
            <param name="atRestPaths"></param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.IAppHost.LoadPlugin(NServiceKit.WebHost.Endpoints.IPlugin[])">
            <summary>
            Apply plugins to this AppHost
            </summary>
            <param name="plugins"></param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.IAppHost.CreateServiceRunner``1(NServiceKit.WebHost.Endpoints.ActionContext)">
            <summary>
            Create a service runner for IService actions
            </summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.IAppHost.ResolveAbsoluteUrl(System.String,NServiceKit.ServiceHost.IHttpRequest)">
            <summary>
            Resolve the absolute url for this request
            </summary>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.IAppHost.Routes">
            <summary>
            Register user-defined custom routes.
            </summary>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.IAppHost.ContentTypeFilters">
            <summary>
            Register custom ContentType serializers
            </summary>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.IAppHost.PreRequestFilters">
            <summary>
            Add Request Filters, to be applied before the dto is deserialized
            </summary>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.IAppHost.RequestFilters">
            <summary>
            Add Request Filters
            </summary>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.IAppHost.ResponseFilters">
            <summary>
            Add Response Filters
            </summary>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.IAppHost.ViewEngines">
            <summary>
            Add alternative HTML View Engines
            </summary>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.IAppHost.ExceptionHandler">
            <summary>
            Provide an exception handler for un-caught exceptions
            </summary>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.IAppHost.ServiceExceptionHandler">
            <summary>
            Provide an exception handler for unhandled exceptions
            </summary>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.IAppHost.CatchAllHandlers">
            <summary>
            Provide a catch-all handler that doesn't match any routes
            </summary>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.IAppHost.RequestBinders">
            <summary>
            Provide a custom model minder for a specific Request DTO
            </summary>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.IAppHost.Config">
            <summary>
            The AppHost config
            </summary>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.IAppHost.Plugins">
            <summary>
            List of pre-registered and user-defined plugins to be enabled in this AppHost
            </summary>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.IAppHost.VirtualPathProvider">
            <summary>
            Virtual access to file resources
            </summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.AppHostBase.#ctor(System.String,System.Reflection.Assembly[])">
             <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.AppHostBase class.</summary>
            
             <param name="serviceName">           Name of the service.</param>
             <param name="assembliesWithServices">A variable-length parameters list containing assemblies with services.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.AppHostBase.CreateServiceManager(System.Reflection.Assembly[])">
             <summary>Creates service manager.</summary>
            
             <param name="assembliesWithServices">A variable-length parameters list containing assemblies with services.</param>
            
             <returns>The new service manager.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.AppHostBase.Init">
             <summary>Initialises this object.</summary>
            
             <exception cref="T:System.IO.InvalidDataException">Thrown when an Invalid Data error condition occurs.</exception>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.AppHostBase.Configure(Funq.Container)">
             <summary>Configure the given container with the registrations provided by the funqlet.</summary>
            
             <param name="container">Container to register.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.AppHostBase.SetConfig(NServiceKit.WebHost.Endpoints.EndpointHostConfig)">
             <summary>Sets a configuration.</summary>
            
             <param name="config">The configuration.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.AppHostBase.RegisterAs``2">
             <summary>AutoWired Registration of an interface with a concrete type in AppHost IOC on Startup.</summary>
            
             <typeparam name="T">  .</typeparam>
             <typeparam name="TAs">.</typeparam>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.AppHostBase.Release(System.Object)">
             <summary>Allows the clean up for executed autowired services and filters. Calls directly after services and filters are executed.</summary>
            
             <param name="instance">.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.AppHostBase.OnEndRequest">
            <summary>Called at the end of each request. Enables Request Scope.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.AppHostBase.Register``1(``0)">
             <summary>Register dependency in AppHost IOC on Startup.</summary>
            
             <typeparam name="T">.</typeparam>
             <param name="instance">.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.AppHostBase.TryResolve``1">
             <summary>Try resolve.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
            
             <returns>A T.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.AppHostBase.Resolve``1">
            <summary>
            Resolves from IoC container a specified type instance.
            </summary>
            <typeparam name="T">Type to be resolved.</typeparam>
            <returns>Instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.AppHostBase.ResolveService``1(System.Web.HttpContext)">
            <summary>
            Resolves and auto-wires a NServiceKit Service
            </summary>
            <typeparam name="T">Type to be resolved.</typeparam>
            <returns>Instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.AppHostBase.CreateServiceRunner``1(NServiceKit.WebHost.Endpoints.ActionContext)">
             <summary>Create a service runner for IService actions.</summary>
            
             <typeparam name="TRequest">Type of the request.</typeparam>
             <param name="actionContext">Context for the action.</param>
            
             <returns>The new service runner.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.AppHostBase.ResolveAbsoluteUrl(System.String,NServiceKit.ServiceHost.IHttpRequest)">
             <summary>Resolve the absolute url for this request.</summary>
            
             <param name="virtualPath">Full pathname of the virtual file.</param>
             <param name="httpReq">    The HTTP request.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.AppHostBase.LoadPlugin(NServiceKit.WebHost.Endpoints.IPlugin[])">
             <summary>Apply plugins to this AppHost.</summary>
            
             <param name="plugins">.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.AppHostBase.ExecuteService(System.Object)">
             <summary>Executes the service operation.</summary>
            
             <param name="requestDto">The request dto.</param>
            
             <returns>An object.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.AppHostBase.ExecuteService(System.Object,NServiceKit.ServiceHost.EndpointAttributes)">
             <summary>Executes the service operation.</summary>
            
             <param name="requestDto">        The request dto.</param>
             <param name="endpointAttributes">The endpoint attributes.</param>
            
             <returns>An object.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.AppHostBase.RegisterService(System.Type,System.String[])">
             <summary>Register an Adhoc web service on Startup.</summary>
            
             <param name="serviceType">.</param>
             <param name="atRestPaths">.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.AppHostBase.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.AppHostBase.Instance">
             <summary>Gets the instance.</summary>
            
             <value>The instance.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.AppHostBase.ServiceController">
             <summary>Gets the service controller.</summary>
            
             <value>The service controller.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.AppHostBase.Routes">
             <summary>Register user-defined custom routes.</summary>
            
             <value>The routes.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.AppHostBase.Container">
             <summary>Gets the container.</summary>
            
             <value>The container.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.AppHostBase.RequestBinders">
             <summary>Provide a custom model minder for a specific Request DTO.</summary>
            
             <value>The request binders.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.AppHostBase.ContentTypeFilters">
             <summary>Register custom ContentType serializers.</summary>
            
             <value>The content type filters.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.AppHostBase.PreRequestFilters">
             <summary>Add Request Filters, to be applied before the dto is deserialized.</summary>
            
             <value>The pre request filters.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.AppHostBase.RequestFilters">
             <summary>Add Request Filters.</summary>
            
             <value>The request filters.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.AppHostBase.ResponseFilters">
             <summary>Add Response Filters.</summary>
            
             <value>The response filters.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.AppHostBase.ViewEngines">
             <summary>Add alternative HTML View Engines.</summary>
            
             <value>The view engines.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.AppHostBase.ExceptionHandler">
             <summary>Provide an exception handler for un-caught exceptions.</summary>
            
             <value>The exception handler.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.AppHostBase.ServiceExceptionHandler">
             <summary>Provide an exception handler for unhandled exceptions.</summary>
            
             <value>The service exception handler.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.AppHostBase.CatchAllHandlers">
             <summary>Provide a catch-all handler that doesn't match any routes.</summary>
            
             <value>The catch all handlers.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.AppHostBase.Config">
             <summary>The AppHost config.</summary>
            
             <value>The configuration.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.AppHostBase.Plugins">
             <summary>List of pre-registered and user-defined plugins to be enabled in this AppHost.</summary>
            
             <value>The plugins.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.AppHostBase.VirtualPathProvider">
             <summary>Virtual access to file resources.</summary>
            
             <value>The virtual path provider.</value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.AppHostHttpListenerLongRunningBase">
            <summary>An application host HTTP listener long running base.</summary>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.AppHostHttpListenerBase">
            <summary>
            Inherit from this class if you want to host your web services inside a 
            Console Application, Windows Service, etc.
            
            Usage of HttpListener allows you to host webservices on the same port (:80) as IIS 
            however it requires admin user privillages.
            </summary>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase">
            <summary>
            Wrapper class for the HTTPListener to allow easier access to the
            server, for start and stop management and event routing of the actual
            inbound requests.
            </summary>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.Listener">
            <summary>The listener.</summary>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.IsStarted">
            <summary>true if this object is started.</summary>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.registeredReservedUrl">
            <summary>URL of the registered reserved.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.#ctor">
            <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.Support.HttpListenerBase class.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.#ctor(System.String,System.Reflection.Assembly[])">
             <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.Support.HttpListenerBase class.</summary>
            
             <param name="serviceName">           Name of the service.</param>
             <param name="assembliesWithServices">A variable-length parameters list containing assemblies with services.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.CreateServiceManager(System.Reflection.Assembly[])">
             <summary>Creates service manager.</summary>
            
             <param name="assembliesWithServices">A variable-length parameters list containing assemblies with services.</param>
            
             <returns>The new service manager.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.Init">
             <summary>Initialises this object.</summary>
            
             <exception cref="T:System.IO.InvalidDataException">Thrown when an Invalid Data error condition occurs.</exception>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.Configure(Funq.Container)">
             <summary>Configures the given container.</summary>
            
             <param name="container">The container.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.SetAppDomainData">
            <summary>Sets application domain data.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.Start(System.String)">
             <summary>Starts the Web Service.</summary>
            
             <param name="urlBase">A Uri that acts as the base that the server is listening on. Format should be: http://127.0.0.1:8080/ or http://127.0.0.1:8080/somevirtual/Note: the trailing slash is
             required! For more info see the HttpListener.Prefixes property on MSDN.
             </param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.Start(System.String,System.Threading.WaitCallback)">
            <summary>
            Starts the Web Service
            </summary>
            <param name="urlBase">
            A Uri that acts as the base that the server is listening on.
            Format should be: http://127.0.0.1:8080/ or http://127.0.0.1:8080/somevirtual/
            Note: the trailing slash is required! For more info see the
            HttpListener.Prefixes property on MSDN.
            </param>
            <param name="listenCallback"></param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.RaiseReceiveWebRequest(System.Net.HttpListenerContext)">
             <summary>Raises the receive web request event.</summary>
            
             <param name="context">.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.Stop">
            <summary>
            Shut down the Web Service
            </summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.ProcessRequest(System.Net.HttpListenerContext)">
            <summary>
            Overridable method that can be used to implement a custom hnandler
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.SetConfig(NServiceKit.WebHost.Endpoints.EndpointHostConfig)">
             <summary>Sets a configuration.</summary>
            
             <param name="config">The configuration.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.RegisterAs``2">
             <summary>AutoWired Registration of an interface with a concrete type in AppHost IOC on Startup.</summary>
            
             <typeparam name="T">  .</typeparam>
             <typeparam name="TAs">.</typeparam>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.Release(System.Object)">
             <summary>Allows the clean up for executed autowired services and filters. Calls directly after services and filters are executed.</summary>
            
             <param name="instance">.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.OnEndRequest">
            <summary>Called at the end of each request. Enables Request Scope.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.Register``1(``0)">
             <summary>Register dependency in AppHost IOC on Startup.</summary>
            
             <typeparam name="T">.</typeparam>
             <param name="instance">.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.TryResolve``1">
             <summary>Try resolve.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
            
             <returns>A T.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.Resolve``1">
            <summary>
            Resolves from IoC container a specified type instance.
            </summary>
            <typeparam name="T">Type to be resolved.</typeparam>
            <returns>Instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.ResolveService``1(System.Net.HttpListenerContext)">
            <summary>
            Resolves and auto-wires a NServiceKit Service
            </summary>
            <typeparam name="T">Type to be resolved.</typeparam>
            <returns>Instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.ResolveService``1(System.Net.HttpListenerRequest,System.Net.HttpListenerResponse)">
             <summary>Resolves and auto-wires a NServiceKit Service.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="httpReq">The HTTP request.</param>
             <param name="httpRes">The HTTP resource.</param>
            
             <returns>Instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.ResolveService``1(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse)">
             <summary>Resolves and auto-wires a NServiceKit Service.</summary>
            
             <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="httpReq">The HTTP request.</param>
             <param name="httpRes">The HTTP resource.</param>
            
             <returns>Instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.CreateServiceRunner``1(NServiceKit.WebHost.Endpoints.ActionContext)">
             <summary>Create a service runner for IService actions.</summary>
            
             <typeparam name="TRequest">Type of the request.</typeparam>
             <param name="actionContext">Context for the action.</param>
            
             <returns>The new service runner.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.ResolveAbsoluteUrl(System.String,NServiceKit.ServiceHost.IHttpRequest)">
             <summary>Resolve the absolute url for this request.</summary>
            
             <param name="virtualPath">Full pathname of the virtual file.</param>
             <param name="httpReq">    The HTTP request.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.LoadPlugin(NServiceKit.WebHost.Endpoints.IPlugin[])">
             <summary>Apply plugins to this AppHost.</summary>
            
             <param name="plugins">.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.RegisterService(System.Type,System.String[])">
             <summary>Register an Adhoc web service on Startup.</summary>
            
             <param name="serviceType">.</param>
             <param name="atRestPaths">.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.AddUrlReservationToAcl(System.String)">
            <summary>
            Reserves the specified URL for non-administrator users and accounts. 
            http://msdn.microsoft.com/en-us/library/windows/desktop/cc307223(v=vs.85).aspx
            </summary>
            <returns>Reserved Url if the process completes successfully</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.RemoveUrlReservationFromAcl(System.String)">
             <summary>Removes the URL reservation from ACL described by urlBase.</summary>
            
             <param name="urlBase">A Uri that acts as the base that the server is listening on. Format should be: http://127.0.0.1:8080/ or http://127.0.0.1:8080/somevirtual/Note: the trailing slash is
             required! For more info see the HttpListener.Prefixes property on MSDN.
             </param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.Dispose(System.Boolean)">
             <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
            
             <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.Instance">
             <summary>Gets the instance.</summary>
            
             <value>The instance.</value>
        </member>
        <member name="E:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.ReceiveWebRequest">
            <summary>Occurs when Receive Web Request.</summary>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.Container">
             <summary>Gets the container.</summary>
            
             <value>The container.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.ServiceController">
             <summary>Gets the service controller.</summary>
            
             <value>The service controller.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.Routes">
             <summary>Register user-defined custom routes.</summary>
            
             <value>The routes.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.RequestBinders">
             <summary>Provide a custom model minder for a specific Request DTO.</summary>
            
             <value>The request binders.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.ContentTypeFilters">
             <summary>Register custom ContentType serializers.</summary>
            
             <value>The content type filters.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.PreRequestFilters">
             <summary>Add Request Filters, to be applied before the dto is deserialized.</summary>
            
             <value>The pre request filters.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.RequestFilters">
             <summary>Add Request Filters.</summary>
            
             <value>The request filters.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.ResponseFilters">
             <summary>Add Response Filters.</summary>
            
             <value>The response filters.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.ViewEngines">
             <summary>Add alternative HTML View Engines.</summary>
            
             <value>The view engines.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.ExceptionHandler">
             <summary>Provide an exception handler for un-caught exceptions.</summary>
            
             <value>The exception handler.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.ServiceExceptionHandler">
             <summary>Provide an exception handler for unhandled exceptions.</summary>
            
             <value>The service exception handler.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.CatchAllHandlers">
             <summary>Provide a catch-all handler that doesn't match any routes.</summary>
            
             <value>The catch all handlers.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.Config">
             <summary>The AppHost config.</summary>
            
             <value>The configuration.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.Plugins">
            TODO: plugin added with .Add method after host initialization won't be configured. Each plugin should have state so we can invoke Register method if host was already started.  
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.HttpListenerBase.VirtualPathProvider">
             <summary>Virtual access to file resources.</summary>
            
             <value>The virtual path provider.</value>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.AppHostHttpListenerBase.#ctor">
            <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.AppHostHttpListenerBase class.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.AppHostHttpListenerBase.#ctor(System.String,System.Reflection.Assembly[])">
             <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.AppHostHttpListenerBase class.</summary>
            
             <param name="serviceName">           Name of the service.</param>
             <param name="assembliesWithServices">A variable-length parameters list containing assemblies with services.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.AppHostHttpListenerBase.#ctor(System.String,System.String,System.Reflection.Assembly[])">
             <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.AppHostHttpListenerBase class.</summary>
            
             <param name="serviceName">           Name of the service.</param>
             <param name="handlerPath">           Full pathname of the handler file.</param>
             <param name="assembliesWithServices">A variable-length parameters list containing assemblies with services.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.AppHostHttpListenerBase.ProcessRequest(System.Net.HttpListenerContext)">
             <summary>Overridable method that can be used to implement a custom hnandler.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <param name="context">.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.AppHostHttpListenerLongRunningBase.#ctor(System.Int32)">
             <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.AppHostHttpListenerLongRunningBase class.</summary>
            
             <param name="poolSize">Size of the pool.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.AppHostHttpListenerLongRunningBase.#ctor(System.String,System.Reflection.Assembly[])">
             <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.AppHostHttpListenerLongRunningBase class.</summary>
            
             <param name="serviceName">           Name of the service.</param>
             <param name="assembliesWithServices">A variable-length parameters list containing assemblies with services.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.AppHostHttpListenerLongRunningBase.#ctor(System.String,System.Int32,System.Reflection.Assembly[])">
             <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.AppHostHttpListenerLongRunningBase class.</summary>
            
             <param name="serviceName">           Name of the service.</param>
             <param name="poolSize">              Size of the pool.</param>
             <param name="assembliesWithServices">A variable-length parameters list containing assemblies with services.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.AppHostHttpListenerLongRunningBase.#ctor(System.String,System.String,System.Reflection.Assembly[])">
             <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.AppHostHttpListenerLongRunningBase class.</summary>
            
             <param name="serviceName">           Name of the service.</param>
             <param name="handlerPath">           Full pathname of the handler file.</param>
             <param name="assembliesWithServices">A variable-length parameters list containing assemblies with services.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.AppHostHttpListenerLongRunningBase.#ctor(System.String,System.String,System.Int32,System.Reflection.Assembly[])">
             <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.AppHostHttpListenerLongRunningBase class.</summary>
            
             <param name="serviceName">           Name of the service.</param>
             <param name="handlerPath">           Full pathname of the handler file.</param>
             <param name="poolSize">              Size of the pool.</param>
             <param name="assembliesWithServices">A variable-length parameters list containing assemblies with services.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.AppHostHttpListenerLongRunningBase.Dispose(System.Boolean)">
             <summary>Releases the unmanaged resources used by the NServiceKit.WebHost.Endpoints.AppHostHttpListenerLongRunningBase and optionally releases the managed resources.</summary>
            
             <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.AppHostHttpListenerLongRunningBase.Start(System.String)">
             <summary>Starts.</summary>
            
             <param name="urlBase">The URL base.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.AppHostHttpListenerLongRunningBase.ThreadPoolManager.#ctor(System.Int32)">
             <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.AppHostHttpListenerLongRunningBase.ThreadPoolManager class.</summary>
            
             <param name="poolSize">Size of the pool.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.AppHostHttpListenerLongRunningBase.ThreadPoolManager.Peek(System.Threading.ThreadStart)">
             <summary>Returns the top-of-stack object without removing it.</summary>
            
             <param name="threadStart">The thread start to peek.</param>
            
             <returns>The current top-of-stack object.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.AppHostHttpListenerLongRunningBase.ThreadPoolManager.Free">
            <summary>Frees this object.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.AppHostHttpListenerLongRunningBase.ThreadPoolManager.Dispose">
            <summary>
            Exécute les tâches définies par l'application associées à la libération ou à la redéfinition des ressources non managées.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper">
            <content>A HTTP listener request wrapper.</content>
            <summary>A HTTP listener request wrapper.</summary>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.validate_cookies">
             <summary>Gets the validate form.</summary>
            
             <exception cref="T:System.Web.HttpRequestValidationException">Thrown when a HTTP Request Validation error condition occurs.</exception>
            
             <value>The validate form.</value>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.validate_query_string">
             <summary>Gets the validate form.</summary>
            
             <exception cref="T:System.Web.HttpRequestValidationException">Thrown when a HTTP Request Validation error condition occurs.</exception>
            
             <value>The validate form.</value>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.validate_form">
             <summary>Gets the validate form.</summary>
            
             <exception cref="T:System.Web.HttpRequestValidationException">Thrown when a HTTP Request Validation error condition occurs.</exception>
            
             <value>The validate form.</value>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.checked_cookies">
             <summary>Gets the checked form.</summary>
            
             <exception cref="T:System.Web.HttpRequestValidationException">Thrown when a HTTP Request Validation error condition occurs.</exception>
            
             <value>The checked form.</value>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.checked_query_string">
             <summary>Gets the checked form.</summary>
            
             <exception cref="T:System.Web.HttpRequestValidationException">Thrown when a HTTP Request Validation error condition occurs.</exception>
            
             <value>The checked form.</value>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.checked_form">
             <summary>Gets the checked form.</summary>
            
             <exception cref="T:System.Web.HttpRequestValidationException">Thrown when a HTTP Request Validation error condition occurs.</exception>
            
             <value>The checked form.</value>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.ValidateInput">
            <summary>Validates the input.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.#ctor(System.Net.HttpListenerRequest)">
             <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper class.</summary>
            
             <param name="request">The request.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.#ctor(System.String,System.Net.HttpListenerRequest)">
             <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper class.</summary>
            
             <param name="operationName">The name of the operation.</param>
             <param name="request">      The request.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.TryResolve``1">
             <summary>Try resolve.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
            
             <returns>A T.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.GetRawBody">
             <summary>The entire string contents of Request.InputStream.</summary>
            
             <returns>The raw body.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.Param(System.String)">
             <summary>Parameters.</summary>
            
             <param name="name">The name.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.GetEncoding(System.String)">
             <summary>Gets an encoding.</summary>
            
             <param name="contentTypeHeader">The content type header.</param>
            
             <returns>The encoding.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.GetHandlerPathIfAny(System.String)">
             <summary>Gets handler path if any.</summary>
            
             <param name="listenerUrl">URL of the listener.</param>
            
             <returns>The handler path if any.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.NormalizePathInfo(System.String,System.String)">
             <summary>Normalize path information.</summary>
            
             <param name="pathInfo">   Information describing the path.</param>
             <param name="handlerPath">Full pathname of the handler file.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.Form">
             <summary>Gets the form.</summary>
            
             <value>The form.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.Container">
             <summary>Gets or sets the container.</summary>
            
             <value>The container.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.Request">
             <summary>Gets the request.</summary>
            
             <value>The request.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.OriginalRequest">
             <summary>The underlying ASP.NET or HttpListener HttpRequest.</summary>
            
             <value>The original request.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.OperationName">
             <summary>The name of the service being called (e.g. Request DTO Name)</summary>
            
             <value>The name of the operation.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.RawUrl">
             <summary>Gets URL of the raw.</summary>
            
             <value>The raw URL.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.AbsoluteUri">
             <summary>Gets URI of the absolute.</summary>
            
             <value>The absolute URI.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.UserHostAddress">
             <summary>The Remote Ip as reported by Request.UserHostAddress.</summary>
            
             <value>The user host address.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.XForwardedFor">
             <summary>The value of the X-Forwarded-For header, null if null or empty.</summary>
            
             <value>The x coordinate forwarded for.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.XRealIp">
             <summary>The value of the X-Real-IP header, null if null or empty.</summary>
            
             <value>The x coordinate real IP.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.RemoteIp">
             <summary>The Remote Ip as reported by X-Forwarded-For, X-Real-IP or Request.UserHostAddress.</summary>
            
             <value>The remote IP.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.IsSecureConnection">
             <summary>e.g. is https or not.</summary>
            
             <value>true if this object is secure connection, false if not.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.AcceptTypes">
             <summary>Gets a list of types of the accepts.</summary>
            
             <value>A list of types of the accepts.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.Items">
             <summary>Attach any data to this request that all filters and services can access.</summary>
            
             <value>The items.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.ResponseContentType">
             <summary>The expected Response ContentType for this request.</summary>
            
             <value>The type of the response content.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.PathInfo">
             <summary>Gets information describing the path.</summary>
            
             <value>Information describing the path.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.Cookies">
             <summary>Gets the cookies.</summary>
            
             <value>The cookies.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.UserAgent">
             <summary>Gets the user agent.</summary>
            
             <value>The user agent.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.Headers">
             <summary>Gets the headers.</summary>
            
             <value>The headers.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.QueryString">
             <summary>Gets the query string.</summary>
            
             <value>The query string.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.FormData">
             <summary>Gets information describing the form.</summary>
            
             <value>Information describing the form.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.IsLocal">
             <summary>Gets a value indicating whether this object is local.</summary>
            
             <value>true if this object is local, false if not.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.HttpMethod">
             <summary>Gets the HTTP method.</summary>
            
             <value>The HTTP method.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.ContentType">
             <summary>The request ContentType.</summary>
            
             <value>The type of the content.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.ContentEncoding">
             <summary>Gets the content encoding.</summary>
            
             <value>The content encoding.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.UrlReferrer">
             <summary>The value of the Referrer, null if not available.</summary>
            
             <value>The URL referrer.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.UseBufferedStream">
             <summary>Buffer the Request InputStream so it can be re-read.</summary>
            
             <value>true if use buffered stream, false if not.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.InputStream">
             <summary>Gets the input stream.</summary>
            
             <value>The input stream.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.ContentLength">
             <summary>Gets the length of the content.</summary>
            
             <value>The length of the content.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.ApplicationFilePath">
             <summary>Gets the full pathname of the application file.</summary>
            
             <value>The full pathname of the application file.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.Files">
             <summary>Access to the multi-part/formdata files posted on this request.</summary>
            
             <value>The files.</value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.HttpFileCollection">
            <summary>Collection of HTTP files.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.HttpFileCollection.CopyTo(System.Array,System.Int32)">
             <summary>Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
            
             <param name="dest"> The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The
             <see cref="T:System.Array" /> must have zero-based indexing.
             </param>
             <param name="index">The zero-based index in <paramref name="dest" /> at which copying begins.</param>
            
             ### <exception cref="T:System.ArgumentNullException">      <paramref name="dest" /> is null.</exception>
             ### <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> is less than zero.</exception>
             ### <exception cref="T:System.ArgumentException">          <paramref name="dest" /> is multidimensional.-or- The number of elements in the source
             <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="dest" />.-or- The type of the
             source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="dest" />
             </exception>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.HttpFileCollection.GetKey(System.Int32)">
             <summary>Gets a key.</summary>
            
             <param name="index">The index to get.</param>
            
             <returns>The key.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.HttpFileCollection.Get(System.Int32)">
             <summary>Gets.</summary>
            
             <param name="index">The index to get.</param>
            
             <returns>A HttpPostedFile.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.HttpFileCollection.Get(System.String)">
             <summary>Gets.</summary>
            
             <param name="key">The key to get.</param>
            
             <returns>A HttpPostedFile.</returns>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.HttpFileCollection.Item(System.String)">
             <summary>Indexer to get items within this collection using array index syntax.</summary>
            
             <param name="key">The key.</param>
            
             <returns>The indexed item.</returns>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.HttpFileCollection.Item(System.Int32)">
             <summary>Indexer to get items within this collection using array index syntax.</summary>
            
             <param name="index">Zero-based index of the entry to access.</param>
            
             <returns>The indexed item.</returns>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.HttpFileCollection.AllKeys">
             <summary>Gets all keys.</summary>
            
             <value>all keys.</value>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.WebROCollection.Protect">
            <summary>Protects this object.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.WebROCollection.Unprotect">
            <summary>Unprotects this object.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.WebROCollection.ToString">
             <summary>Returns a string that represents the current object.</summary>
            
             <returns>A string that represents the current object.</returns>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.WebROCollection.GotID">
             <summary>Gets a value indicating whether the got identifier.</summary>
            
             <value>true if got identifier, false if not.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.WebROCollection.ID">
             <summary>Gets or sets the identifier.</summary>
            
             <value>The identifier.</value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.HttpPostedFile">
            <summary>A HTTP posted file.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.HttpPostedFile.SaveAs(System.String)">
             <summary>Saves as.</summary>
            
             <param name="filename">Filename of the file.</param>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.HttpPostedFile.ContentType">
             <summary>Gets the type of the content.</summary>
            
             <value>The type of the content.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.HttpPostedFile.ContentLength">
             <summary>Gets the length of the content.</summary>
            
             <value>The length of the content.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.HttpPostedFile.FileName">
             <summary>Gets the filename of the file.</summary>
            
             <value>The name of the file.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.HttpPostedFile.InputStream">
             <summary>Gets the input stream.</summary>
            
             <value>The input stream.</value>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.HttpPostedFile.ReadSubStream.#ctor(System.IO.Stream,System.Int64,System.Int64)">
             <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.HttpPostedFile.ReadSubStream class.</summary>
            
             <param name="s">     The Stream to process.</param>
             <param name="offset">The zero-based byte offset in <paramref name="s" /> at which to begin copying bytes to the current stream.</param>
             <param name="length">A long value representing the length of the stream in bytes.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.HttpPostedFile.ReadSubStream.Flush">
            <summary>When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.HttpPostedFile.ReadSubStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</summary>
            
             <exception cref="T:System.ArgumentNullException">      Thrown when one or more required arguments are null.</exception>
             <exception cref="T:System.ArgumentOutOfRangeException">Thrown when one or more arguments are outside the required range.</exception>
             <exception cref="T:System.ArgumentException">          Thrown when one or more arguments have unsupported or illegal values.</exception>
            
             <param name="buffer">     An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="dest_offset"/> and
             (<paramref name="dest_offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the current source.
             </param>
             <param name="dest_offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream.</param>
             <param name="count">      The maximum number of bytes to be read from the current stream.</param>
            
             <returns>
             The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been
             reached.
             </returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.HttpPostedFile.ReadSubStream.ReadByte">
             <summary>Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.</summary>
            
             <returns>The unsigned byte cast to an Int32, or -1 if at the end of the stream.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.HttpPostedFile.ReadSubStream.Seek(System.Int64,System.IO.SeekOrigin)">
             <summary>When overridden in a derived class, sets the position within the current stream.</summary>
            
             <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or illegal values.</exception>
            
             <param name="d">     The long to process.</param>
             <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.</param>
            
             <returns>The new position within the current stream.</returns>
            
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.HttpPostedFile.ReadSubStream.SetLength(System.Int64)">
             <summary>When overridden in a derived class, sets the length of the current stream.</summary>
            
             <exception cref="T:System.NotSupportedException">Thrown when the requested operation is not supported.</exception>
            
             <param name="value">The desired length of the current stream in bytes.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.HttpPostedFile.ReadSubStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</summary>
            
             <exception cref="T:System.NotSupportedException">Thrown when the requested operation is not supported.</exception>
            
             <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream.</param>
             <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream.</param>
             <param name="count"> The number of bytes to be written to the current stream.</param>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.HttpPostedFile.ReadSubStream.CanRead">
             <summary>When overridden in a derived class, gets a value indicating whether the current stream supports reading.</summary>
            
             <value>true if the stream supports reading; otherwise, false.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.HttpPostedFile.ReadSubStream.CanSeek">
             <summary>When overridden in a derived class, gets a value indicating whether the current stream supports seeking.</summary>
            
             <value>true if the stream supports seeking; otherwise, false.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.HttpPostedFile.ReadSubStream.CanWrite">
             <summary>When overridden in a derived class, gets a value indicating whether the current stream supports writing.</summary>
            
             <value>true if the stream supports writing; otherwise, false.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.HttpPostedFile.ReadSubStream.Length">
             <summary>When overridden in a derived class, gets the length in bytes of the stream.</summary>
            
             <value>A long value representing the length of the stream in bytes.</value>
            
             ### <exception cref="T:System.NotSupportedException">  A class derived from Stream does not support seeking.</exception>
             ### <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.HttpPostedFile.ReadSubStream.Position">
             <summary>When overridden in a derived class, gets or sets the position within the current stream.</summary>
            
             <exception cref="T:System.ArgumentOutOfRangeException">Thrown when one or more arguments are outside the required range.</exception>
            
             <value>The current position within the stream.</value>
            
             ### <exception cref="T:System.IO.IOException">         An I/O error occurs.</exception>
             ### <exception cref="T:System.NotSupportedException">  The stream does not support seeking.</exception>
             ### <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.Helpers.InvariantCulture">
            <summary>The invariant culture.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.StrUtils.StartsWith(System.String,System.String)">
             <summary>Starts with.</summary>
            
             <param name="str1">The first string.</param>
             <param name="str2">The second string.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.StrUtils.StartsWith(System.String,System.String,System.Boolean)">
             <summary>Starts with.</summary>
            
             <param name="str1">       The first string.</param>
             <param name="str2">       The second string.</param>
             <param name="ignore_case">true to ignore case.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.StrUtils.EndsWith(System.String,System.String)">
             <summary>Ends with.</summary>
            
             <param name="str1">The first string.</param>
             <param name="str2">The second string.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.StrUtils.EndsWith(System.String,System.String,System.Boolean)">
             <summary>Ends with.</summary>
            
             <param name="str1">       The first string.</param>
             <param name="str2">       The second string.</param>
             <param name="ignore_case">true to ignore case.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.HttpMultipart.ReadNextElement">
             <summary>Reads next element.</summary>
            
             <returns>The next element.</returns>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.HttpMultipart.Element">
            <summary>An element.</summary>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.HttpMultipart.Element.ContentType">
            <summary>Type of the content.</summary>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.HttpMultipart.Element.Name">
            <summary>The name.</summary>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.HttpMultipart.Element.Filename">
            <summary>Filename of the file.</summary>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.HttpMultipart.Element.Encoding">
            <summary>The encoding.</summary>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.HttpMultipart.Element.Start">
            <summary>The start.</summary>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.HttpMultipart.Element.Length">
            <summary>The length.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerRequestWrapper.HttpMultipart.Element.ToString">
             <summary>Returns a string that represents the current object.</summary>
            
             <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Extensions.HttpResponseStreamExtensions">
            <summary>A HTTP response stream extensions.</summary>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.Extensions.HttpResponseStreamExtensions.IsMonoFastCgi">
            <summary>true if this object is mono fast CGI.</summary>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.Extensions.HttpResponseStreamExtensions.IsHttpListener">
            <summary>true if this object is HTTP listener.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpResponseStreamExtensions.CloseOutputStream(System.Web.HttpResponse)">
             <summary>A HttpListenerResponse extension method that closes output stream.</summary>
            
             <param name="response">The response to act on.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpResponseStreamExtensions.CloseOutputStream(System.Net.HttpListenerResponse)">
             <summary>A HttpListenerResponse extension method that closes output stream.</summary>
            
             <param name="response">The response to act on.</param>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Formats.CsvFormat">
            <summary>A CSV format.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Formats.CsvFormat.Register(NServiceKit.WebHost.Endpoints.IAppHost)">
             <summary>Registers this object.</summary>
            
             <param name="appHost">The application host.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Formats.CsvFormat.SerializeToStream(NServiceKit.ServiceHost.IRequestContext,System.Object,System.IO.Stream)">
             <summary>Serialize to stream.</summary>
            
             <param name="requestContext">Context for the request.</param>
             <param name="request">       The request.</param>
             <param name="stream">        The stream.</param>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.HttpHandlerResolverDelegate">
             <summary>HTTP handler resolver delegate.</summary>
            
             <param name="httpMethod">The HTTP method.</param>
             <param name="pathInfo">  Information describing the path.</param>
             <param name="filePath">  Full pathname of the file.</param>
            
             <returns>An IHttpHandler.</returns>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.StreamSerializerResolverDelegate">
             <summary>Stream serializer resolver delegate.</summary>
            
             <param name="requestContext">Context for the request.</param>
             <param name="dto">           The dto.</param>
             <param name="httpRes">       The HTTP resource.</param>
            
             <returns>A bool.</returns>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.HandleUncaughtExceptionDelegate">
             <summary>Handles the uncaught exception delegate.</summary>
            
             <param name="httpReq">      The HTTP request.</param>
             <param name="httpRes">      The HTTP resource.</param>
             <param name="operationName">Name of the operation.</param>
             <param name="ex">           The ex.</param>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.HandleServiceExceptionDelegate">
             <summary>Handles the service exception delegate.</summary>
            
             <param name="httpReq">The HTTP request.</param>
             <param name="request">The request.</param>
             <param name="ex">     The ex.</param>
            
             <returns>An object.</returns>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.FallbackRestPathDelegate">
             <summary>Fallback rest path delegate.</summary>
            
             <param name="httpMethod">The HTTP method.</param>
             <param name="pathInfo">  Information describing the path.</param>
             <param name="filePath">  Full pathname of the file.</param>
            
             <returns>A RestPath.</returns>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.ActionHandler">
            <summary>An action handler.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.ActionHandler.#ctor(System.Func{NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse,System.Object},System.String)">
             <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.ActionHandler class.</summary>
            
             <param name="action">       The action.</param>
             <param name="operationName">Name of the operation.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.ActionHandler.ProcessRequest(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse,System.String)">
             <summary>Enables processing of HTTP Web requests by a custom HttpHandler that implements the <see cref="T:System.Web.IHttpHandler"/> interface.</summary>
            
             <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            
             <param name="httpReq">      The HTTP request.</param>
             <param name="httpRes">      The HTTP resource.</param>
             <param name="operationName">Name of the operation.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.ActionHandler.ProcessRequest(System.Web.HttpContext)">
             <summary>Enables processing of HTTP Web requests by a custom HttpHandler that implements the <see cref="T:System.Web.IHttpHandler" /> interface.</summary>
            
             <param name="context">An <see cref="T:System.Web.HttpContext" /> object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) used to
             service HTTP requests.
             </param>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.ActionHandler.OperationName">
             <summary>Gets or sets the name of the operation.</summary>
            
             <value>The name of the operation.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.ActionHandler.Action">
             <summary>Gets or sets the action.</summary>
            
             <value>The action.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.ActionHandler.IsReusable">
             <summary>Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler" /> instance.</summary>
            
             <value>true if the <see cref="T:System.Web.IHttpHandler" /> instance is reusable; otherwise, false.</value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.DirectiveBlock">
            <summary>
            
            </summary>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.StatementExprBlock">
            <summary>
            
            </summary>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.TemplateBlock">
            <summary>
            
            </summary>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Support.Markdown.ITemplateWriter">
            <summary>Interface for template writer.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.ITemplateWriter.Write(NServiceKit.Markdown.MarkdownViewBase,System.IO.TextWriter,System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>Writes.</summary>
            
             <param name="instance">  The instance.</param>
             <param name="textWriter">The text writer.</param>
             <param name="scopeArgs"> The scope arguments.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.TemplateBlock.CreatePageContext">
            <summary>
            Creates the page context.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.TemplateBlock.DoFirstRun(NServiceKit.WebHost.Endpoints.Support.Markdown.PageContext)">
            <summary>
            Does the first run.
            </summary>
            <param name="pageContext">The page context.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.TemplateBlock.AfterFirstRun(NServiceKit.WebHost.Endpoints.Support.Markdown.Evaluator)">
            <summary>
            Afters the first run.
            </summary>
            <param name="evaluator">The evaluator.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.TemplateBlock.OnFirstRun">
            <summary>
            Called when [first run].
            </summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.TemplateBlock.OnAfterFirstRun">
            <summary>
            Called when [after first run].
            </summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.TemplateBlock.AddEvalItem(NServiceKit.WebHost.Endpoints.Support.Markdown.EvaluatorItem)">
            <summary>
            Adds the eval item.
            </summary>
            <param name="evalItem">The eval item.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.TemplateBlock.TransformHtml(System.String)">
            <summary>
            Transforms the HTML.
            </summary>
            <param name="markdownText">The markdown text.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.TemplateBlock.CleanHtml(System.String)">
            <summary>
            Cleans the HTML.
            </summary>
            <param name="html">The HTML.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.TemplateBlock.Transform(System.String)">
            <summary>
            Transforms the specified markdown text.
            </summary>
            <param name="markdownText">The markdown text.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.TemplateBlock.Write(NServiceKit.Markdown.MarkdownViewBase,System.IO.TextWriter,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Writes the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <param name="textWriter">The text writer.</param>
            <param name="scopeArgs">The scope arguments.</param>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.TemplateBlock.Page">
            <summary>
            Gets or sets the page.
            </summary>
            <value>
            The page.
            </value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.TemplateBlock.Evaluator">
            <summary>
            Gets or sets the evaluator.
            </summary>
            <value>
            The evaluator.
            </value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.TemplateBlock.IsNested">
            <summary>
            Gets or sets a value indicating whether this instance is nested.
            </summary>
            <value>
              <c>true</c> if this instance is nested; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.TemplateBlock.WriteRawHtml">
            <summary>
            Gets or sets a value indicating whether [write raw HTML].
            </summary>
            <value>
              <c>true</c> if [write raw HTML]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.TemplateBlock.RenderHtml">
            <summary>
            Gets or sets a value indicating whether [render HTML].
            </summary>
            <value>
              <c>true</c> if [render HTML]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.TemplateBlock.ScopeArgs">
            <summary>
            Gets or sets the scope arguments.
            </summary>
            <value>
            The scope arguments.
            </value>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.StatementExprBlock.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.StatementExprBlock"/> class.
            </summary>
            <param name="condition">The condition.</param>
            <param name="statement">The statement.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.StatementExprBlock.Prepare(System.Collections.Generic.List{NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.StatementExprBlock})">
            <summary>
            Prepares the specified all statements.
            </summary>
            <param name="allStatements">All statements.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.StatementExprBlock.OnFirstRun(System.Boolean)">
            <summary>
            Called when [first run].
            </summary>
            <param name="applyToChildren">if set to <c>true</c> [apply to children].</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.StatementExprBlock.OnFirstRun">
            <summary>Called when [first run].</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.StatementExprBlock.OnAfterFirstRun">
            <summary>Called when [after first run].</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.StatementExprBlock.Write(NServiceKit.Markdown.MarkdownViewBase,System.IO.TextWriter,System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>Writes the specified instance.</summary>
            
             <param name="instance">  The instance.</param>
             <param name="textWriter">The text writer.</param>
             <param name="scopeArgs"> The scope arguments.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.StatementExprBlock.Extract(System.String,System.Collections.Generic.List{NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.StatementExprBlock})">
            <summary>
            Extracts the specified content.
            </summary>
            <param name="content">The content.</param>
            <param name="allStatements">All statements.</param>
            <returns></returns>
            <exception cref="T:System.IO.InvalidDataException">Unterminated Comment at charIndex:  + pos</exception>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.StatementExprBlock.WriteStatement(NServiceKit.Markdown.MarkdownViewBase,System.IO.TextWriter,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Writes the statement.
            </summary>
            <param name="instance">The instance.</param>
            <param name="textWriter">The text writer.</param>
            <param name="scopeArgs">The scope arguments.</param>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.StatementExprBlock.Condition">
            <summary>
            Gets or sets the condition.
            </summary>
            <value>
            The condition.
            </value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.StatementExprBlock.Statement">
            <summary>
            Gets or sets the statement.
            </summary>
            <value>
            The statement.
            </value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.StatementExprBlock.ChildBlocks">
            <summary>
            Gets or sets the child blocks.
            </summary>
            <value>
            The child blocks.
            </value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.StatementExprBlock.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.DirectiveBlock.GetType(System.String)">
            <summary>
            Gets the type.
            </summary>
            <param name="typeName">Name of the type.</param>
            <returns></returns>
            <exception cref="T:System.TypeLoadException">Could not load type:  + typeName</exception>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.DirectiveBlock.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.DirectiveBlock"/> class.
            </summary>
            <param name="directive">The directive.</param>
            <param name="line">The line.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.DirectiveBlock.OnFirstRun">
            <summary>Called when [first run].</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.DirectiveBlock.Write(NServiceKit.Markdown.MarkdownViewBase,System.IO.TextWriter,System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>Writes the specified instance.</summary>
            
             <param name="instance">  The instance.</param>
             <param name="textWriter">The text writer.</param>
             <param name="scopeArgs"> The scope arguments.</param>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.DirectiveBlock.BaseType">
            <summary>
            Gets or sets the base type.
            </summary>
            <value>
            The base type
            </value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.DirectiveBlock.GenericArgs">
            <summary>
            Gets or sets the generic arguments.
            </summary>
            <value>
            The generic arguments.
            </value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.DirectiveBlock.Helpers">
            <summary>
            Gets or sets the helpers.
            </summary>
            <value>
            The helpers.
            </value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.DirectiveBlock.TemplatePath">
            <summary>
            Gets or sets the template path.
            </summary>
            <value>
            The template path.
            </value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.DirectiveBlock.VarDeclarations">
            <summary>
            Gets or sets the variable declarations.
            </summary>
            <value>
            The variable declarations.
            </value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.EvalExprStatementBase">
            <summary>
            
            </summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.EvalExprStatementBase.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.EvalExprStatementBase"/> class.
            </summary>
            <param name="condition">The condition.</param>
            <param name="statement">The statement.</param>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.EvalExprStatementBase.ReturnType">
            <summary>Type of the return.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.EvalExprStatementBase.GetParamNames(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Gets the parameter names.
            </summary>
            <param name="scopeArgs">The scope arguments.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.EvalExprStatementBase.OnFirstRun">
            <summary>Called when [first run].</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.EvalExprStatementBase.GetExprParams">
            <summary>
            Gets the expr parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.EvalExprStatementBase.GetParamValues(System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Gets the parameter values.
            </summary>
            <param name="scopeArgs">The scope arguments.</param>
            <param name="defaultToNullValues">if set to <c>true</c> [default to null values].</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Unresolved param  + paramName +  in  + Condition</exception>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.EvalExprStatementBase.GetParamValues(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Gets the parameter values.
            </summary>
            <param name="scopeArgs">The scope arguments.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.EvalExprStatementBase.Evaluate``1(System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Evaluates the specified scope arguments.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="scopeArgs">The scope arguments.</param>
            <param name="defaultToNullValues">if set to <c>true</c> [default to null values].</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.EvalExprStatementBase.Evaluate``1(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Evaluates the specified scope arguments.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="scopeArgs">The scope arguments.</param>
            <returns></returns>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.EvalExprStatementBase.CodeGenMethodName">
            <summary>
            Gets or sets the name of the code gen method.
            </summary>
            <value>
            The name of the code gen method.
            </value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.ForEachStatementExprBlock">
            <summary>
            
            </summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.ForEachStatementExprBlock.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.ForEachStatementExprBlock"/> class.
            </summary>
            <param name="condition">The condition.</param>
            <param name="statement">The statement.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.ForEachStatementExprBlock.OnFirstRun">
            <summary>Called when [first run].</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.ForEachStatementExprBlock.Write(NServiceKit.Markdown.MarkdownViewBase,System.IO.TextWriter,System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>Writes the specified instance.</summary>
            
             <param name="instance">  The instance.</param>
             <param name="textWriter">The text writer.</param>
             <param name="scopeArgs"> The scope arguments.</param>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.ForEachStatementExprBlock.EnumeratorName">
            <summary>
            Gets or sets the name of the enumerator.
            </summary>
            <value>
            The name of the enumerator.
            </value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.ForEachStatementExprBlock.MemberExpr">
            <summary>
            Gets or sets the member expr.
            </summary>
            <value>
            The member expr.
            </value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.ForEachStatementExprBlock.MemberVarName">
            <summary>
            Gets or sets the name of the member variable.
            </summary>
            <value>
            The name of the member variable.
            </value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.IfStatementExprBlock">
            <summary>
            
            </summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.IfStatementExprBlock.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.IfStatementExprBlock"/> class.
            </summary>
            <param name="condition">The condition.</param>
            <param name="statement">The statement.</param>
            <param name="elseStatement">The else statement.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.IfStatementExprBlock.Prepare(System.Collections.Generic.List{NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.StatementExprBlock})">
            <summary>
            Prepares the specified all statements.
            </summary>
            <param name="allStatements">All statements.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.IfStatementExprBlock.Write(NServiceKit.Markdown.MarkdownViewBase,System.IO.TextWriter,System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>Writes the specified instance.</summary>
            
             <param name="instance">  The instance.</param>
             <param name="textWriter">The text writer.</param>
             <param name="scopeArgs"> The scope arguments.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.IfStatementExprBlock.OnFirstRun">
            <summary>Called when [first run].</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.IfStatementExprBlock.WriteElseStatement(NServiceKit.Markdown.MarkdownViewBase,System.IO.TextWriter,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Writes the else statement.
            </summary>
            <param name="instance">The instance.</param>
            <param name="textWriter">The text writer.</param>
            <param name="scopeArgs">The scope arguments.</param>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.IfStatementExprBlock.ElseStatement">
            <summary>
            Gets or sets the else statement.
            </summary>
            <value>
            The else statement.
            </value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.IfStatementExprBlock.ElseChildBlocks">
            <summary>
            Gets or sets the else child blocks.
            </summary>
            <value>
            The else child blocks.
            </value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.MemberExprBlock">
            <summary>
            
            </summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.MemberExprBlock.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.MemberExprBlock"/> class.
            </summary>
            <param name="memberExpr">The member expr.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.MemberExprBlock.OnFirstRun">
            <summary>Called when [first run].</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.MemberExprBlock.Write(NServiceKit.Markdown.MarkdownViewBase,System.IO.TextWriter,System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>Writes the specified instance.</summary>
            
             <param name="instance">  The instance.</param>
             <param name="textWriter">The text writer.</param>
             <param name="scopeArgs"> The scope arguments.</param>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.MethodStatementExprBlock">
            <summary>
            
            </summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.MethodStatementExprBlock.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.MethodStatementExprBlock"/> class.
            </summary>
            <param name="methodExpr">The method expr.</param>
            <param name="condition">The condition.</param>
            <param name="statement">The statement.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.MethodStatementExprBlock.OnFirstRun">
            <summary>Called when [first run].</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.MethodStatementExprBlock.Write(NServiceKit.Markdown.MarkdownViewBase,System.IO.TextWriter,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Writes the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <param name="textWriter">The text writer.</param>
            <param name="scopeArgs">The scope arguments.</param>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.MethodStatementExprBlock.DependentPageName">
            <summary>
            Gets the name of the dependent page.
            </summary>
            <value>
            The name of the dependent page.
            </value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Support.Markdown.PageContext">
            <summary>
            
            </summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.PageContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NServiceKit.WebHost.Endpoints.Support.Markdown.PageContext"/> class.
            </summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.PageContext.#ctor(NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownPage,System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NServiceKit.WebHost.Endpoints.Support.Markdown.PageContext"/> class.
            </summary>
            <param name="markdownPage">The markdown page.</param>
            <param name="scopeArgs">The scope arguments.</param>
            <param name="renderHtml">if set to <c>true</c> [render HTML].</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.PageContext.Create(NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownPage,System.Boolean)">
            <summary>
            Creates the specified markdown page.
            </summary>
            <param name="markdownPage">The markdown page.</param>
            <param name="renderHtml">if set to <c>true</c> [render HTML].</param>
            <returns></returns>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.PageContext.MarkdownPage">
            <summary>
            Gets or sets the markdown page.
            </summary>
            <value>
            The markdown page.
            </value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.PageContext.ScopeArgs">
            <summary>
            Gets or sets the scope arguments.
            </summary>
            <value>
            The scope arguments.
            </value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.PageContext.RenderHtml">
            <summary>
            Gets or sets a value indicating whether [render HTML].
            </summary>
            <value>
              <c>true</c> if [render HTML]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.SectionStatementExprBlock">
            <summary>
            
            </summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.SectionStatementExprBlock.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.SectionStatementExprBlock"/> class.
            </summary>
            <param name="condition">The condition.</param>
            <param name="statement">The statement.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.SectionStatementExprBlock.Prepare">
            <summary>
            Prepares this instance.
            </summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.SectionStatementExprBlock.Write(NServiceKit.Markdown.MarkdownViewBase,System.IO.TextWriter,System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>Writes the specified instance.</summary>
            
             <param name="instance">  The instance.</param>
             <param name="textWriter">The text writer.</param>
             <param name="scopeArgs"> The scope arguments.</param>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.SectionStatementExprBlock.SectionName">
            <summary>
            Gets or sets the name of the section.
            </summary>
            <value>
            The name of the section.
            </value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.TextBlock">
            <summary>
            
            </summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.TextBlock.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.TextBlock"/> class.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.TextBlock.Write(NServiceKit.Markdown.MarkdownViewBase,System.IO.TextWriter,System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>Writes the specified instance.</summary>
            
             <param name="instance">  The instance.</param>
             <param name="textWriter">The text writer.</param>
             <param name="scopeArgs"> The scope arguments.</param>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.TextBlock.Content">
            <summary>
            Gets or sets the content.
            </summary>
            <value>
            The content.
            </value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.VarStatementExprBlock">
            <summary>
            
            </summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.VarStatementExprBlock.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.VarStatementExprBlock"/> class.
            </summary>
            <param name="directive">The directive.</param>
            <param name="line">The line.</param>
            <exception cref="T:System.ArgumentException">Expected 'var' got:  + directive</exception>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.VarStatementExprBlock.OnFirstRun">
             <summary>Called when [first run].</summary>
            
             <exception cref="T:System.IO.InvalidDataException">Thrown when an Invalid Data error condition occurs.</exception>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.VarStatementExprBlock.Write(NServiceKit.Markdown.MarkdownViewBase,System.IO.TextWriter,System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>Writes the specified instance.</summary>
            
             <param name="instance">  The instance.</param>
             <param name="textWriter">The text writer.</param>
             <param name="scopeArgs"> The scope arguments.</param>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Support.Templates.HtmlTemplates">
            <summary>A HTML templates.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Templates.HtmlTemplates.Format(System.String,System.Object[])">
             <summary>Formats.</summary>
            
             <param name="template">The template.</param>
             <param name="args">    A variable-length parameters list containing arguments.</param>
            
             <returns>The formatted value.</returns>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Templates.HtmlTemplates.IndexOperationsTemplate">
             <summary>Gets or sets the index operations template.</summary>
            
             <value>The index operations template.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Templates.HtmlTemplates.OperationControlTemplate">
             <summary>Gets or sets the operation control template.</summary>
            
             <value>The operation control template.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Templates.HtmlTemplates.OperationsControlTemplate">
             <summary>Gets or sets the operations control template.</summary>
            
             <value>The operations control template.</value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.RequestBindingException">
            <summary>Exception for signalling request binding errors.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.RequestBindingException.#ctor(System.String,System.Exception)">
             <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.RequestBindingException class.</summary>
            
             <param name="message">       The message.</param>
             <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Support.Markdown.EvaluatorExecutionContext">
            <summary>An evaluator execution context.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.EvaluatorExecutionContext.#ctor">
            <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.Support.Markdown.EvaluatorExecutionContext class.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.EvaluatorExecutionContext.Build">
             <summary>Gets the build.</summary>
            
             <returns>An Evaluator.</returns>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.EvaluatorExecutionContext.BaseType">
             <summary>Gets or sets the type of the base.</summary>
            
             <value>The type of the base.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.EvaluatorExecutionContext.GenericArgs">
             <summary>Gets or sets the generic arguments.</summary>
            
             <value>The generic arguments.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.EvaluatorExecutionContext.TypeProperties">
             <summary>Gets or sets the type properties.</summary>
            
             <value>The type properties.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.EvaluatorExecutionContext.Items">
             <summary>Gets the items.</summary>
            
             <value>The items.</value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Support.Markdown.Evaluator">
            <summary>An evaluator.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Evaluator.AddAssembly(System.String)">
             <summary>NOTE: This assumes that the assembly name will always be equal to the namespace.</summary>
            
             <param name="assemblyName">Name of the assembly.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Evaluator.FindType(System.String)">
             <summary>Searches for the first type.</summary>
            
             <param name="typeName">Name of the type.</param>
            
             <returns>The found type.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Evaluator.#ctor(System.Collections.Generic.IEnumerable{NServiceKit.WebHost.Endpoints.Support.Markdown.EvaluatorItem})">
             <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.Support.Markdown.Evaluator class.</summary>
            
             <param name="items">The items.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Evaluator.#ctor(System.Collections.Generic.IEnumerable{NServiceKit.WebHost.Endpoints.Support.Markdown.EvaluatorItem},System.Type,System.Type[],System.Collections.Generic.IDictionary{System.String,System.Type})">
             <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.Support.Markdown.Evaluator class.</summary>
            
             <param name="items">         The items.</param>
             <param name="baseType">      Type of the base.</param>
             <param name="genericArgs">   The generic arguments.</param>
             <param name="typeProperties">The type properties.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Evaluator.#ctor(System.Type,System.String,System.String)">
             <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.Support.Markdown.Evaluator class.</summary>
            
             <param name="returnType">Type of the return.</param>
             <param name="expression">The expression.</param>
             <param name="name">      The name.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Evaluator.#ctor(System.Type,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Type})">
             <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.Support.Markdown.Evaluator class.</summary>
            
             <param name="returnType">Type of the return.</param>
             <param name="expression">The expression.</param>
             <param name="name">      The name.</param>
             <param name="exprParams">Options for controlling the expression.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Evaluator.#ctor(NServiceKit.WebHost.Endpoints.Support.Markdown.EvaluatorItem)">
             <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.Support.Markdown.Evaluator class.</summary>
            
             <param name="item">The item.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Evaluator.GetTypeName(System.Type)">
             <summary>Gets type name.</summary>
            
             <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            
             <param name="type">The type.</param>
            
             <returns>The type name.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Evaluator.GetInstance``1">
             <summary>Gets the instance.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
            
             <returns>The instance.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Evaluator.CreateInstance">
             <summary>Creates the instance.</summary>
            
             <returns>The new instance.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Evaluator.GetCompiledMethodInfo(System.String)">
             <summary>Gets compiled method information.</summary>
            
             <param name="name">The name.</param>
            
             <returns>The compiled method information.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Evaluator.Evaluate(System.String,System.Object[])">
             <summary>Evaluates.</summary>
            
             <param name="name">      The name.</param>
             <param name="exprParams">Options for controlling the expression.</param>
            
             <returns>An object.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Evaluator.Evaluate(System.Object,System.String,System.Object[])">
             <summary>Evaluates.</summary>
            
             <exception>Thrown when an Inner error condition occurs.</exception>
            
             <param name="instance">  The instance.</param>
             <param name="name">      The name.</param>
             <param name="exprParams">Options for controlling the expression.</param>
            
             <returns>An object.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Evaluator.Eval``1(System.String,System.Object[])">
             <summary>Evals.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="name">      The name.</param>
             <param name="exprParams">Options for controlling the expression.</param>
            
             <returns>A T.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Evaluator.Eval(System.String)">
             <summary>Evals.</summary>
            
             <param name="code">The code.</param>
            
             <returns>An object.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Evaluator.Eval``1(System.String)">
             <summary>Evals.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="code">The code.</param>
            
             <returns>A T.</returns>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Support.Markdown.EvaluatorItem">
            <summary>An evaluator item.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.EvaluatorItem.#ctor">
            <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.Support.Markdown.EvaluatorItem class.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.EvaluatorItem.#ctor(System.Type,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Type})">
             <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.Support.Markdown.EvaluatorItem class.</summary>
            
             <param name="returnType">The type of the return.</param>
             <param name="name">      The name.</param>
             <param name="expression">The expression.</param>
             <param name="exprParams">Options for controlling the expression.</param>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.EvaluatorItem.ReturnType">
             <summary>Gets or sets the type of the return.</summary>
            
             <value>The type of the return.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.EvaluatorItem.Name">
             <summary>Gets or sets the name.</summary>
            
             <value>The name.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.EvaluatorItem.Expression">
             <summary>Gets or sets the expression.</summary>
            
             <value>The expression.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.EvaluatorItem.Params">
             <summary>Gets or sets options for controlling the operation.</summary>
            
             <value>The parameters.</value>
        </member>
        <member name="T:MarkdownSharp.MarkdownOptions">
            <summary>A markdown options.</summary>
        </member>
        <member name="P:MarkdownSharp.MarkdownOptions.AutoHyperlink">
            <summary>
            when true, (most) bare plain URLs are auto-hyperlinked  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.MarkdownOptions.AutoNewlines">
            <summary>
            when true, RETURN becomes a literal newline  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.MarkdownOptions.EmptyElementSuffix">
            <summary>
            use ">" for HTML output, or " />" for XHTML output
            </summary>
        </member>
        <member name="P:MarkdownSharp.MarkdownOptions.EncodeProblemUrlCharacters">
            <summary>
            when true, problematic URL characters like [, ], (, and so forth will be encoded 
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.MarkdownOptions.LinkEmails">
            <summary>
            when false, email addresses will never be auto-linked  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.MarkdownOptions.StrictBoldItalic">
            <summary>
            when true, bold and italic require non-word characters on either side  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="T:MarkdownSharp.Markdown">
            <summary>
            Markdown is a text-to-HTML conversion tool for web writers. 
            Markdown allows you to write using an easy-to-read, easy-to-write plain text format, 
            then convert it to structurally valid XHTML (or HTML).
            </summary>
        </member>
        <member name="F:MarkdownSharp.Markdown._tabWidth">
            <summary>
            Tabs are automatically converted to spaces as part of the transform  
            this constant determines how "wide" those tabs become in spaces  
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.#ctor">
            <summary>
            Create a new Markdown instance using default options
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.#ctor(System.Boolean)">
            <summary>
            Create a new Markdown instance and optionally load options from a configuration
            file. There they should be stored in the appSettings section, available options are:
            
                Markdown.StrictBoldItalic (true/false)
                Markdown.EmptyElementSuffix (">" or " />" without the quotes)
                Markdown.LinkEmails (true/false)
                Markdown.AutoNewLines (true/false)
                Markdown.AutoHyperlink (true/false)
                Markdown.EncodeProblemUrlCharacters (true/false) 
                
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.#ctor(MarkdownSharp.MarkdownOptions)">
            <summary>
            Create a new Markdown instance and set the options from the MarkdownOptions object.
            </summary>
        </member>
        <member name="F:MarkdownSharp.Markdown._nestDepth">
            <summary>
            maximum nested depth of [] and () supported by the transform; implementation detail
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.#cctor">
            <summary>
            In the static constuctor we'll initialize what stays the same across all transforms.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.Transform(System.String)">
            <summary>
            Transforms the provided Markdown-formatted text to HTML;  
            see http://en.wikipedia.org/wiki/Markdown
            </summary>
            <remarks>
            The order in which other subs are called here is
            essential. Link and image substitutions need to happen before
            EscapeSpecialChars(), so that any *'s or _'s in the a
            and img tags get encoded.
            </remarks>
        </member>
        <member name="M:MarkdownSharp.Markdown.RunBlockGamut(System.String,System.Boolean)">
            <summary>
            Perform transformations that form block-level tags like paragraphs, headers, and list items.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.RunSpanGamut(System.String)">
            <summary>
            Perform transformations that occur *within* block-level tags like paragraphs, headers, and list items.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.FormParagraphs(System.String,System.Boolean)">
            <summary>
            splits on two or more newlines, to form "paragraphs";    
            each paragraph is then unhashed (if it is a hash and unhashing isn't turned off) or wrapped in HTML p tag
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.GetNestedBracketsPattern">
            <summary>
            Reusable pattern to match balanced [brackets]. See Friedl's 
            "Mastering Regular Expressions", 2nd Ed., pp. 328-331.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.GetNestedParensPattern">
            <summary>
            Reusable pattern to match balanced (parens). See Friedl's 
            "Mastering Regular Expressions", 2nd Ed., pp. 328-331.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.StripLinkDefinitions(System.String)">
            <summary>
            Strips link definitions from text, stores the URLs and titles in hash references.
            </summary>
            <remarks>
            ^[id]: url "optional title"
            </remarks>
        </member>
        <member name="M:MarkdownSharp.Markdown.GetBlockPattern">
            <summary>
            derived pretty much verbatim from PHP Markdown
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.HashHTMLBlocks(System.String)">
            <summary>
            replaces any block-level HTML blocks with hash entries
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.TokenizeHTML(System.String)">
            <summary>
            returns an array of HTML tokens comprising the input string. Each token is 
            either a tag (possibly with nested, tags contained therein, such 
            as &lt;a href="&lt;MTFoo&gt;"&gt;, or a run of text between tags. Each element of the 
            array is a two-element array; the first is either 'tag' or 'text'; the second is 
            the actual value.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoAnchors(System.String)">
            <summary>
            Turn Markdown link shortcuts into HTML anchor tags
            </summary>
            <remarks>
            [link text](url "title") 
            [link text][id] 
            [id] 
            </remarks>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoImages(System.String)">
            <summary>
            Turn Markdown image shortcuts into HTML img tags. 
            </summary>
            <remarks>
            ![alt text][id]
            ![alt text](url "optional title")
            </remarks>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoHeaders(System.String)">
            <summary>
            Turn Markdown headers into HTML header tags
            </summary>
            <remarks>
            Header 1  
            ========  
            
            Header 2  
            --------  
            
            # Header 1  
            ## Header 2  
            ## Header 2 with closing hashes ##  
            ...  
            ###### Header 6  
            </remarks>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoHorizontalRules(System.String)">
            <summary>
            Turn Markdown horizontal rules into HTML hr tags
            </summary>
            <remarks>
            ***  
            * * *  
            ---
            - - -
            </remarks>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoLists(System.String)">
            <summary>
            Turn Markdown lists into HTML ul and ol and li tags
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.ProcessListItems(System.String,System.String)">
            <summary>
            Process the contents of a single ordered or unordered list, splitting it
            into individual list items.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoCodeBlocks(System.String)">
            <summary>
            /// Turn Markdown 4-space indented code into HTML pre code blocks
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoCodeSpans(System.String)">
            <summary>
            Turn Markdown `code spans` into HTML code tags
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoItalicsAndBold(System.String)">
            <summary>
            Turn Markdown *italics* and **bold** into HTML strong and em tags
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoHardBreaks(System.String)">
            <summary>
            Turn markdown line breaks (two space at end of line) into HTML break tags
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoBlockQuotes(System.String)">
            <summary>
            Turn Markdown > quoted blocks into HTML blockquote blocks
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoAutoLinks(System.String)">
            <summary>
            Turn angle-delimited URLs into HTML anchor tags
            </summary>
            <remarks>
            &lt;http://www.example.com&gt;
            </remarks>
        </member>
        <member name="M:MarkdownSharp.Markdown.Outdent(System.String)">
            <summary>
            Remove one level of line-leading spaces
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.EncodeEmailAddress(System.String)">
            <summary>
            encodes email address randomly  
            roughly 10% raw, 45% hex, 45% dec 
            note that @ is always encoded and : never is
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.EncodeCode(System.String)">
            <summary>
            Encode/escape certain Markdown characters inside code blocks and spans where they are literals
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.EncodeAmpsAndAngles(System.String)">
            <summary>
            Encode any ampersands (that aren't part of an HTML entity) and left or right angle brackets
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.EscapeBackslashes(System.String)">
            <summary>
            Encodes any escaped characters such as \`, \*, \[ etc
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.Unescape(System.String)">
            <summary>
            swap back in all the special characters we've hidden
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.EscapeBoldItalic(System.String)">
            <summary>
            escapes Bold [ * ] and Italic [ _ ] characters
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.EncodeProblemUrlChars(System.String)">
            <summary>
            hex-encodes some unusual "problem" chars in URLs to avoid URL detection problems 
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.EscapeSpecialCharsWithinTagAttributes(System.String)">
            <summary>
            Within tags -- meaning between &lt; and &gt; -- encode [\ ` * _] so they 
            don't conflict with their use in Markdown for code, italics and strong. 
            We're replacing each such character with its corresponding hash 
            value; this is likely overkill, but it should prevent us from colliding 
            with the escape values by accident.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.Normalize(System.String)">
            <summary>
            convert all tabs to _tabWidth spaces; 
            standardizes line endings from DOS (CR LF) or Mac (CR) to UNIX (LF); 
            makes sure text ends with a couple of newlines; 
            removes any blank lines (only spaces) in the text
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.RepeatString(System.String,System.Int32)">
            <summary>
            this is to emulate what's evailable in PHP
            </summary>
        </member>
        <member name="P:MarkdownSharp.Markdown.EmptyElementSuffix">
            <summary>
            use ">" for HTML output, or " />" for XHTML output
            </summary>
        </member>
        <member name="P:MarkdownSharp.Markdown.LinkEmails">
            <summary>
            when false, email addresses will never be auto-linked  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.Markdown.StrictBoldItalic">
            <summary>
            when true, bold and italic require non-word characters on either side  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.Markdown.AutoNewLines">
            <summary>
            when true, RETURN becomes a literal newline  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.Markdown.AutoHyperlink">
            <summary>
            when true, (most) bare plain URLs are auto-hyperlinked  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.Markdown.EncodeProblemUrlCharacters">
            <summary>
            when true, problematic URL characters like [, ], (, and so forth will be encoded 
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.Markdown.Version">
            <summary>
            current version of MarkdownSharp;  
            see http://code.google.com/p/markdownsharp/ for the latest code or to contribute
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.Token.#ctor(MarkdownSharp.Markdown.TokenType,System.String)">
             <summary>Initializes a new instance of the MarkdownSharp.Markdown class.</summary>
            
             <param name="type"> The type.</param>
             <param name="value">The value.</param>
        </member>
        <member name="F:MarkdownSharp.Markdown.Token.Type">
            <summary>The type.</summary>
        </member>
        <member name="F:MarkdownSharp.Markdown.Token.Value">
            <summary>The value.</summary>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Formats.MarkdownPageType">
            <summary>Values that represent MarkdownPageType.</summary>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.Formats.MarkdownPageType.ContentPage">
            <summary>An enum constant representing the content page option.</summary>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.Formats.MarkdownPageType.ViewPage">
            <summary>An enum constant representing the view page option.</summary>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.Formats.MarkdownPageType.SharedViewPage">
            <summary>An enum constant representing the shared view page option.</summary>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat">
            <summary>A markdown format.</summary>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.DefaultTemplateName">
            <summary>The default template name.</summary>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.DefaultTemplate">
            <summary>The default template.</summary>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.DefaultPage">
            <summary>The default page.</summary>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.TemplatePlaceHolder">
            <summary>The template place holder.</summary>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.WebHostUrlPlaceHolder">
            <summary>The web host URL place holder.</summary>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.MarkdownExt">
            <summary>Extent of the markdown.</summary>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.TemplateExt">
            <summary>Extent of the template.</summary>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.SharedDir">
            <summary>The shared dir.</summary>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.PageExts">
            <summary>The page exts.</summary>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.ViewPages">
            <summary>The view pages.</summary>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.ViewSharedPages">
            <summary>The view shared pages.</summary>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.ContentPages">
            <summary>Content Pages outside of ~/View.</summary>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.MasterPageTemplates">
            <summary>The master page templates.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.#ctor">
            <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat class.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.Register(NServiceKit.WebHost.Endpoints.IAppHost)">
             <summary>Registers this object.</summary>
            
             <param name="appHost">The application host.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.FindByPathInfo(System.String)">
             <summary>Searches for the first path information.</summary>
            
             <param name="pathInfo">Information describing the path.</param>
            
             <returns>The found path information.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.ProcessRequest(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse,System.Object)">
             <summary>Process the request.</summary>
            
             <param name="httpReq">The HTTP request.</param>
             <param name="httpRes">The HTTP resource.</param>
             <param name="dto">    The dto.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.HasView(System.String,NServiceKit.ServiceHost.IHttpRequest)">
             <summary>Query if 'viewName' has view.</summary>
            
             <param name="viewName">Name of the view.</param>
             <param name="httpReq"> The HTTP request.</param>
            
             <returns>true if view, false if not.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.RenderPartial(System.String,System.Object,System.Boolean,System.IO.StreamWriter,NServiceKit.Html.HtmlHelper)">
             <summary>Renders the partial.</summary>
            
             <param name="pageName">  Name of the page.</param>
             <param name="model">     The model.</param>
             <param name="renderHtml">true to render HTML.</param>
             <param name="writer">    The writer.</param>
             <param name="htmlHelper">The HTML helper.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.GetViewPage(System.String,NServiceKit.ServiceHost.IHttpRequest)">
             <summary>Gets view page.</summary>
            
             <param name="viewName">Name of the view.</param>
             <param name="httpReq"> The HTTP request.</param>
            
             <returns>The view page.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.ProcessMarkdownPage(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownPage,System.Object,NServiceKit.ServiceHost.IHttpResponse)">
             <summary>Process the markdown page.</summary>
            
             <param name="httpReq">     The HTTP request.</param>
             <param name="markdownPage">The markdown page.</param>
             <param name="dto">         The dto.</param>
             <param name="httpRes">     The HTTP resource.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.ReloadModifiedPageAndTemplates(NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownPage)">
             <summary>Reload modified page and templates.</summary>
            
             <param name="markdownPage">The markdown page.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.SerializeToStream(NServiceKit.ServiceHost.IRequestContext,System.Object,System.IO.Stream)">
            <summary>
            Render Markdown for text/markdown and text/plain ContentTypes
            </summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.GetPageName(System.Object,NServiceKit.ServiceHost.IRequestContext)">
             <summary>Gets page name.</summary>
            
             <param name="dto">           The dto.</param>
             <param name="requestContext">Context for the request.</param>
            
             <returns>The page name.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.GetViewPageByResponse(System.Object,NServiceKit.ServiceHost.IHttpRequest)">
             <summary>Gets view page by response.</summary>
            
             <param name="dto">    The dto.</param>
             <param name="httpReq">The HTTP request.</param>
            
             <returns>The view page by response.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.GetViewPage(System.String)">
             <summary>Gets view page.</summary>
            
             <param name="pageName">Name of the page.</param>
            
             <returns>The view page.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.GetContentPage(System.String)">
             <summary>Gets content page.</summary>
            
             <param name="pageFilePath">Full pathname of the page file.</param>
            
             <returns>The content page.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.GetContentPage(System.String[])">
             <summary>Gets content page.</summary>
            
             <param name="pageFilePaths">A variable-length parameters list containing page file paths.</param>
            
             <returns>The content page.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.RegisterMarkdownPages(System.String)">
             <summary>Registers the markdown pages described by dirPath.</summary>
            
             <param name="dirPath">Pathname of the directory.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.FindMarkdownPages(System.String)">
             <summary>Finds the markdown pages in this collection.</summary>
            
             <param name="dirPath">Pathname of the directory.</param>
            
             <returns>An enumerator that allows foreach to be used to process the markdown pages in this collection.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.RegisterMarkdownPage(NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownPage)">
             <summary>Registers the markdown page described by markdownPage.</summary>
            
             <param name="markdownPage">The markdown page.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.AddPage(NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownPage)">
             <summary>Adds a page.</summary>
            
             <param name="page">The page.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.AddTemplate(System.String,System.String)">
             <summary>Adds a template to 'templateContents'.</summary>
            
             <param name="templatePath">    Full pathname of the template file.</param>
             <param name="templateContents">The template contents.</param>
            
             <returns>A MarkdownTemplate.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.Transform(System.String)">
             <summary>Transforms.</summary>
            
             <param name="template">The template.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.Transform(System.String,System.Boolean)">
             <summary>Transforms.</summary>
            
             <param name="template">  The template.</param>
             <param name="renderHtml">true to render HTML.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.RenderStaticPageHtml(System.String)">
             <summary>Renders the static page HTML described by filePath.</summary>
            
             <param name="filePath">Full pathname of the file.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.RenderStaticPage(System.String,System.Boolean)">
             <summary>Renders the static page.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
             <exception cref="T:System.IO.InvalidDataException"> Thrown when an Invalid Data error condition occurs.</exception>
            
             <param name="filePath">  Full pathname of the file.</param>
             <param name="renderHtml">true to render HTML.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.RenderDynamicPageHtml(System.String,System.Object)">
             <summary>Renders the dynamic page HTML.</summary>
            
             <param name="pageName">Name of the page.</param>
             <param name="model">   The model.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.RenderDynamicPageHtml(System.String)">
             <summary>Renders the dynamic page HTML.</summary>
            
             <param name="pageName">Name of the page.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.RenderDynamicPageHtml(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>Renders the dynamic page HTML.</summary>
            
             <param name="pageName"> Name of the page.</param>
             <param name="scopeArgs">The scope arguments.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.RenderDynamicPage(System.String,System.Object,System.Boolean)">
             <summary>Renders the dynamic page.</summary>
            
             <param name="pageName">  Name of the page.</param>
             <param name="model">     The model.</param>
             <param name="renderHtml">true to render HTML.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.RenderDynamicPage(NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownPage,System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean,System.Boolean,System.String)">
             <summary>Renders the dynamic page.</summary>
            
             <param name="markdownPage">  The markdown page.</param>
             <param name="scopeArgs">     The scope arguments.</param>
             <param name="renderHtml">    true to render HTML.</param>
             <param name="renderTemplate">true to render template.</param>
             <param name="templatePath">  Full pathname of the template file.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.Instance">
             <summary>Gets the instance.</summary>
            
             <value>The instance.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.MarkdownBaseType">
             <summary>Gets or sets the type of the markdown base.</summary>
            
             <value>The type of the markdown base.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.MarkdownGlobalHelpers">
             <summary>Gets or sets the markdown global helpers.</summary>
            
             <value>The markdown global helpers.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.FindMarkdownPagesFn">
             <summary>Gets or sets the find markdown pages function.</summary>
            
             <value>The find markdown pages function.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.AppHost">
             <summary>Gets or sets the application host.</summary>
            
             <value>The application host.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.ReplaceTokens">
             <summary>Gets or sets the replace tokens.</summary>
            
             <value>The replace tokens.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.VirtualPathProvider">
             <summary>Gets or sets the virtual path provider.</summary>
            
             <value>The virtual path provider.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.WatchForModifiedPages">
             <summary>Gets or sets a value indicating whether the watch for modified pages.</summary>
            
             <value>true if watch for modified pages, false if not.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat.SkipPaths">
             <summary>Gets or sets the skip paths.</summary>
            
             <value>The skip paths.</value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Support.EndpointHandlerBase">
            <summary>An endpoint handler base.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.EndpointHandlerBase.CreateRequest(NServiceKit.ServiceHost.IHttpRequest,System.String)">
             <summary>Creates a request.</summary>
            
             <param name="request">      The request.</param>
             <param name="operationName">Name of the operation.</param>
            
             <returns>The new request.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.EndpointHandlerBase.GetResponse(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse,System.Object)">
             <summary>Gets a response.</summary>
            
             <param name="httpReq">The HTTP request.</param>
             <param name="httpRes">The HTTP resource.</param>
             <param name="request">The request.</param>
            
             <returns>The response.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.EndpointHandlerBase.ProcessRequest(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse,System.String)">
             <summary>Enables processing of HTTP Web requests by a custom HttpHandler that implements the <see cref="T:System.Web.IHttpHandler"/> interface.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <param name="httpReq">      The HTTP request.</param>
             <param name="httpRes">      The HTTP resource.</param>
             <param name="operationName">Name of the operation.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.EndpointHandlerBase.DeserializeHttpRequest(System.Type,NServiceKit.ServiceHost.IHttpRequest,System.String)">
             <summary>Deserialize HTTP request.</summary>
            
             <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown when a Serialization error condition occurs.</exception>
            
             <param name="operationType">Type of the operation.</param>
             <param name="httpReq">      The HTTP request.</param>
             <param name="contentType">  Type of the content.</param>
            
             <returns>An object.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.EndpointHandlerBase.CreateContentTypeRequest(NServiceKit.ServiceHost.IHttpRequest,System.Type,System.String)">
             <summary>Creates content type request.</summary>
            
             <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown when a Serialization error condition occurs.</exception>
            
             <param name="httpReq">    The HTTP request.</param>
             <param name="requestType">Type of the request.</param>
             <param name="contentType">Type of the content.</param>
            
             <returns>The new content type request.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.EndpointHandlerBase.GetCustomRequestFromBinder(NServiceKit.ServiceHost.IHttpRequest,System.Type)">
             <summary>Gets custom request from binder.</summary>
            
             <param name="httpReq">    The HTTP request.</param>
             <param name="requestType">Type of the request.</param>
            
             <returns>The custom request from binder.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.EndpointHandlerBase.DefaultHandledRequest(System.Net.HttpListenerContext)">
             <summary>Default handled request.</summary>
            
             <param name="context">An <see cref="T:System.Web.HttpContext" /> object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) used to
             service HTTP requests.
             </param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.EndpointHandlerBase.DefaultHandledRequest(System.Web.HttpContext)">
             <summary>Default handled request.</summary>
            
             <param name="context">An <see cref="T:System.Web.HttpContext" /> object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) used to
             service HTTP requests.
             </param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.EndpointHandlerBase.ProcessRequest(System.Web.HttpContext)">
             <summary>Enables processing of HTTP Web requests by a custom HttpHandler that implements the <see cref="T:System.Web.IHttpHandler" /> interface.</summary>
            
             <param name="context">An <see cref="T:System.Web.HttpContext" /> object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) used to
             service HTTP requests.
             </param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.EndpointHandlerBase.ProcessRequest(System.Net.HttpListenerContext)">
             <summary>Process the request described by context.</summary>
            
             <param name="context">The context.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.EndpointHandlerBase.GetOperationType(System.String)">
             <summary>Gets operation type.</summary>
            
             <param name="operationName">Name of the operation.</param>
            
             <returns>The operation type.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.EndpointHandlerBase.ExecuteService(System.Object,NServiceKit.ServiceHost.EndpointAttributes,NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse)">
             <summary>Executes the service operation.</summary>
            
             <param name="request">           The request.</param>
             <param name="endpointAttributes">The endpoint attributes.</param>
             <param name="httpReq">           The HTTP request.</param>
             <param name="httpRes">           The HTTP resource.</param>
            
             <returns>An object.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.EndpointHandlerBase.GetEndpointAttributes(System.ServiceModel.OperationContext)">
             <summary>Gets endpoint attributes.</summary>
            
             <param name="operationContext">Context for the operation.</param>
            
             <returns>The endpoint attributes.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.EndpointHandlerBase.GetIpAddress(System.ServiceModel.OperationContext)">
             <summary>Gets IP address.</summary>
            
             <param name="context">The context.</param>
            
             <returns>The IP address.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.EndpointHandlerBase.AssertOperationExists(System.String,System.Type)">
             <summary>Queries if a given assert operation exists.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <param name="operationName">Name of the operation.</param>
             <param name="type">         The type.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.EndpointHandlerBase.HandleException(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse,System.String,System.Exception)">
             <summary>Handles the exception.</summary>
            
             <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            
             <param name="httpReq">      The HTTP request.</param>
             <param name="httpRes">      The HTTP resource.</param>
             <param name="operationName">Name of the operation.</param>
             <param name="ex">           The ex.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.EndpointHandlerBase.AssertAccess(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse,NServiceKit.ServiceHost.Feature,System.String)">
             <summary>Assert access.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <param name="httpReq">      The HTTP request.</param>
             <param name="httpRes">      The HTTP resource.</param>
             <param name="feature">      The feature.</param>
             <param name="operationName">Name of the operation.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.EndpointHandlerBase.RequestName">
             <summary>Gets or sets the name of the request.</summary>
            
             <value>The name of the request.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.EndpointHandlerBase.HandlerAttributes">
             <summary>Gets or sets the handler attributes.</summary>
            
             <value>The handler attributes.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.EndpointHandlerBase.IsReusable">
             <summary>Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler" /> instance.</summary>
            
             <value>true if the <see cref="T:System.Web.IHttpHandler" /> instance is reusable; otherwise, false.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.EndpointHandlerBase.ServiceManager">
             <summary>Gets or sets the manager for service.</summary>
            
             <value>The service manager.</value>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownHandler.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownHandler"/> class.
            </summary>
            <param name="pathInfo">The path information.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownHandler.ProcessRequest(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse,System.String)">
            <summary>
            Processes the request.
            </summary>
            <param name="httpReq">The HTTP req.</param>
            <param name="httpRes">The HTTP resource.</param>
            <param name="operationName">Name of the operation.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownHandler.CreateRequest(NServiceKit.ServiceHost.IHttpRequest,System.String)">
            <summary>
            Creates the request.
            </summary>
            <param name="request">The request.</param>
            <param name="operationName">Name of the operation.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownHandler.GetResponse(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse,System.Object)">
            <summary>
            Gets the response.
            </summary>
            <param name="httpReq">The HTTP req.</param>
            <param name="httpRes">The HTTP resource.</param>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownHandler.MarkdownFormat">
            <summary>
            Gets or sets the markdown format.
            </summary>
            <value>
            The markdown format.
            </value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownHandler.MarkdownPage">
            <summary>
            Gets or sets the markdown page.
            </summary>
            <value>
            The markdown page.
            </value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownHandler.Model">
            <summary>
            Gets or sets the model.
            </summary>
            <value>
            The model.
            </value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownHandler.PathInfo">
            <summary>
            Gets or sets the path information.
            </summary>
            <value>
            The path information.
            </value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownPage">
            <summary>
            
            </summary>
        </member>
        <member name="T:NServiceKit.IViewPage">
            <summary>Interface for view page.</summary>
        </member>
        <member name="M:NServiceKit.IViewPage.Compile(System.Boolean)">
             <summary>Compiles the given force.</summary>
            
             <param name="force">true to force.</param>
        </member>
        <member name="P:NServiceKit.IViewPage.IsCompiled">
             <summary>Gets a value indicating whether this object is compiled.</summary>
            
             <value>true if this object is compiled, false if not.</value>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownPage.ModelName">
            <summary>
            The model name
            </summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownPage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownPage"/> class.
            </summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownPage.#ctor(NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownPage"/> class.
            </summary>
            <param name="markdown">The markdown.</param>
            <param name="fullPath">The full path.</param>
            <param name="name">The name.</param>
            <param name="contents">The contents.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownPage.#ctor(NServiceKit.WebHost.Endpoints.Formats.MarkdownFormat,System.String,System.String,System.String,NServiceKit.WebHost.Endpoints.Formats.MarkdownPageType)">
            <summary>
            Initializes a new instance of the <see cref="T:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownPage"/> class.
            </summary>
            <param name="markdown">The markdown.</param>
            <param name="fullPath">The full path.</param>
            <param name="name">The name.</param>
            <param name="contents">The contents.</param>
            <param name="pageType">Type of the page.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownPage.GetLastModified">
            <summary>
            Gets the last modified.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownPage.GetTemplatePath">
            <summary>
            Gets the template path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownPage.GetNextId">
            <summary>
            Gets the next identifier.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownPage.Reload(System.String,System.DateTime)">
            <summary>
            Reloads the specified contents.
            </summary>
            <param name="contents">The contents.</param>
            <param name="lastModified">The last modified.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownPage.Compile(System.Boolean)">
            <summary>
            Compiles the specified force.
            </summary>
            <param name="force">if set to <c>true</c> [force].</param>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">Config.MarkdownBaseType must inherit from MarkdownViewBase</exception>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownPage.Write(System.IO.TextWriter,NServiceKit.WebHost.Endpoints.Support.Markdown.PageContext)">
            <summary>
            Writes the specified text writer.
            </summary>
            <param name="textWriter">The text writer.</param>
            <param name="pageContext">The page context.</param>
            <exception cref="T:System.ArgumentNullException">textWriter</exception>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownPage.Markdown">
            <summary>
            Gets or sets the markdown.
            </summary>
            <value>
            The markdown.
            </value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownPage.PageType">
            <summary>
            Gets or sets the type of the page.
            </summary>
            <value>
            The type of the page.
            </value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownPage.FilePath">
            <summary>
            Gets or sets the file path.
            </summary>
            <value>
            The file path.
            </value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownPage.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownPage.Contents">
            <summary>
            Gets or sets the contents.
            </summary>
            <value>
            The contents.
            </value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownPage.HtmlContents">
            <summary>
            Gets or sets the HTML contents.
            </summary>
            <value>
            The HTML contents.
            </value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownPage.Template">
            <summary>
            Gets or sets the template.
            </summary>
            <value>
            The template.
            </value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownPage.DirectiveTemplate">
            <summary>
            Gets or sets the directive template.
            </summary>
            <value>
            The directive template.
            </value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownPage.ExecutionContext">
            <summary>
            Gets the execution context.
            </summary>
            <value>
            The execution context.
            </value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownPage.LastModified">
            <summary>
            Gets or sets the last modified.
            </summary>
            <value>
            The last modified.
            </value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownPage.Dependents">
            <summary>
            Gets the dependents.
            </summary>
            <value>
            The dependents.
            </value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownPage.Evaluator">
            <summary>
            Gets the evaluator.
            </summary>
            <value>
            The evaluator.
            </value>
            <exception cref="T:System.InvalidOperationException">evaluator not ready</exception>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownPage.MarkdownBlocks">
            <summary>
            Gets or sets the markdown blocks.
            </summary>
            <value>
            The markdown blocks.
            </value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownPage.HtmlBlocks">
            <summary>
            Gets or sets the HTML blocks.
            </summary>
            <value>
            The HTML blocks.
            </value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownPage.IsCompiled">
            <summary>
            Gets or sets a value indicating whether this instance is compiled.
            </summary>
            <value>
            <c>true</c> if this instance is compiled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownTemplate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownTemplate"/> class.
            </summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownTemplate.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownTemplate"/> class.
            </summary>
            <param name="fullPath">The full path.</param>
            <param name="name">The name.</param>
            <param name="contents">The contents.</param>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownTemplate.BodyPlaceHolder">
            <summary>
            The body place holder
            </summary>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownTemplate.PlaceHolderPrefix">
            <summary>
            The place holder prefix
            </summary>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownTemplate.PlaceHolderSuffix">
            <summary>
            The place holder suffix
            </summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownTemplate.Reload(System.String,System.DateTime)">
            <summary>
            Reloads the specified template contents.
            </summary>
            <param name="templateContents">The template contents.</param>
            <param name="lastModified">The last modified.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownTemplate.Prepare">
            <summary>
            Prepares this instance.
            </summary>
            <exception cref="T:System.ArgumentNullException">Contents</exception>
            <exception cref="T:System.IO.InvalidDataException">Unterminated PlaceHolder expecting --&gt;</exception>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownTemplate.RenderToString(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Renders to string.
            </summary>
            <param name="scopeArgs">The scope arguments.</param>
            <returns></returns>
            <exception cref="T:System.IO.InvalidDataException">Template has not been Initialized.</exception>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownTemplate.Write(NServiceKit.Markdown.MarkdownViewBase,System.IO.TextWriter,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Writes the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <param name="textWriter">The text writer.</param>
            <param name="scopeArgs">The scope arguments.</param>
            <exception cref="T:System.IO.InvalidDataException">Template has not been Initialized.</exception>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownTemplate.FilePath">
            <summary>
            Gets or sets the file path.
            </summary>
            <value>
            The file path.
            </value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownTemplate.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownTemplate.Contents">
            <summary>
            Gets or sets the contents.
            </summary>
            <value>
            The contents.
            </value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownTemplate.LastModified">
            <summary>
            Gets or sets the last modified.
            </summary>
            <value>
            The last modified.
            </value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownTemplate.TextBlocks">
            <summary>
            Gets or sets the text blocks.
            </summary>
            <value>
            The text blocks.
            </value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownTemplate.VarRefBlocks">
            <summary>
            Gets or sets the variable reference blocks.
            </summary>
            <value>
            The variable reference blocks.
            </value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Support.Markdown.DataBinder">
            <summary>A data binder.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.DataBinder.CompileToString(System.Type,System.String)">
             <summary>Compile to string.</summary>
            
             <param name="type">The type.</param>
             <param name="expr">The expression.</param>
            
             <returns>A Func&lt;object,string&gt;</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.DataBinder.CompileStaticAccessToString(System.String)">
             <summary>Compile static access to string.</summary>
            
             <param name="expr">The expression.</param>
            
             <returns>A Func&lt;string&gt;</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.DataBinder.Compile(System.Type,System.String)">
             <summary>Compiles.</summary>
            
             <param name="type">The type.</param>
             <param name="expr">The expression.</param>
            
             <returns>A Func&lt;object,object&gt;</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.DataBinder.Compile``2(System.String)">
             <summary>Compiles.</summary>
            
             <typeparam name="TModel">Type of the model.</typeparam>
             <typeparam name="TProp"> Type of the property.</typeparam>
             <param name="expression">The expression.</param>
            
             <returns>A Func&lt;TModel,TProp&gt;</returns>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Support.Markdown.TemplateExtensions">
            <summary>
            Extension methods for working with markdown templates.
            </summary>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.Support.Markdown.TemplateExtensions.StatementPlaceholderChar">
            <summary>
            
            </summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.TemplateExtensions.SplitOnWhiteSpace(System.String)">
            <summary>
            Splits the string on white space.
            </summary>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.TemplateExtensions.SplitOnWhiteSpaceAndSymbols(System.String)">
            <summary>
            Splits the string on white space and symbols.
            </summary>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.TemplateExtensions.SplitAndTrimOn(System.String,System.Char[])">
            <summary>
            Splits on the given characters and trims each chunk.
            </summary>
            <param name="text">The text.</param>
            <param name="chars">The chars.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.TemplateExtensions.RenderToMarkdown(NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownPage,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Renders to markdown.
            </summary>
            <param name="markdownPage">The markdown page.</param>
            <param name="scopeArgs">The scope arguments.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.TemplateExtensions.RenderToHtml(NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownPage,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Renders to HTML.
            </summary>
            <param name="markdownPage">The markdown page.</param>
            <param name="scopeArgs">The scope arguments.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.TemplateExtensions.RenderToString(NServiceKit.WebHost.Endpoints.Support.Markdown.MarkdownPage,System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Renders to string.
            </summary>
            <param name="markdownPage">The markdown page.</param>
            <param name="scopeArgs">The scope arguments.</param>
            <param name="renderHtml">if set to <c>true</c> [render HTML].</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.TemplateExtensions.RenderToString(NServiceKit.WebHost.Endpoints.Support.Markdown.ITemplateWriter,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Renders to string.
            </summary>
            <param name="templateWriter">The template writer.</param>
            <param name="scopeArgs">The scope arguments.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.TemplateExtensions.RenderToString(System.Collections.Generic.IEnumerable{NServiceKit.WebHost.Endpoints.Support.Markdown.ITemplateWriter},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Renders to string.
            </summary>
            <param name="templateWriters">The template writers.</param>
            <param name="scopeArgs">The scope arguments.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.TemplateExtensions.SplitIntoBlocks(System.String,System.String)">
            <summary>
            Splits the string into blocks on the given placeholder string.
            </summary>
            <param name="content">The content.</param>
            <param name="onPlaceHolder">The on place holder.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.TemplateExtensions.RemoveIfEndingWith(NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.TextBlock,System.String)">
            <summary>
            Removes the given text from the end of the block, if it exists.
            </summary>
            <param name="textBlock">The text block.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.TemplateExtensions.TrimIfEndingWith(System.String,System.String)">
            <summary>
            Trims the given text from the end of the string, if it exists.
            </summary>
            <param name="content">The content.</param>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.TemplateExtensions.SkipIfNextIs(System.String,System.Int32@,System.String)">
            <summary>
            Increments pos past text if it's the next chunk in content.
            </summary>
            <param name="content">The content.</param>
            <param name="pos">The position.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.TemplateExtensions.TrimLineIfOnlyHasWhitespace(System.String)">
            <summary>
            Trims the line if it only has whitespace.
            </summary>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.TemplateExtensions.CreateTemplateBlocks(System.String,System.Collections.Generic.List{NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.StatementExprBlock})">
            <summary>
            Creates the template blocks.
            </summary>
            <param name="content">The content.</param>
            <param name="statementBlocks">The statement blocks.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.TemplateExtensions.GetNextStatementExpr(System.String,System.Int32@)">
            <summary>
            Gets the next statement expr.
            </summary>
            <param name="content">The content.</param>
            <param name="fromPos">From position.</param>
            <returns></returns>
            <exception cref="T:System.IO.InvalidDataException"></exception>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.TemplateExtensions.PeekAfterWhitespace(System.String,System.Int32)">
            <summary>
            Peeks the next character after whitespace.
            </summary>
            <param name="content">The content.</param>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.TemplateExtensions.PeekWordAfterWhitespace(System.String,System.Int32)">
            <summary>
            Peeks the next word after whitespace.
            </summary>
            <param name="content">The content.</param>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.TemplateExtensions.EatWhitespace(System.String,System.Int32@)">
            <summary>
            Increments index until it runs out of whitespace.
            </summary>
            <param name="content">The content.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.TemplateExtensions.EatRestOfLine(System.String,System.Int32@)">
            <summary>
            Eats the rest of the line.
            </summary>
            <param name="content">The content.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.TemplateExtensions.SafePeekAt(System.String,System.Int32)">
            <summary>
            Safes peeks at the specified index. Returns \0 if it doesn't exist.
            </summary>
            <param name="content">The content.</param>
            <param name="fromPos">From position.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.TemplateExtensions.IsAlphaNumeric(System.Char)">
            <summary>
            Determines whether the given character is alphanumeric.
            </summary>
            <param name="c">The c.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.TemplateExtensions.GetNextAlphaNumericExpr(System.String,System.Int32@)">
            <summary>
            Gets the next alpha numeric expression.
            </summary>
            <param name="content">The content.</param>
            <param name="fromPos">From position.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.TemplateExtensions.GetNextMemberExpr(System.String,System.Int32@)">
            <summary>
            Gets the next member expr.
            </summary>
            <param name="content">The content.</param>
            <param name="fromPos">From position.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.TemplateExtensions.RemoveAllWhiteSpace(System.String)">
            <summary>
            Removes all white space.
            </summary>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.TemplateExtensions.GetVarName(System.String)">
            <summary>
            Gets the name of the variable.
            </summary>
            <param name="memberExpr">The member expr.</param>
            <returns></returns>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.VarReferenceBlock">
            <summary>
            
            </summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.VarReferenceBlock.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.VarReferenceBlock"/> class.
            </summary>
            <param name="varName">Name of the variable.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Markdown.Templates.VarReferenceBlock.Write(NServiceKit.Markdown.MarkdownViewBase,System.IO.TextWriter,System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>Writes the specified instance.</summary>
            
             <param name="instance">  The instance.</param>
             <param name="textWriter">The text writer.</param>
             <param name="scopeArgs"> The scope arguments.</param>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.GenericHandler">
            <summary>A generic handler.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.GenericHandler.#ctor(System.String,NServiceKit.ServiceHost.EndpointAttributes,NServiceKit.ServiceHost.Feature)">
             <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.GenericHandler class.</summary>
            
             <param name="contentType">      Type of the content.</param>
             <param name="handlerAttributes">The handler attributes.</param>
             <param name="format">           Describes the format to use.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.GenericHandler.CreateRequest(NServiceKit.ServiceHost.IHttpRequest,System.String)">
             <summary>Creates a request.</summary>
            
             <param name="request">      The request.</param>
             <param name="operationName">Name of the operation.</param>
            
             <returns>The new request.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.GenericHandler.GetResponse(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse,System.Object)">
             <summary>Gets a response.</summary>
            
             <param name="httpReq">The HTTP request.</param>
             <param name="httpRes">The HTTP resource.</param>
             <param name="request">The request.</param>
            
             <returns>The response.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.GenericHandler.GetRequest(NServiceKit.ServiceHost.IHttpRequest,System.String)">
             <summary>Gets a request.</summary>
            
             <param name="httpReq">      The HTTP request.</param>
             <param name="operationName">Name of the operation.</param>
            
             <returns>The request.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.GenericHandler.ProcessRequest(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse,System.String)">
             <summary>Process the request.</summary>
            
             <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            
             <param name="httpReq">      The HTTP request.</param>
             <param name="httpRes">      The HTTP resource.</param>
             <param name="operationName">Name of the operation.</param>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.GenericHandler.HandlerContentType">
             <summary>Gets or sets the type of the handler content.</summary>
            
             <value>The type of the handler content.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.GenericHandler.ContentTypeAttribute">
             <summary>Gets or sets the content type attribute.</summary>
            
             <value>The content type attribute.</value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Formats.HtmlFormat">
            <summary>A HTML format.</summary>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.Formats.HtmlFormat.TitleFormat">
            <summary>The title format.</summary>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.Formats.HtmlFormat.HtmlTitleFormat">
            <summary>The HTML title format.</summary>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.Formats.HtmlFormat.HtmlTemplate">
            <summary>The HTML template.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Formats.HtmlFormat.Register(NServiceKit.WebHost.Endpoints.IAppHost)">
             <summary>Registers this object.</summary>
            
             <param name="appHost">The application host.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Formats.HtmlFormat.SerializeToStream(NServiceKit.ServiceHost.IRequestContext,System.Object,NServiceKit.ServiceHost.IHttpResponse)">
             <summary>Serialize to stream.</summary>
            
             <param name="requestContext">Context for the request.</param>
             <param name="response">      The response.</param>
             <param name="httpRes">       The HTTP resource.</param>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Metadata.CustomMetadataHandler">
            <summary>A custom metadata handler.</summary>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Metadata.BaseMetadataHandler">
            <summary>A base metadata handler.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Metadata.BaseMetadataHandler.Execute(System.Web.HttpContext)">
             <summary>Executes the given context.</summary>
            
             <param name="context">The context.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Metadata.BaseMetadataHandler.ProcessRequest(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse,System.String)">
             <summary>Process the request.</summary>
            
             <param name="httpReq">      The HTTP request.</param>
             <param name="httpRes">      The HTTP resource.</param>
             <param name="operationName">Name of the operation.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Metadata.BaseMetadataHandler.CreateResponse(System.Type)">
             <summary>Creates a response.</summary>
            
             <param name="type">The type.</param>
            
             <returns>The new response.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Metadata.BaseMetadataHandler.ProcessOperations(System.Web.UI.HtmlTextWriter,NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse)">
             <summary>Process the operations.</summary>
            
             <param name="writer"> The writer.</param>
             <param name="httpReq">The HTTP request.</param>
             <param name="httpRes">The HTTP resource.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Metadata.BaseMetadataHandler.AssertAccess(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse,System.String)">
             <summary>Assert access.</summary>
            
             <param name="httpReq">      The HTTP request.</param>
             <param name="httpRes">      The HTTP resource.</param>
             <param name="operationName">Name of the operation.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Metadata.BaseMetadataHandler.CreateMessage(System.Type)">
             <summary>Creates a message.</summary>
            
             <param name="dtoType">Type of the dto.</param>
            
             <returns>The new message.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Metadata.BaseMetadataHandler.RenderOperation(System.Web.UI.HtmlTextWriter,NServiceKit.ServiceHost.IHttpRequest,System.String,System.String,System.String,System.String)">
             <summary>Renders the operation.</summary>
            
             <param name="writer">         The writer.</param>
             <param name="httpReq">        The HTTP request.</param>
             <param name="operationName">  Name of the operation.</param>
             <param name="requestMessage"> Message describing the request.</param>
             <param name="responseMessage">Message describing the response.</param>
             <param name="metadataHtml">   The metadata HTML.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Metadata.BaseMetadataHandler.RenderOperations(System.Web.UI.HtmlTextWriter,NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.ServiceMetadata)">
             <summary>Renders the operations.</summary>
            
             <param name="writer">  The writer.</param>
             <param name="httpReq"> The HTTP request.</param>
             <param name="metadata">The metadata.</param>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Metadata.BaseMetadataHandler.Format">
             <summary>Gets the format to use.</summary>
            
             <value>The format.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Metadata.BaseMetadataHandler.ContentType">
             <summary>Gets or sets the type of the content.</summary>
            
             <value>The type of the content.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Metadata.BaseMetadataHandler.ContentFormat">
             <summary>Gets or sets the content format.</summary>
            
             <value>The content format.</value>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Metadata.CustomMetadataHandler.#ctor(System.String,System.String)">
             <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.Metadata.CustomMetadataHandler class.</summary>
            
             <param name="contentType">Type of the content.</param>
             <param name="format">     The format.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Metadata.CustomMetadataHandler.CreateMessage(System.Type)">
             <summary>Creates a message.</summary>
            
             <param name="dtoType">Type of the dto.</param>
            
             <returns>The new message.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Metadata.CustomMetadataHandler.RenderOperations(System.Web.UI.HtmlTextWriter,NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.ServiceMetadata)">
             <summary>Renders the operations.</summary>
            
             <param name="writer">  The writer.</param>
             <param name="httpReq"> The HTTP request.</param>
             <param name="metadata">The metadata.</param>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Metadata.CustomMetadataHandler.Format">
             <summary>Gets the format to use.</summary>
            
             <value>The format.</value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.RestHandler">
            <summary>A rest handler.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.RestHandler.#ctor">
            <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.RestHandler class.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.RestHandler.FindMatchingRestPath(System.String,System.String,System.String@)">
             <summary>Searches for the first matching rest path.</summary>
            
             <param name="httpMethod"> The HTTP method.</param>
             <param name="pathInfo">   Information describing the path.</param>
             <param name="contentType">Type of the content.</param>
            
             <returns>The found matching rest path.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.RestHandler.GetRestPath(System.String,System.String)">
             <summary>Gets rest path.</summary>
            
             <param name="httpMethod">The HTTP method.</param>
             <param name="pathInfo">  Information describing the path.</param>
            
             <returns>The rest path.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.RestHandler.ProcessRequest(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse,System.String)">
             <summary>Process the request.</summary>
            
             <exception cref="T:System.NotSupportedException">Thrown when the requested operation is not supported.</exception>
             <exception cref="T:System.Exception">            Thrown when an exception error condition occurs.</exception>
            
             <param name="httpReq">      The HTTP request.</param>
             <param name="httpRes">      The HTTP resource.</param>
             <param name="operationName">Name of the operation.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.RestHandler.GetResponse(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse,System.Object)">
             <summary>Gets a response.</summary>
            
             <param name="httpReq">The HTTP request.</param>
             <param name="httpRes">The HTTP resource.</param>
             <param name="request">The request.</param>
            
             <returns>The response.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.RestHandler.CreateRequest(NServiceKit.ServiceHost.IHttpRequest,System.String)">
            <summary>
            Used in Unit tests
            </summary>
            <returns></returns>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.RestHandler.RestPath">
             <summary>Gets or sets the full pathname of the rest file.</summary>
            
             <value>The full pathname of the rest file.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.RestHandler.ResponseContentType">
             <summary>Set from SSHHF.GetHandlerForPathInfo()</summary>
            
             <value>The type of the response content.</value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestWrapper">
            <summary>A HTTP request wrapper.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestWrapper.#ctor(System.Web.HttpRequest)">
             <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.Extensions.HttpRequestWrapper class.</summary>
            
             <param name="request">The request.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestWrapper.#ctor(System.String,System.Web.HttpRequest)">
             <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.Extensions.HttpRequestWrapper class.</summary>
            
             <param name="operationName">The name of the operation.</param>
             <param name="request">      The request.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestWrapper.TryResolve``1">
             <summary>Try resolve.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
            
             <returns>A T.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestWrapper.Param(System.String)">
             <summary>Parameters.</summary>
            
             <param name="name">The name.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestWrapper.GetRawBody">
             <summary>The entire string contents of Request.InputStream.</summary>
            
             <returns>The raw body.</returns>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestWrapper.Container">
             <summary>Gets or sets the container.</summary>
            
             <value>The container.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestWrapper.Request">
             <summary>Gets the request.</summary>
            
             <value>The request.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestWrapper.OriginalRequest">
             <summary>The underlying ASP.NET or HttpListener HttpRequest.</summary>
            
             <value>The original request.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestWrapper.OperationName">
             <summary>The name of the service being called (e.g. Request DTO Name)</summary>
            
             <value>The name of the operation.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestWrapper.ContentType">
             <summary>The request ContentType.</summary>
            
             <value>The type of the content.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestWrapper.HttpMethod">
             <summary>Gets the HTTP method.</summary>
            
             <value>The HTTP method.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestWrapper.IsLocal">
             <summary>Gets a value indicating whether this object is local.</summary>
            
             <value>true if this object is local, false if not.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestWrapper.UserAgent">
             <summary>Gets the user agent.</summary>
            
             <value>The user agent.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestWrapper.Items">
             <summary>Attach any data to this request that all filters and services can access.</summary>
            
             <value>The items.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestWrapper.ResponseContentType">
             <summary>The expected Response ContentType for this request.</summary>
            
             <value>The type of the response content.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestWrapper.Cookies">
             <summary>Gets the cookies.</summary>
            
             <value>The cookies.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestWrapper.Headers">
             <summary>Gets the headers.</summary>
            
             <value>The headers.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestWrapper.QueryString">
             <summary>Gets the query string.</summary>
            
             <value>The query string.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestWrapper.FormData">
             <summary>Gets information describing the form.</summary>
            
             <value>Information describing the form.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestWrapper.RawUrl">
             <summary>Gets URL of the raw.</summary>
            
             <value>The raw URL.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestWrapper.AbsoluteUri">
             <summary>Gets URI of the absolute.</summary>
            
             <value>The absolute URI.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestWrapper.UserHostAddress">
             <summary>The Remote Ip as reported by Request.UserHostAddress.</summary>
            
             <value>The user host address.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestWrapper.XForwardedFor">
             <summary>The value of the X-Forwarded-For header, null if null or empty.</summary>
            
             <value>The x coordinate forwarded for.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestWrapper.XRealIp">
             <summary>The value of the X-Real-IP header, null if null or empty.</summary>
            
             <value>The x coordinate real IP.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestWrapper.RemoteIp">
             <summary>The Remote Ip as reported by X-Forwarded-For, X-Real-IP or Request.UserHostAddress.</summary>
            
             <value>The remote IP.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestWrapper.IsSecureConnection">
             <summary>e.g. is https or not.</summary>
            
             <value>true if this object is secure connection, false if not.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestWrapper.AcceptTypes">
             <summary>Gets a list of types of the accepts.</summary>
            
             <value>A list of types of the accepts.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestWrapper.PathInfo">
             <summary>Gets information describing the path.</summary>
            
             <value>Information describing the path.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestWrapper.UrlHostName">
             <summary>Gets the name of the URL host.</summary>
            
             <value>The name of the URL host.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestWrapper.UseBufferedStream">
             <summary>Buffer the Request InputStream so it can be re-read.</summary>
            
             <value>true if use buffered stream, false if not.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestWrapper.InputStream">
             <summary>Gets the input stream.</summary>
            
             <value>The input stream.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestWrapper.ContentLength">
             <summary>Gets the length of the content.</summary>
            
             <value>The length of the content.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestWrapper.Files">
             <summary>Access to the multi-part/formdata files posted on this request.</summary>
            
             <value>The files.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestWrapper.ApplicationFilePath">
             <summary>Gets the full pathname of the application file.</summary>
            
             <value>The full pathname of the application file.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestWrapper.UrlReferrer">
             <summary>The value of the Referrer, null if not available.</summary>
            
             <value>The URL referrer.</value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Ext.AllFilesHandler">
            <summary>
            Summary description for $codebehindclassname$
            </summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Ext.AllFilesHandler.ProcessRequest(System.Web.HttpContext)">
             <summary>Enables processing of HTTP Web requests by a custom HttpHandler that implements the <see cref="T:System.Web.IHttpHandler"/> interface.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <param name="context">An <see cref="T:System.Web.HttpContext"/> object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) used to
             service HTTP requests.
             </param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Ext.AllFilesHandler.WrapJavascriptInNamespace(System.String)">
             <summary>Wrap javascript in namespace.</summary>
            
             <param name="jsText">The js text.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Ext.AllFilesHandler.InHiddenDirectory(System.String)">
             <summary>In hidden directory.</summary>
            
             <param name="filePath">Full pathname of the file.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Ext.AllFilesHandler.GetAllTextFiles(System.String,System.String)">
             <summary>Gets all text files.</summary>
            
             <exception cref="T:System.UnauthorizedAccessException">Thrown when an Unauthorized Access error condition occurs.</exception>
            
             <param name="path">  Full pathname of the file.</param>
             <param name="filter">Specifies the filter.</param>
            
             <returns>all text files.</returns>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Ext.AllFilesHandler.IsReusable">
             <summary>Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler" /> instance.</summary>
            
             <value>true if the <see cref="T:System.Web.IHttpHandler" /> instance is reusable; otherwise, false.</value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.HttpWebRequestConfig">
            <summary>A HTTP web request configuration.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.HttpWebRequestConfig.Configure">
            <summary>Configures this object.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.HttpWebRequestConfig.TransferAuthenticationTokens(System.Net.HttpWebRequest)">
             <summary>Transfer authentication tokens.</summary>
            
             <param name="httpWebRequest">The HTTP web request.</param>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Metadata.JsvMetadataHandler">
            <summary>A jsv metadata handler.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Metadata.JsvMetadataHandler.CreateMessage(System.Type)">
             <summary>Creates a message.</summary>
            
             <param name="dtoType">Type of the dto.</param>
            
             <returns>The new message.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Metadata.JsvMetadataHandler.RenderOperations(System.Web.UI.HtmlTextWriter,NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.ServiceMetadata)">
             <summary>Renders the operations.</summary>
            
             <param name="writer">  The writer.</param>
             <param name="httpReq"> The HTTP request.</param>
             <param name="metadata">The metadata.</param>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Metadata.JsvMetadataHandler.Format">
             <summary>Gets the format to use.</summary>
            
             <value>The format.</value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.ServiceHostEnvironment">
            <summary>A service host environment.</summary>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.ServiceHostEnvironment.WebServer">
             <summary>Gets or sets the web server.</summary>
            
             <value>The web server.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.ServiceHostEnvironment.HostName">
             <summary>Gets or sets the name of the host.</summary>
            
             <value>The name of the host.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.ServiceHostEnvironment.HttpHandlerPath">
             <summary>Gets or sets the full pathname of the HTTP handler file.</summary>
            
             <value>The full pathname of the HTTP handler file.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.ServiceHostEnvironment.BaseUrl">
             <summary>Gets or sets URL of the base.</summary>
            
             <value>The base URL.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.ServiceHostEnvironment.BasePath">
             <summary>Gets or sets the full pathname of the base file.</summary>
            
             <value>The full pathname of the base file.</value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Support.ForbiddenHttpHandler">
            <summary>A forbidden HTTP handler.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.ForbiddenHttpHandler.ProcessRequest(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse,System.String)">
             <summary>Enables processing of HTTP Web requests by a custom HttpHandler that implements the <see cref="T:System.Web.IHttpHandler" /> interface.</summary>
            
             <param name="request">      The request.</param>
             <param name="response">     The response.</param>
             <param name="operationName">Name of the operation.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.ForbiddenHttpHandler.ProcessRequest(System.Web.HttpContext)">
             <summary>Enables processing of HTTP Web requests by a custom HttpHandler that implements the <see cref="T:System.Web.IHttpHandler" /> interface.</summary>
            
             <param name="context">An <see cref="T:System.Web.HttpContext" /> object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) used to
             service HTTP requests.
             </param>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.ForbiddenHttpHandler.IsIntegratedPipeline">
             <summary>Gets or sets the is integrated pipeline.</summary>
            
             <value>The is integrated pipeline.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.ForbiddenHttpHandler.WebHostPhysicalPath">
             <summary>Gets or sets the full pathname of the web host physical file.</summary>
            
             <value>The full pathname of the web host physical file.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.ForbiddenHttpHandler.WebHostRootFileNames">
             <summary>Gets or sets a list of names of the web host root files.</summary>
            
             <value>A list of names of the web host root files.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.ForbiddenHttpHandler.ApplicationBaseUrl">
             <summary>Gets or sets URL of the application base.</summary>
            
             <value>The application base URL.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.ForbiddenHttpHandler.DefaultRootFileName">
             <summary>Gets or sets the default root file name.</summary>
            
             <value>The default root file name.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.ForbiddenHttpHandler.DefaultHandler">
             <summary>Gets or sets the default handler.</summary>
            
             <value>The default handler.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.ForbiddenHttpHandler.IsReusable">
             <summary>Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler" /> instance.</summary>
            
             <value>true if the <see cref="T:System.Web.IHttpHandler" /> instance is reusable; otherwise, false.</value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Support.Mocks.HttpRequestMock">
            <summary>A HTTP request mock.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Mocks.HttpRequestMock.#ctor">
            <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.Support.Mocks.HttpRequestMock class.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Mocks.HttpRequestMock.#ctor(System.String,System.String,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.IO.Stream,System.Collections.Specialized.NameValueCollection)">
             <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.Support.Mocks.HttpRequestMock class.</summary>
            
             <param name="operationName">The name of the operation.</param>
             <param name="httpMethod">   The HTTP method.</param>
             <param name="contentType">  The type of the content.</param>
             <param name="pathInfo">     Information describing the path.</param>
             <param name="queryString">  The query string.</param>
             <param name="inputStream">  The input stream.</param>
             <param name="formData">     Information describing the form.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Mocks.HttpRequestMock.TryResolve``1">
             <summary>Try resolve.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
            
             <returns>A T.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Mocks.HttpRequestMock.GetRawBody">
             <summary>The entire string contents of Request.InputStream.</summary>
            
             <returns>The raw body.</returns>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Mocks.HttpRequestMock.OriginalRequest">
             <summary>The underlying ASP.NET or HttpListener HttpRequest.</summary>
            
             <value>The original request.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Mocks.HttpRequestMock.OperationName">
             <summary>The name of the service being called (e.g. Request DTO Name)</summary>
            
             <value>The name of the operation.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Mocks.HttpRequestMock.ContentType">
             <summary>The request ContentType.</summary>
            
             <value>The type of the content.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Mocks.HttpRequestMock.HttpMethod">
             <summary>Gets or sets the HTTP method.</summary>
            
             <value>The HTTP method.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Mocks.HttpRequestMock.IsLocal">
             <summary>Gets a value indicating whether this object is local.</summary>
            
             <value>true if this object is local, false if not.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Mocks.HttpRequestMock.UserAgent">
             <summary>Gets or sets the user agent.</summary>
            
             <value>The user agent.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Mocks.HttpRequestMock.Cookies">
             <summary>Gets or sets the cookies.</summary>
            
             <value>The cookies.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Mocks.HttpRequestMock.ResponseContentType">
             <summary>The expected Response ContentType for this request.</summary>
            
             <value>The type of the response content.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Mocks.HttpRequestMock.Headers">
             <summary>Gets or sets the headers.</summary>
            
             <value>The headers.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Mocks.HttpRequestMock.QueryString">
             <summary>Gets or sets the query string.</summary>
            
             <value>The query string.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Mocks.HttpRequestMock.FormData">
             <summary>Gets or sets information describing the form.</summary>
            
             <value>Information describing the form.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Mocks.HttpRequestMock.UseBufferedStream">
             <summary>Buffer the Request InputStream so it can be re-read.</summary>
            
             <value>true if use buffered stream, false if not.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Mocks.HttpRequestMock.Items">
             <summary>Attach any data to this request that all filters and services can access.</summary>
            
             <value>The items.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Mocks.HttpRequestMock.RawUrl">
             <summary>Gets or sets URL of the raw.</summary>
            
             <value>The raw URL.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Mocks.HttpRequestMock.AbsoluteUri">
             <summary>Gets or sets URI of the absolute.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <value>The absolute URI.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Mocks.HttpRequestMock.UserHostAddress">
             <summary>The Remote Ip as reported by Request.UserHostAddress.</summary>
            
             <value>The user host address.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Mocks.HttpRequestMock.RemoteIp">
             <summary>The Remote Ip as reported by X-Forwarded-For, X-Real-IP or Request.UserHostAddress.</summary>
            
             <value>The remote IP.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Mocks.HttpRequestMock.XForwardedFor">
             <summary>The value of the X-Forwarded-For header, null if null or empty.</summary>
            
             <value>The x coordinate forwarded for.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Mocks.HttpRequestMock.XRealIp">
             <summary>The value of the X-Real-IP header, null if null or empty.</summary>
            
             <value>The x coordinate real IP.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Mocks.HttpRequestMock.IsSecureConnection">
             <summary>e.g. is https or not.</summary>
            
             <value>true if this object is secure connection, false if not.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Mocks.HttpRequestMock.AcceptTypes">
             <summary>Gets or sets a list of types of the accepts.</summary>
            
             <value>A list of types of the accepts.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Mocks.HttpRequestMock.PathInfo">
             <summary>Gets or sets information describing the path.</summary>
            
             <value>Information describing the path.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Mocks.HttpRequestMock.InputStream">
             <summary>Gets or sets the input stream.</summary>
            
             <value>The input stream.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Mocks.HttpRequestMock.ContentLength">
             <summary>Gets the length of the content.</summary>
            
             <value>The length of the content.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Mocks.HttpRequestMock.Files">
             <summary>Access to the multi-part/formdata files posted on this request.</summary>
            
             <value>The files.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Mocks.HttpRequestMock.ApplicationFilePath">
             <summary>Gets the full pathname of the application file.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <value>The full pathname of the application file.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Mocks.HttpRequestMock.UrlReferrer">
             <summary>The value of the Referrer, null if not available.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <value>The URL referrer.</value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Tests.Mocks.HttpResponseMock">
            <summary>A HTTP response mock.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Tests.Mocks.HttpResponseMock.#ctor">
            <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.Tests.Mocks.HttpResponseMock class.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Tests.Mocks.HttpResponseMock.GetOutputStreamAsString">
             <summary>Gets output stream as string.</summary>
            
             <returns>The output stream as string.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Tests.Mocks.HttpResponseMock.GetOutputStreamAsBytes">
             <summary>Gets output stream as bytes.</summary>
            
             <returns>An array of byte.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Tests.Mocks.HttpResponseMock.AddHeader(System.String,System.String)">
             <summary>Adds a header to 'value'.</summary>
            
             <param name="name"> The name.</param>
             <param name="value">The value.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Tests.Mocks.HttpResponseMock.Redirect(System.String)">
             <summary>Redirects the given document.</summary>
            
             <param name="url">URL of the document.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Tests.Mocks.HttpResponseMock.Write(System.String)">
             <summary>Writes.</summary>
            
             <param name="text">The text to write.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Tests.Mocks.HttpResponseMock.Close">
            <summary>
            Signal that this response has been handled and no more processing should be done. When used in a request or response filter, no more filters or processing is done on this request.
            </summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Tests.Mocks.HttpResponseMock.End">
            <summary>Calls Response.End() on ASP.NET HttpResponse otherwise is an alias for Close(). Useful when you want to prevent ASP.NET to provide it's own custom error page.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Tests.Mocks.HttpResponseMock.Flush">
            <summary>Response.Flush() and OutputStream.Flush() seem to have different behaviour in ASP.NET.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Tests.Mocks.HttpResponseMock.SetContentLength(System.Int64)">
             <summary>Sets content length.</summary>
            
             <param name="contentLength">Length of the content.</param>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Tests.Mocks.HttpResponseMock.OriginalResponse">
             <summary>The underlying ASP.NET or HttpListener HttpResponse.</summary>
            
             <value>The original response.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Tests.Mocks.HttpResponseMock.TextWritten">
             <summary>Gets or sets the text written.</summary>
            
             <value>The text written.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Tests.Mocks.HttpResponseMock.StatusCode">
             <summary>Gets or sets the status code.</summary>
            
             <value>The status code.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Tests.Mocks.HttpResponseMock.StatusDescription">
             <summary>Gets or sets information describing the status.</summary>
            
             <value>Information describing the status.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Tests.Mocks.HttpResponseMock.ContentType">
             <summary>Gets or sets the type of the content.</summary>
            
             <value>The type of the content.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Tests.Mocks.HttpResponseMock.Headers">
             <summary>Gets the headers.</summary>
            
             <value>The headers.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Tests.Mocks.HttpResponseMock.Cookies">
             <summary>Gets or sets the cookies.</summary>
            
             <value>The cookies.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Tests.Mocks.HttpResponseMock.OutputStream">
             <summary>Gets the output stream.</summary>
            
             <value>The output stream.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Tests.Mocks.HttpResponseMock.IsClosed">
             <summary>Gets a value indicating whether this instance is closed.</summary>
            
             <value>true if this object is closed, false if not.</value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Support.RedirectHttpHandler">
            <summary>A redirect HTTP handler.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.RedirectHttpHandler.ProcessRequest(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse,System.String)">
            <summary>
            Non ASP.NET requests
            </summary>
            <param name="request"></param>
            <param name="response"></param>
            <param name="operationName"></param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.RedirectHttpHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            ASP.NET requests
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.RedirectHttpHandler.RelativeUrl">
             <summary>Gets or sets URL of the relative.</summary>
            
             <value>The relative URL.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.RedirectHttpHandler.AbsoluteUrl">
             <summary>Gets or sets URL of the absolute.</summary>
            
             <value>The absolute URL.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.RedirectHttpHandler.IsReusable">
             <summary>Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler" /> instance.</summary>
            
             <value>true if the <see cref="T:System.Web.IHttpHandler" /> instance is reusable; otherwise, false.</value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Support.NotFoundHttpHandler">
            <summary>A not found HTTP handler.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.NotFoundHttpHandler.ProcessRequest(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse,System.String)">
             <summary>Process the request.</summary>
            
             <param name="request">      The HTTP request.</param>
             <param name="response">     The HTTP resource.</param>
             <param name="operationName">Name of the operation.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.NotFoundHttpHandler.ProcessRequest(System.Web.HttpContext)">
             <summary>Enables processing of HTTP Web requests by a custom HttpHandler that implements the <see cref="T:System.Web.IHttpHandler" /> interface.</summary>
            
             <param name="context">An <see cref="T:System.Web.HttpContext" /> object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) used to
             service HTTP requests.
             </param>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.NotFoundHttpHandler.IsIntegratedPipeline">
             <summary>Gets or sets the is integrated pipeline.</summary>
            
             <value>The is integrated pipeline.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.NotFoundHttpHandler.WebHostPhysicalPath">
             <summary>Gets or sets the full pathname of the web host physical file.</summary>
            
             <value>The full pathname of the web host physical file.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.NotFoundHttpHandler.WebHostRootFileNames">
             <summary>Gets or sets a list of names of the web host root files.</summary>
            
             <value>A list of names of the web host root files.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.NotFoundHttpHandler.ApplicationBaseUrl">
             <summary>Gets or sets URL of the application base.</summary>
            
             <value>The application base URL.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.NotFoundHttpHandler.DefaultRootFileName">
             <summary>Gets or sets the default root file name.</summary>
            
             <value>The default root file name.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.NotFoundHttpHandler.DefaultHandler">
             <summary>Gets or sets the default handler.</summary>
            
             <value>The default handler.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.NotFoundHttpHandler.IsReusable">
             <summary>Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler" /> instance.</summary>
            
             <value>true if the <see cref="T:System.Web.IHttpHandler" /> instance is reusable; otherwise, false.</value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.JsvAsyncOneWayHandler">
            <summary>A jsv asynchronous one way handler.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.JsvAsyncOneWayHandler.#ctor">
            <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.JsvAsyncOneWayHandler class.</summary>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.JsvSyncReplyHandler">
            <summary>A jsv synchronise reply handler.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.JsvSyncReplyHandler.#ctor">
            <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.JsvSyncReplyHandler class.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.JsvSyncReplyHandler.ProcessRequest(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse,System.String)">
             <summary>Process the request.</summary>
            
             <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            
             <param name="httpReq">      The HTTP request.</param>
             <param name="httpRes">      The HTTP resource.</param>
             <param name="operationName">Name of the operation.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.JsvSyncReplyHandler.WriteDebugResponse(NServiceKit.ServiceHost.IHttpResponse,System.Object)">
             <summary>Writes a debug response.</summary>
            
             <param name="httpRes"> The HTTP resource.</param>
             <param name="response">The response.</param>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Extensions.HttpResponseExtensions">
            <summary>A HTTP response extensions.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpResponseExtensions.WriteToOutputStream(NServiceKit.ServiceHost.IHttpResponse,System.Object,System.Byte[],System.Byte[])">
             <summary>Writes to output stream.</summary>
            
             <param name="response">  The response.</param>
             <param name="result">    Whether or not it was implicity handled by NServiceKit's built-in handlers.</param>
             <param name="bodyPrefix">Add prefix to response body if any.</param>
             <param name="bodySuffix">Add suffix to response body if any.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpResponseExtensions.WriteToResponse(NServiceKit.ServiceHost.IHttpResponse,System.Object,System.String)">
             <summary>Writes to response. Response headers are customizable by implementing IHasOptions an returning Dictionary of Http headers.</summary>
            
             <param name="httpRes">    The httpRes to act on.</param>
             <param name="result">     Whether or not it was implicity handled by NServiceKit's built-in handlers.</param>
             <param name="contentType">Type of the content.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpResponseExtensions.WriteToResponse(NServiceKit.ServiceHost.IHttpResponse,NServiceKit.ServiceHost.IHttpRequest,System.Object)">
             <summary>Writes to response. Response headers are customizable by implementing IHasOptions an returning Dictionary of Http headers.</summary>
            
             <param name="httpRes">The httpRes to act on.</param>
             <param name="httpReq">The HTTP request.</param>
             <param name="result"> Whether or not it was implicity handled by NServiceKit's built-in handlers.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpResponseExtensions.WriteToResponse(NServiceKit.ServiceHost.IHttpResponse,NServiceKit.ServiceHost.IHttpRequest,System.Object,System.Byte[],System.Byte[])">
             <summary>Writes to response. Response headers are customizable by implementing IHasOptions an returning Dictionary of Http headers.</summary>
            
             <param name="httpRes">   The httpRes to act on.</param>
             <param name="httpReq">   The HTTP request.</param>
             <param name="result">    Whether or not it was implicity handled by NServiceKit's built-in handlers.</param>
             <param name="bodyPrefix">Add prefix to response body if any.</param>
             <param name="bodySuffix">Add suffix to response body if any.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpResponseExtensions.WriteToResponse(NServiceKit.ServiceHost.IHttpResponse,System.Object,NServiceKit.ServiceHost.ResponseSerializerDelegate,NServiceKit.ServiceHost.IRequestContext)">
             <summary>Writes to response. Response headers are customizable by implementing IHasOptions an returning Dictionary of Http headers.</summary>
            
             <param name="httpRes">             The httpRes to act on.</param>
             <param name="result">              Whether or not it was implicity handled by NServiceKit's built-in handlers.</param>
             <param name="serializer">          The serializer.</param>
             <param name="serializationContext">Context for the serialization.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpResponseExtensions.WriteToResponse(NServiceKit.ServiceHost.IHttpResponse,System.Object,NServiceKit.ServiceHost.ResponseSerializerDelegate,NServiceKit.ServiceHost.IRequestContext,System.Byte[],System.Byte[])">
            <summary>
            Writes to response.
            Response headers are customizable by implementing IHasOptions an returning Dictionary of Http headers.
            </summary>
            <param name="response">The response.</param>
            <param name="result">Whether or not it was implicity handled by NServiceKit's built-in handlers.</param>
            <param name="defaultAction">The default action.</param>
            <param name="serializerCtx">The serialization context.</param>
            <param name="bodyPrefix">Add prefix to response body if any</param>
            <param name="bodySuffix">Add suffix to response body if any</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpResponseExtensions.WriteTextToResponse(NServiceKit.ServiceHost.IHttpResponse,System.String,System.String)">
             <summary>An IHttpResponse extension method that writes a text to response.</summary>
            
             <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            
             <param name="response">          The response.</param>
             <param name="text">              The text.</param>
             <param name="defaultContentType">The default content type.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpResponseExtensions.WriteError(NServiceKit.ServiceHost.IHttpResponse,NServiceKit.ServiceHost.IHttpRequest,System.Object,System.String)">
             <summary>An IHttpResponse extension method that writes an error.</summary>
            
             <param name="httpRes">     The httpRes to act on.</param>
             <param name="httpReq">     The HTTP request.</param>
             <param name="dto">         The dto.</param>
             <param name="errorMessage">Message describing the error.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpResponseExtensions.WriteErrorToResponse(NServiceKit.ServiceHost.IHttpResponse,NServiceKit.ServiceHost.IHttpRequest,System.String,System.String,System.String,System.Exception,System.Int32)">
             <summary>An IHttpResponse extension method that writes an error to response.</summary>
            
             <param name="httpRes">      The httpRes to act on.</param>
             <param name="httpReq">      The HTTP request.</param>
             <param name="contentType">  Type of the content.</param>
             <param name="operationName">Name of the operation.</param>
             <param name="errorMessage"> Message describing the error.</param>
             <param name="ex">           The ex.</param>
             <param name="statusCode">   The status code.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpResponseExtensions.ApplyGlobalResponseHeaders(System.Net.HttpListenerResponse)">
             <summary>An IHttpResponse extension method that applies the global response headers described by httpRes.</summary>
            
             <param name="httpRes">The httpRes to act on.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpResponseExtensions.ApplyGlobalResponseHeaders(System.Web.HttpResponse)">
             <summary>An IHttpResponse extension method that applies the global response headers described by httpRes.</summary>
            
             <param name="httpRes">The httpRes to act on.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpResponseExtensions.ApplyGlobalResponseHeaders(NServiceKit.ServiceHost.IHttpResponse)">
             <summary>An IHttpResponse extension method that applies the global response headers described by httpRes.</summary>
            
             <param name="httpRes">The httpRes to act on.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpResponseExtensions.EndNServiceKitRequest(System.Web.HttpResponse,System.Boolean)">
             <summary>(This method is obsolete) an IHttpResponse extension method that ends n service kit request.</summary>
            
             <param name="httpRes">    The httpRes to act on.</param>
             <param name="skipHeaders">true to skip headers.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpResponseExtensions.EndNServiceKitRequest(NServiceKit.ServiceHost.IHttpResponse,System.Boolean)">
             <summary>(This method is obsolete) an IHttpResponse extension method that ends n service kit request.</summary>
            
             <param name="httpRes">    The httpRes to act on.</param>
             <param name="skipHeaders">true to skip headers.</param>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerResponseWrapper">
            <summary>A HTTP listener response wrapper.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerResponseWrapper.#ctor(System.Net.HttpListenerResponse)">
             <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.Extensions.HttpListenerResponseWrapper class.</summary>
            
             <param name="response">The response.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerResponseWrapper.AddHeader(System.String,System.String)">
             <summary>Adds a header to 'value'.</summary>
            
             <param name="name"> The name.</param>
             <param name="value">The value.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerResponseWrapper.Redirect(System.String)">
             <summary>Redirects the given document.</summary>
            
             <param name="url">URL of the document.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerResponseWrapper.Write(System.String)">
             <summary>Writes.</summary>
            
             <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            
             <param name="text">The text to write.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerResponseWrapper.Close">
            <summary>
            Signal that this response has been handled and no more processing should be done. When used in a request or response filter, no more filters or processing is done on this request.
            </summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerResponseWrapper.End">
            <summary>Calls Response.End() on ASP.NET HttpResponse otherwise is an alias for Close(). Useful when you want to prevent ASP.NET to provide it's own custom error page.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerResponseWrapper.Flush">
            <summary>Response.Flush() and OutputStream.Flush() seem to have different behaviour in ASP.NET.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerResponseWrapper.SetContentLength(System.Int64)">
             <summary>Sets content length.</summary>
            
             <param name="contentLength">Length of the content.</param>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerResponseWrapper.OriginalResponse">
             <summary>The underlying ASP.NET or HttpListener HttpResponse.</summary>
            
             <value>The original response.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerResponseWrapper.StatusCode">
             <summary>Gets or sets the status code.</summary>
            
             <value>The status code.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerResponseWrapper.StatusDescription">
             <summary>Gets or sets information describing the status.</summary>
            
             <value>Information describing the status.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerResponseWrapper.ContentType">
             <summary>Gets or sets the type of the content.</summary>
            
             <value>The type of the content.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerResponseWrapper.Cookies">
             <summary>Gets or sets the cookies.</summary>
            
             <value>The cookies.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerResponseWrapper.OutputStream">
             <summary>Gets the output stream.</summary>
            
             <value>The output stream.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpListenerResponseWrapper.IsClosed">
             <summary>Gets a value indicating whether this instance is closed.</summary>
            
             <value>true if this object is closed, false if not.</value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestExtensions">
            	 * 
            		 Input: http://localhost:96/Cambia3/Temp/Test.aspx/path/info?q=item#fragment
            
            		Some HttpRequest path and URL properties:
            		Request.ApplicationPath:	/Cambia3
            		Request.CurrentExecutionFilePath:	/Cambia3/Temp/Test.aspx
            		Request.FilePath:			/Cambia3/Temp/Test.aspx
            		Request.Path:				/Cambia3/Temp/Test.aspx/path/info
            		Request.PathInfo:			/path/info
            		Request.PhysicalApplicationPath:	D:\Inetpub\wwwroot\CambiaWeb\Cambia3\
            		Request.QueryString:		/Cambia3/Temp/Test.aspx/path/info?query=arg
            		Request.Url.AbsolutePath:	/Cambia3/Temp/Test.aspx/path/info
            		Request.Url.AbsoluteUri:	http://localhost:96/Cambia3/Temp/Test.aspx/path/info?query=arg
            		Request.Url.Fragment:	
            		Request.Url.Host:			localhost
            		Request.Url.LocalPath:		/Cambia3/Temp/Test.aspx/path/info
            		Request.Url.PathAndQuery:	/Cambia3/Temp/Test.aspx/path/info?query=arg
            		Request.Url.Port:			96
            		Request.Url.Query:			?query=arg
            		Request.Url.Scheme:			http
            		Request.Url.Segments:		/
            									Cambia3/
            									Temp/
            									Test.aspx/
            									path/
            									info
            	 * 
            <summary>A HTTP request extensions.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestExtensions.GetOperationName(System.Web.HttpRequest)">
             <summary>A HttpListenerRequest extension method that gets operation name.</summary>
            
             <param name="request">The request to act on.</param>
            
             <returns>The operation name.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestExtensions.GetOperationNameFromLastPathInfo(System.String)">
             <summary>Gets operation name from last path information.</summary>
            
             <param name="lastPathInfo">Information describing the last path.</param>
            
             <returns>The operation name from last path information.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestExtensions.GetLastPathInfo(System.Web.HttpRequest)">
             <summary>A HttpListenerRequest extension method that gets the last path information.</summary>
            
             <param name="request">The request to act on.</param>
            
             <returns>The last path information.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestExtensions.GetUrlHostName(System.Web.HttpRequest)">
             <summary>A HttpRequest extension method that gets URL host name.</summary>
            
             <param name="request">The request to act on.</param>
            
             <returns>The URL host name.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestExtensions.GetParentBaseUrl(System.Web.HttpRequest)">
             <summary>
             http://localhost/NServiceKit.Examples.Host.Web/Public/Public/Soap12/Wsdl =>
             http://localhost/NServiceKit.Examples.Host.Web/Public/Soap12/.
             </summary>
            
             <param name="request">The request to act on.</param>
            
             <returns>The parent base URL.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestExtensions.GetParentBaseUrl(NServiceKit.ServiceHost.IHttpRequest)">
             <summary>An IHttpRequest extension method that gets the parent base URL.</summary>
            
             <param name="request">The request to act on.</param>
            
             <returns>The parent base URL.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestExtensions.GetBaseUrl(System.Web.HttpRequest)">
             <summary>An IHttpRequest extension method that gets base URL.</summary>
            
             <param name="request">The request to act on.</param>
            
             <returns>The base URL.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestExtensions.GetOperationName(System.Net.HttpListenerRequest)">
             <summary>A HttpListenerRequest extension method that gets operation name.</summary>
            
             <param name="request">The request to act on.</param>
            
             <returns>The operation name.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestExtensions.GetLastPathInfo(System.Net.HttpListenerRequest)">
             <summary>A HttpListenerRequest extension method that gets the last path information.</summary>
            
             <param name="request">The request to act on.</param>
            
             <returns>The last path information.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestExtensions.GetPathInfo(System.Web.HttpRequest)">
             <summary>Gets path information.</summary>
            
             <param name="request">The request to act on.</param>
            
             <returns>The path information.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestExtensions.GetPathInfo(System.String,System.String,System.String)">
             <summary>Gets path information.</summary>
            
             <param name="fullPath">Full pathname of the full file.</param>
             <param name="mode">    The mode.</param>
             <param name="appPath"> Full pathname of the application file.</param>
            
             <returns>The path information.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestExtensions.ResolvePathInfoFromMappedPath(System.String,System.String)">
             <summary>Resolve path information from mapped path.</summary>
            
             <param name="fullPath">      Full pathname of the full file.</param>
             <param name="mappedPathRoot">The mapped path root.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestExtensions.IsContentType(NServiceKit.ServiceHost.IHttpRequest,System.String)">
             <summary>An IHttpRequest extension method that query if 'request' is content type.</summary>
            
             <param name="request">    The request to act on.</param>
             <param name="contentType">Type of the content.</param>
            
             <returns>true if content type, false if not.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestExtensions.HasAnyOfContentTypes(NServiceKit.ServiceHost.IHttpRequest,System.String[])">
             <summary>An IHttpRequest extension method that query if 'request' has any of content types.</summary>
            
             <param name="request">     The request to act on.</param>
             <param name="contentTypes">List of types of the contents.</param>
            
             <returns>true if any of content types, false if not.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestExtensions.GetHttpRequest(System.Web.HttpRequest)">
             <summary>A HttpListenerRequest extension method that gets HTTP request.</summary>
            
             <param name="request">The request to act on.</param>
            
             <returns>The HTTP request.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestExtensions.GetHttpRequest(System.Net.HttpListenerRequest)">
             <summary>A HttpListenerRequest extension method that gets HTTP request.</summary>
            
             <param name="request">The request to act on.</param>
            
             <returns>The HTTP request.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestExtensions.GetRequestParams(NServiceKit.ServiceHost.IHttpRequest)">
             <summary>An IHttpRequest extension method that gets request parameters.</summary>
            
             <param name="request">The request to act on.</param>
            
             <returns>The request parameters.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestExtensions.GetQueryStringContentType(NServiceKit.ServiceHost.IHttpRequest)">
             <summary>An IHttpRequest extension method that gets query string content type.</summary>
            
             <param name="httpReq">The httpReq to act on.</param>
            
             <returns>The query string content type.</returns>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestExtensions.PreferredContentTypes">
            <summary>List of types of the preferred contents.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestExtensions.ResolveItem(NServiceKit.ServiceHost.IHttpRequest,System.String,System.Func{NServiceKit.ServiceHost.IHttpRequest,System.Object})">
            <summary>
            Use this to treat Request.Items[] as a cache by returning pre-computed items to save 
            calculating them multiple times.
            </summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestExtensions.GetResponseContentType(NServiceKit.ServiceHost.IHttpRequest)">
             <summary>An IHttpRequest extension method that gets response content type.</summary>
            
             <param name="httpReq">The httpReq to act on.</param>
            
             <returns>The response content type.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestExtensions.SetView(NServiceKit.ServiceHost.IHttpRequest,System.String)">
             <summary>An IHttpRequest extension method that sets a view.</summary>
            
             <param name="httpReq"> The httpReq to act on.</param>
             <param name="viewName">Name of the view.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestExtensions.GetView(NServiceKit.ServiceHost.IHttpRequest)">
             <summary>An IHttpRequest extension method that gets a view.</summary>
            
             <param name="httpReq">The httpReq to act on.</param>
            
             <returns>The view.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestExtensions.SetTemplate(NServiceKit.ServiceHost.IHttpRequest,System.String)">
             <summary>An IHttpRequest extension method that sets a template.</summary>
            
             <param name="httpReq">     The httpReq to act on.</param>
             <param name="templateName">Name of the template.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestExtensions.GetTemplate(NServiceKit.ServiceHost.IHttpRequest)">
             <summary>An IHttpRequest extension method that gets a template.</summary>
            
             <param name="httpReq">The httpReq to act on.</param>
            
             <returns>The template.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestExtensions.ResolveAbsoluteUrl(NServiceKit.ServiceHost.IHttpRequest,System.String)">
             <summary>An IHttpRequest extension method that resolve absolute URL.</summary>
            
             <param name="httpReq">The httpReq to act on.</param>
             <param name="url">    URL of the document.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestExtensions.ResolveBaseUrl(NServiceKit.ServiceHost.IHttpRequest)">
             <summary>An IHttpRequest extension method that resolve base URL.</summary>
            
             <param name="httpReq">The httpReq to act on.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestExtensions.GetAbsoluteUrl(NServiceKit.ServiceHost.IHttpRequest,System.String)">
             <summary>An IHttpRequest extension method that gets absolute URL.</summary>
            
             <param name="httpReq">The httpReq to act on.</param>
             <param name="url">    URL of the document.</param>
            
             <returns>The absolute URL.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestExtensions.GetBaseUrl(NServiceKit.ServiceHost.IHttpRequest)">
             <summary>An IHttpRequest extension method that gets base URL.</summary>
            
             <param name="httpReq">The httpReq to act on.</param>
            
             <returns>The base URL.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestExtensions.ToEndpointAttributes(System.String[])">
             <summary>Converts the attrNames to an endpoint attributes.</summary>
            
             <param name="attrNames">List of names of the attributes.</param>
            
             <returns>attrNames as the EndpointAttributes.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestExtensions.GetAttributes(NServiceKit.ServiceHost.IHttpRequest)">
             <summary>Gets the attributes.</summary>
            
             <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or illegal values.</exception>
            
             <param name="request">The request to act on.</param>
            
             <returns>The attributes.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestExtensions.GetAttributes(System.Net.IPAddress)">
             <summary>Gets the attributes.</summary>
            
             <param name="ipAddress">The IP address.</param>
            
             <returns>The attributes.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestExtensions.IsInLocalSubnet(System.Net.IPAddress)">
             <summary>Query if 'ipAddress' is in local subnet.</summary>
            
             <param name="ipAddress">The IP address.</param>
            
             <returns>true if in local subnet, false if not.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestExtensions.ToRequest(System.Web.HttpRequest,System.String)">
             <summary>A HttpListenerRequest extension method that converts this object to a request.</summary>
            
             <param name="aspnetHttpReq">The aspnetHttpReq to act on.</param>
             <param name="operationName">Name of the operation.</param>
            
             <returns>The given data converted to an IHttpRequest.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestExtensions.ToRequest(System.Net.HttpListenerRequest,System.String)">
             <summary>A HttpListenerRequest extension method that converts this object to a request.</summary>
            
             <param name="listenerHttpReq">The listenerHttpReq to act on.</param>
             <param name="operationName">  Name of the operation.</param>
            
             <returns>The given data converted to an IHttpRequest.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestExtensions.ToResponse(System.Web.HttpResponse)">
             <summary>A HttpListenerResponse extension method that converts the listenerHttpRes to a response.</summary>
            
             <param name="aspnetHttpRes">The aspnetHttpRes to act on.</param>
            
             <returns>listenerHttpRes as an IHttpResponse.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestExtensions.ToResponse(System.Net.HttpListenerResponse)">
             <summary>A HttpListenerResponse extension method that converts the listenerHttpRes to a response.</summary>
            
             <param name="listenerHttpRes">The listenerHttpRes to act on.</param>
            
             <returns>listenerHttpRes as an IHttpResponse.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestExtensions.SetOperationName(NServiceKit.ServiceHost.IHttpRequest,System.String)">
             <summary>An IHttpRequest extension method that sets operation name.</summary>
            
             <param name="httpReq">      The httpReq to act on.</param>
             <param name="operationName">Name of the operation.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpRequestExtensions.GetSoapMessage(NServiceKit.ServiceHost.IHttpRequest)">
             <summary>An IHttpRequest extension method that gets SOAP message.</summary>
            
             <param name="httpReq">The httpReq to act on.</param>
            
             <returns>The SOAP message.</returns>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Extensions.HttpResponseWrapper">
            <summary>A HTTP response wrapper.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpResponseWrapper.#ctor(System.Web.HttpResponse)">
             <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.Extensions.HttpResponseWrapper class.</summary>
            
             <param name="response">The response.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpResponseWrapper.AddHeader(System.String,System.String)">
             <summary>Adds a header to 'value'.</summary>
            
             <param name="name"> The name.</param>
             <param name="value">The value.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpResponseWrapper.Redirect(System.String)">
             <summary>Redirects the given document.</summary>
            
             <param name="url">URL of the document.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpResponseWrapper.Write(System.String)">
             <summary>Writes.</summary>
            
             <param name="text">The text to write.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpResponseWrapper.Close">
            <summary>
            Signal that this response has been handled and no more processing should be done. When used in a request or response filter, no more filters or processing is done on this request.
            </summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpResponseWrapper.End">
            <summary>Calls Response.End() on ASP.NET HttpResponse otherwise is an alias for Close(). Useful when you want to prevent ASP.NET to provide it's own custom error page.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpResponseWrapper.Flush">
            <summary>Response.Flush() and OutputStream.Flush() seem to have different behaviour in ASP.NET.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Extensions.HttpResponseWrapper.SetContentLength(System.Int64)">
             <summary>Sets content length.</summary>
            
             <param name="contentLength">Length of the content.</param>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpResponseWrapper.Response">
             <summary>Gets the response.</summary>
            
             <value>The response.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpResponseWrapper.OriginalResponse">
             <summary>The underlying ASP.NET or HttpListener HttpResponse.</summary>
            
             <value>The original response.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpResponseWrapper.StatusCode">
             <summary>Gets or sets the status code.</summary>
            
             <value>The status code.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpResponseWrapper.StatusDescription">
             <summary>Gets or sets information describing the status.</summary>
            
             <value>Information describing the status.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpResponseWrapper.ContentType">
             <summary>Gets or sets the type of the content.</summary>
            
             <value>The type of the content.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpResponseWrapper.Cookies">
             <summary>Gets or sets the cookies.</summary>
            
             <value>The cookies.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpResponseWrapper.OutputStream">
             <summary>Gets the output stream.</summary>
            
             <value>The output stream.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Extensions.HttpResponseWrapper.IsClosed">
             <summary>Gets a value indicating whether this instance is closed.</summary>
            
             <value>true if this object is closed, false if not.</value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.MetadataConfig">
            <summary>A metadata configuration.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.MetadataConfig.#ctor(System.String,System.String,System.String,System.String,System.String)">
             <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.MetadataConfig class.</summary>
            
             <param name="format">            Describes the format to use.</param>
             <param name="name">              The name.</param>
             <param name="syncReplyUri">      The synchronise reply URI.</param>
             <param name="asyncOneWayUri">    The asynchronous one way URI.</param>
             <param name="defaultMetadataUri">The default metadata URI.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.MetadataConfig.Create(System.String,System.String)">
             <summary>Creates a new MetadataConfig.</summary>
            
             <param name="format">Describes the format to use.</param>
             <param name="name">  The name.</param>
            
             <returns>A MetadataConfig.</returns>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.MetadataConfig.Format">
             <summary>Gets or sets the format to use.</summary>
            
             <value>The format.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.MetadataConfig.Name">
             <summary>Gets or sets the name.</summary>
            
             <value>The name.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.MetadataConfig.SyncReplyUri">
             <summary>Gets or sets URI of the synchronise reply.</summary>
            
             <value>The synchronise reply URI.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.MetadataConfig.AsyncOneWayUri">
             <summary>Gets or sets URI of the asynchronous one way.</summary>
            
             <value>The asynchronous one way URI.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.MetadataConfig.DefaultMetadataUri">
             <summary>Gets or sets the default metadata URI.</summary>
            
             <value>The default metadata URI.</value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.NServiceKitHttpHandlerFactory">
            <summary>A service kit HTTP handler factory.</summary>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.NServiceKitHttpHandlerFactory.DebugLastHandlerArgs">
            <summary>The debug last handler arguments.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.NServiceKitHttpHandlerFactory.GetHandler(System.Web.HttpContext,System.String,System.String,System.String)">
             <summary>Entry point for ASP.NET.</summary>
            
             <param name="context">       An instance of the <see cref="T:System.Web.HttpContext" /> class that provides references to intrinsic server objects (for example, Request, Response, Session, and
             Server) used to service HTTP requests.
             </param>
             <param name="requestType">   The HTTP data transfer method (GET or POST) that the client uses.</param>
             <param name="url">           The <see cref="P:System.Web.HttpRequest.RawUrl" /> of the requested resource.</param>
             <param name="pathTranslated">The <see cref="P:System.Web.HttpRequest.PhysicalApplicationPath" /> to the requested resource.</param>
            
             <returns>The handler.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.NServiceKitHttpHandlerFactory.GetBaseUrl">
             <summary>Gets base URL.</summary>
            
             <returns>The base URL.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.NServiceKitHttpHandlerFactory.GetHandler(NServiceKit.ServiceHost.IHttpRequest)">
             <summary>Entry point for HttpListener.</summary>
            
             <param name="httpReq">.</param>
            
             <returns>The handler.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.NServiceKitHttpHandlerFactory.ReturnRequestInfo(System.Web.HttpRequest)">
            <summary>
            If enabled, just returns the Request Info as it understands
            </summary>
            <param name="httpReq"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.NServiceKitHttpHandlerFactory.GetHandlerForPathInfo(System.String,System.String,System.String,System.String)">
             <summary>Gets handler for path information.</summary>
            
             <param name="httpMethod"> The HTTP method.</param>
             <param name="pathInfo">   Information describing the path.</param>
             <param name="requestPath">Full pathname of the request file.</param>
             <param name="filePath">   Full pathname of the file.</param>
            
             <returns>The handler for path information.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.NServiceKitHttpHandlerFactory.ReleaseHandler(System.Web.IHttpHandler)">
             <summary>Enables a factory to reuse an existing handler instance.</summary>
            
             <param name="handler">The <see cref="T:System.Web.IHttpHandler" /> object to reuse.</param>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Soap11Handler">
            <summary>A SOAP 11 handler.</summary>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Support.SoapHandler">
            <summary>A SOAP handler.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.SoapHandler.#ctor(NServiceKit.ServiceHost.EndpointAttributes)">
             <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.Support.SoapHandler class.</summary>
            
             <param name="soapType">Type of the SOAP.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.SoapHandler.SendOneWay(System.ServiceModel.Channels.Message)">
             <summary>Sends an one way.</summary>
            
             <param name="requestMsg">Message describing the request.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.SoapHandler.SendOneWay(System.ServiceModel.Channels.Message,NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse)">
             <summary>Sends an one way.</summary>
            
             <param name="requestMsg">  Message describing the request.</param>
             <param name="httpRequest"> The HTTP request.</param>
             <param name="httpResponse">The HTTP response.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.SoapHandler.GetRequestMessageFromStream(System.IO.Stream)">
             <summary>Gets request message from stream.</summary>
            
             <param name="requestStream">The request stream.</param>
            
             <returns>The request message from stream.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.SoapHandler.Send(System.ServiceModel.Channels.Message)">
             <summary>Send this message.</summary>
            
             <param name="requestMsg">Message describing the request.</param>
            
             <returns>A Message.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.SoapHandler.Send(System.ServiceModel.Channels.Message,NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse)">
             <summary>Send this message.</summary>
            
             <param name="requestMsg">  Message describing the request.</param>
             <param name="httpRequest"> The HTTP request.</param>
             <param name="httpResponse">The HTTP response.</param>
            
             <returns>A Message.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.SoapHandler.EmptyResponse(System.ServiceModel.Channels.Message,System.Type)">
             <summary>Empty response.</summary>
            
             <param name="requestMsg"> Message describing the request.</param>
             <param name="requestType">Type of the request.</param>
            
             <returns>A Message.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.SoapHandler.ExecuteMessage(System.ServiceModel.Channels.Message,NServiceKit.ServiceHost.EndpointAttributes,NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse)">
             <summary>Executes the message operation.</summary>
            
             <exception cref="T:System.ArgumentNullException"> Thrown when one or more required arguments are null.</exception>
             <exception>    Thrown when an unauthorized access error condition occurs.</exception>
             <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown when a Serialization error condition occurs.</exception>
            
             <param name="message">           The message.</param>
             <param name="endpointAttributes">The endpoint attributes.</param>
             <param name="httpRequest">       The HTTP request.</param>
             <param name="httpResponse">      The HTTP response.</param>
            
             <returns>A Message.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.SoapHandler.GetSoap12RequestMessage(System.IO.Stream)">
             <summary>Gets SOAP 12 request message.</summary>
            
             <param name="inputStream">Stream to read data from.</param>
            
             <returns>The SOAP 12 request message.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.SoapHandler.GetSoap11RequestMessage(System.IO.Stream)">
             <summary>Gets SOAP 11 request message.</summary>
            
             <param name="inputStream">Stream to read data from.</param>
            
             <returns>The SOAP 11 request message.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.SoapHandler.GetRequestMessage(System.IO.Stream,System.ServiceModel.Channels.MessageVersion)">
             <summary>Gets request message.</summary>
            
             <param name="inputStream">Stream to read data from.</param>
             <param name="msgVersion"> The message version.</param>
            
             <returns>The request message.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.SoapHandler.GetRequestType(System.ServiceModel.Channels.Message,System.String)">
             <summary>Gets request type.</summary>
            
             <param name="requestMsg">Message describing the request.</param>
             <param name="xml">       The XML.</param>
            
             <returns>The request type.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.SoapHandler.GetAction(System.ServiceModel.Channels.Message,System.String)">
             <summary>Gets an action.</summary>
            
             <param name="requestMsg">Message describing the request.</param>
             <param name="xml">       The XML.</param>
            
             <returns>The action.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.SoapHandler.GetActionFromHttpContext">
             <summary>Gets action from HTTP context.</summary>
            
             <returns>The action from HTTP context.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.SoapHandler.GetSoapContentType(System.String)">
             <summary>Gets SOAP content type.</summary>
            
             <param name="contentType">Type of the content.</param>
            
             <returns>The SOAP content type.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.SoapHandler.CreateRequest(NServiceKit.ServiceHost.IHttpRequest,System.String)">
             <summary>Creates a request.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <param name="request">      The request.</param>
             <param name="operationName">Name of the operation.</param>
            
             <returns>The new request.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.SoapHandler.GetResponse(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse,System.Object)">
             <summary>Gets a response.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <param name="httpReq">The HTTP request.</param>
             <param name="httpRes">The HTTP resource.</param>
             <param name="request">The request.</param>
            
             <returns>The response.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Soap11Handler.#ctor(NServiceKit.ServiceHost.EndpointAttributes)">
             <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.Soap11Handler class.</summary>
            
             <param name="soapType">Type of the SOAP.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Soap11Handler.GetRequestMessageFromStream(System.IO.Stream)">
             <summary>Gets request message from stream.</summary>
            
             <param name="requestStream">The request stream.</param>
            
             <returns>The request message from stream.</returns>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Soap11SyncReplyHandler">
            <summary>A SOAP 11 synchronise reply handler.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Soap11SyncReplyHandler.#ctor">
            <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.Soap11SyncReplyHandler class.</summary>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Soap11AsyncOneWayHandler">
            <summary>A SOAP 11 asynchronous one way handler.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Soap11AsyncOneWayHandler.#ctor">
            <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.Soap11AsyncOneWayHandler class.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Soap11AsyncOneWayHandler.ProcessRequest(System.Web.HttpContext)">
             <summary>Enables processing of HTTP Web requests by a custom HttpHandler that implements the <see cref="T:System.Web.IHttpHandler" /> interface.</summary>
            
             <param name="context">An <see cref="T:System.Web.HttpContext" /> object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) used to
             service HTTP requests.
             </param>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Soap11MessageSyncReplyHttpHandler">
            <summary>A SOAP 11 message synchronise reply HTTP handler.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Soap11MessageSyncReplyHttpHandler.#ctor">
            <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.Soap11MessageSyncReplyHttpHandler class.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Soap11MessageSyncReplyHttpHandler.ProcessRequest(System.Web.HttpContext)">
             <summary>Enables processing of HTTP Web requests by a custom HttpHandler that implements the <see cref="T:System.Web.IHttpHandler" /> interface.</summary>
            
             <param name="context">An <see cref="T:System.Web.HttpContext" /> object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) used to
             service HTTP requests.
             </param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Soap11MessageSyncReplyHttpHandler.ProcessRequest(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse,System.String)">
             <summary>Process the request.</summary>
            
             <param name="httpReq">      The HTTP request.</param>
             <param name="httpRes">      The HTTP resource.</param>
             <param name="operationName">Name of the operation.</param>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Support.DelReceiveWebRequest">
             <summary>Deletes the receive web request described by context.</summary>
            
             <param name="context">The context.</param>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Support.GzipOptimizationTest">
            <summary>
            Highly optimized code to find if GZIP is supported from:
             - http://dotnetperls.com/gzip-request
            
            Other resources for GZip, deflate resources:
            - http://www.west-wind.com/Weblog/posts/10564.aspx
            	- http://www.west-wind.com/WebLog/posts/102969.aspx
            - ICSharpCode 
            </summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.GzipOptimizationTest.GetWorker(System.Web.HttpContext)">
             <summary>Gets a worker.</summary>
            
             <param name="context">The context.</param>
            
             <returns>The worker.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.GzipOptimizationTest.HasSupport(System.Web.HttpContext)">
             <summary>Query if 'context' has support.</summary>
            
             <param name="context">The context.</param>
            
             <returns>true if support, false if not.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.GzipOptimizationTest.SlowWayToCheckIfGZipIsSupported(System.Web.HttpRequest)">
             <summary>Slow way to check if g zip is supported.</summary>
            
             <param name="request">The request.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.ServiceEndpointsMetadataConfig">
            <summary>A service endpoints metadata configuration.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.ServiceEndpointsMetadataConfig.Create(System.String)">
            <summary>
            Changes the links for the NServiceKit/metadata page
            </summary>
            <param name="NServiceKitHandlerPrefix"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.ServiceEndpointsMetadataConfig.GetEndpointConfig(System.String)">
             <summary>Gets endpoint configuration.</summary>
            
             <param name="contentType">Type of the content.</param>
            
             <returns>The endpoint configuration.</returns>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.ServiceEndpointsMetadataConfig.DefaultMetadataUri">
             <summary>Gets or sets the default metadata URI.</summary>
            
             <value>The default metadata URI.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.ServiceEndpointsMetadataConfig.Soap11">
             <summary>Gets or sets the SOAP 11.</summary>
            
             <value>The SOAP 11.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.ServiceEndpointsMetadataConfig.Soap12">
             <summary>Gets or sets the SOAP 12.</summary>
            
             <value>The SOAP 12.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.ServiceEndpointsMetadataConfig.Xml">
             <summary>Gets or sets the XML.</summary>
            
             <value>The XML.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.ServiceEndpointsMetadataConfig.Json">
             <summary>Gets or sets the JSON.</summary>
            
             <value>The JSON.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.ServiceEndpointsMetadataConfig.Jsv">
             <summary>Gets or sets the jsv.</summary>
            
             <value>The jsv.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.ServiceEndpointsMetadataConfig.Custom">
             <summary>Gets or sets the custom.</summary>
            
             <value>The custom.</value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Metadata.Soap12WsdlMetadataHandler">
            <summary>A SOAP 12 wsdl metadata handler.</summary>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Support.Metadata.WsdlMetadataHandlerBase">
            <summary>A wsdl metadata handler base.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Metadata.WsdlMetadataHandlerBase.GetWsdlTemplate">
             <summary>Gets wsdl template.</summary>
            
             <returns>The wsdl template.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Metadata.WsdlMetadataHandlerBase.Execute(System.Web.HttpContext)">
             <summary>Executes the given context.</summary>
            
             <param name="context">The context.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Metadata.WsdlMetadataHandlerBase.Execute(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse)">
             <summary>Executes.</summary>
            
             <param name="httpReq">The HTTP request.</param>
             <param name="httpRes">The HTTP resource.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Metadata.WsdlMetadataHandlerBase.GetWsdlTemplate(NServiceKit.ServiceHost.XsdMetadata,System.String,System.Boolean,System.String,System.String)">
             <summary>Gets wsdl template.</summary>
            
             <param name="operations">      The operations.</param>
             <param name="baseUri">         URI of the base.</param>
             <param name="optimizeForFlash">true to optimize for flash.</param>
             <param name="rawUrl">          URL of the raw.</param>
             <param name="serviceName">     Name of the service.</param>
            
             <returns>The wsdl template.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Metadata.Soap12WsdlMetadataHandler.GetWsdlTemplate">
             <summary>Gets wsdl template.</summary>
            
             <returns>The wsdl template.</returns>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.SoapMetadataConfig">
            <summary>A SOAP metadata configuration.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.SoapMetadataConfig.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.SoapMetadataConfig class.</summary>
            
             <param name="format">            Describes the format to use.</param>
             <param name="name">              The name.</param>
             <param name="syncReplyUri">      URI of the synchronise reply.</param>
             <param name="asyncOneWayUri">    URI of the asynchronous one way.</param>
             <param name="defaultMetadataUri">The default metadata URI.</param>
             <param name="wsdlMetadataUri">   The wsdl metadata URI.</param>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.SoapMetadataConfig.WsdlMetadataUri">
             <summary>Gets or sets URI of the wsdl metadata.</summary>
            
             <value>The wsdl metadata URI.</value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Support.IndexPageHttpHandler">
            <summary>An index page HTTP handler.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.IndexPageHttpHandler.ProcessRequest(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse,System.String)">
            <summary>
            Non ASP.NET requests
            </summary>
            <param name="request"></param>
            <param name="response"></param>
            <param name="operationName"></param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.IndexPageHttpHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            ASP.NET requests
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.IndexPageHttpHandler.IsReusable">
             <summary>Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler" /> instance.</summary>
            
             <value>true if the <see cref="T:System.Web.IHttpHandler" /> instance is reusable; otherwise, false.</value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Support.RequestInfo">
            <summary>Information about the request.</summary>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Support.RequestInfoResponse">
            <summary>A request information response.</summary>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.RequestInfoResponse.Host">
             <summary>Gets or sets the host.</summary>
            
             <value>The host.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.RequestInfoResponse.Date">
             <summary>Gets or sets the Date/Time of the date.</summary>
            
             <value>The date.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.RequestInfoResponse.ServiceName">
             <summary>Gets or sets the name of the service.</summary>
            
             <value>The name of the service.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.RequestInfoResponse.HandlerPath">
             <summary>Gets or sets the full pathname of the handler file.</summary>
            
             <value>The full pathname of the handler file.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.RequestInfoResponse.UserHostAddress">
             <summary>Gets or sets the user host address.</summary>
            
             <value>The user host address.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.RequestInfoResponse.HttpMethod">
             <summary>Gets or sets the HTTP method.</summary>
            
             <value>The HTTP method.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.RequestInfoResponse.PathInfo">
             <summary>Gets or sets information describing the path.</summary>
            
             <value>Information describing the path.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.RequestInfoResponse.ResolvedPathInfo">
             <summary>Gets or sets information describing the resolved path.</summary>
            
             <value>Information describing the resolved path.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.RequestInfoResponse.Path">
             <summary>Gets or sets the full pathname of the file.</summary>
            
             <value>The full pathname of the file.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.RequestInfoResponse.AbsoluteUri">
             <summary>Gets or sets URI of the absolute.</summary>
            
             <value>The absolute URI.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.RequestInfoResponse.ApplicationPath">
             <summary>Gets or sets the full pathname of the application file.</summary>
            
             <value>The full pathname of the application file.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.RequestInfoResponse.HandlerFactoryArgs">
             <summary>Gets or sets the handler factory arguments.</summary>
            
             <value>The handler factory arguments.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.RequestInfoResponse.RawUrl">
             <summary>Gets or sets URL of the raw.</summary>
            
             <value>The raw URL.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.RequestInfoResponse.Url">
             <summary>Gets or sets URL of the document.</summary>
            
             <value>The URL.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.RequestInfoResponse.ContentType">
             <summary>Gets or sets the type of the content.</summary>
            
             <value>The type of the content.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.RequestInfoResponse.Status">
             <summary>Gets or sets the status.</summary>
            
             <value>The status.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.RequestInfoResponse.ContentLength">
             <summary>Gets or sets the length of the content.</summary>
            
             <value>The length of the content.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.RequestInfoResponse.Headers">
             <summary>Gets or sets the headers.</summary>
            
             <value>The headers.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.RequestInfoResponse.QueryString">
             <summary>Gets or sets the query string.</summary>
            
             <value>The query string.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.RequestInfoResponse.FormData">
             <summary>Gets or sets information describing the form.</summary>
            
             <value>Information describing the form.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.RequestInfoResponse.AcceptTypes">
             <summary>Gets or sets a list of types of the accepts.</summary>
            
             <value>A list of types of the accepts.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.RequestInfoResponse.OperationName">
             <summary>Gets or sets the name of the operation.</summary>
            
             <value>The name of the operation.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.RequestInfoResponse.ResponseContentType">
             <summary>Gets or sets the type of the response content.</summary>
            
             <value>The type of the response content.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.RequestInfoResponse.ErrorCode">
             <summary>Gets or sets the error code.</summary>
            
             <value>The error code.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.RequestInfoResponse.ErrorMessage">
             <summary>Gets or sets a message describing the error.</summary>
            
             <value>A message describing the error.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.RequestInfoResponse.DebugString">
             <summary>Gets or sets the debug string.</summary>
            
             <value>The debug string.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.RequestInfoResponse.OperationNames">
             <summary>Gets or sets a list of names of the operations.</summary>
            
             <value>A list of names of the operations.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.RequestInfoResponse.AllOperationNames">
             <summary>Gets or sets a list of names of all operations.</summary>
            
             <value>A list of names of all operations.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.RequestInfoResponse.RequestResponseMap">
             <summary>Gets or sets the request response map.</summary>
            
             <value>The request response map.</value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Support.RequestInfoHandler">
            <summary>A request information handler.</summary>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.Support.RequestInfoHandler.RestPath">
            <summary>Full pathname of the rest file.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.RequestInfoHandler.ProcessRequest(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse,System.String)">
             <summary>Process the request.</summary>
            
             <param name="httpReq">      The HTTP request.</param>
             <param name="httpRes">      The HTTP resource.</param>
             <param name="operationName">Name of the operation.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.RequestInfoHandler.ProcessRequest(System.Web.HttpContext)">
             <summary>Enables processing of HTTP Web requests by a custom HttpHandler that implements the <see cref="T:System.Web.IHttpHandler" /> interface.</summary>
            
             <param name="context">An <see cref="T:System.Web.HttpContext" /> object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) used to
             service HTTP requests.
             </param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.RequestInfoHandler.ToDictionary(System.Collections.Specialized.NameValueCollection)">
             <summary>Converts a nvc to a dictionary.</summary>
            
             <param name="nvc">The nvc.</param>
            
             <returns>nvc as a Dictionary&lt;string,string&gt;</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.RequestInfoHandler.ToString(System.Collections.Specialized.NameValueCollection)">
             <summary>Convert this object into a string representation.</summary>
            
             <param name="nvc">The nvc.</param>
            
             <returns>A string that represents this object.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.RequestInfoHandler.GetRequestInfo(NServiceKit.ServiceHost.IHttpRequest)">
             <summary>Gets request information.</summary>
            
             <param name="httpReq">The HTTP request.</param>
            
             <returns>The request information.</returns>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.RequestInfoHandler.RequestInfo">
             <summary>Gets or sets information describing the request.</summary>
            
             <value>Information describing the request.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.RequestInfoHandler.IsReusable">
             <summary>Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler" /> instance.</summary>
            
             <value>true if the <see cref="T:System.Web.IHttpHandler" /> instance is reusable; otherwise, false.</value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Support.StaticFileHandler">
            <summary>A static file handler.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.StaticFileHandler.ProcessRequest(System.Web.HttpContext)">
             <summary>Enables processing of HTTP Web requests by a custom HttpHandler that implements the <see cref="T:System.Web.IHttpHandler" /> interface.</summary>
            
             <param name="context">An <see cref="T:System.Web.HttpContext" /> object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) used to
             service HTTP requests.
             </param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.StaticFileHandler.SetDefaultFile(System.String)">
            <summary>
            Keep default file contents in-memory
            </summary>
            <param name="defaultFilePath"></param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.StaticFileHandler.ProcessRequest(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse,System.String)">
             <summary>Process the request.</summary>
            
             <exception cref="T:System.Web.HttpException">        Thrown when a HTTP error condition occurs.</exception>
             <exception cref="T:System.Net.HttpListenerException">Thrown when a HTTP Listener error condition occurs.</exception>
            
             <param name="request">      The HTTP request.</param>
             <param name="response">     The HTTP resource.</param>
             <param name="operationName">Name of the operation.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.StaticFileHandler.DirectoryExists(System.String,System.String)">
             <summary>Queries if a given directory exists.</summary>
            
             <param name="dirPath">    Pathname of the directory.</param>
             <param name="appFilePath">Full pathname of the application file.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.StaticFileHandler.IsReusable">
             <summary>Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler" /> instance.</summary>
            
             <value>true if the <see cref="T:System.Web.IHttpHandler" /> instance is reusable; otherwise, false.</value>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Templates.TableTemplate.ToString">
             <summary>Returns a string that represents the current object.</summary>
            
             <returns>A string that represents the current object.</returns>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Templates.TableTemplate.Title">
             <summary>Gets or sets the title.</summary>
            
             <value>The title.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Templates.TableTemplate.Items">
             <summary>Gets or sets the items.</summary>
            
             <value>The items.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Templates.TableTemplate.ItemsMap">
             <summary>Gets or sets the items map.</summary>
            
             <value>The items map.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Templates.TableTemplate.ItemsIntMap">
             <summary>Gets or sets the items int map.</summary>
            
             <value>The items int map.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Templates.TableTemplate.ForEachItem">
             <summary>Gets or sets for each item.</summary>
            
             <value>for each item.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Templates.TableTemplate.ItemTemplate">
             <summary>Gets or sets the item template.</summary>
            
             <value>The item template.</value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Support.Templates.Soap12WsdlTemplate">
            <summary>A SOAP 12 wsdl template.</summary>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Support.Templates.WsdlTemplateBase">
            <summary>A wsdl template base.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Templates.WsdlTemplateBase.RepeaterTemplate(System.String,System.Collections.Generic.IEnumerable{System.String})">
             <summary>Repeater template.</summary>
            
             <param name="template">  The template.</param>
             <param name="dataSource">The data source.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Templates.WsdlTemplateBase.RepeaterTemplate(System.String,System.Object,System.Collections.Generic.IEnumerable{System.String})">
             <summary>Repeater template.</summary>
            
             <param name="template">  The template.</param>
             <param name="arg0">      The argument 0.</param>
             <param name="dataSource">The data source.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Templates.WsdlTemplateBase.ToString">
             <summary>Returns a string that represents the current object.</summary>
            
             <returns>A string that represents the current object.</returns>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Templates.WsdlTemplateBase.Xsd">
             <summary>Gets or sets the XSD.</summary>
            
             <value>The XSD.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Templates.WsdlTemplateBase.ServiceName">
             <summary>Gets or sets the name of the service.</summary>
            
             <value>The name of the service.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Templates.WsdlTemplateBase.ReplyOperationNames">
             <summary>Gets or sets a list of names of the reply operations.</summary>
            
             <value>A list of names of the reply operations.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Templates.WsdlTemplateBase.OneWayOperationNames">
             <summary>Gets or sets a list of names of the one way operations.</summary>
            
             <value>A list of names of the one way operations.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Templates.WsdlTemplateBase.ReplyEndpointUri">
             <summary>Gets or sets URI of the reply endpoint.</summary>
            
             <value>The reply endpoint URI.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Templates.WsdlTemplateBase.OneWayEndpointUri">
             <summary>Gets or sets URI of the one way endpoint.</summary>
            
             <value>The one way endpoint URI.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Templates.WsdlTemplateBase.WsdlName">
             <summary>Gets the name of the wsdl.</summary>
            
             <value>The name of the wsdl.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Templates.WsdlTemplateBase.ReplyMessagesTemplate">
             <summary>Gets the reply messages template.</summary>
            
             <value>The reply messages template.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Templates.WsdlTemplateBase.OneWayMessagesTemplate">
             <summary>Gets the one way messages template.</summary>
            
             <value>The one way messages template.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Templates.WsdlTemplateBase.ReplyOperationsTemplate">
             <summary>Gets the reply operations template.</summary>
            
             <value>The reply operations template.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Templates.WsdlTemplateBase.OneWayOperationsTemplate">
             <summary>Gets the one way operations template.</summary>
            
             <value>The one way operations template.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Templates.WsdlTemplateBase.ReplyActionsTemplate">
             <summary>Gets the reply actions template.</summary>
            
             <value>The reply actions template.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Templates.WsdlTemplateBase.OneWayActionsTemplate">
             <summary>Gets the one way actions template.</summary>
            
             <value>The one way actions template.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Templates.WsdlTemplateBase.ReplyBindingContainerTemplate">
             <summary>Gets the reply binding container template.</summary>
            
             <value>The reply binding container template.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Templates.WsdlTemplateBase.OneWayBindingContainerTemplate">
             <summary>Gets the one way binding container template.</summary>
            
             <value>The one way binding container template.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Templates.WsdlTemplateBase.ReplyEndpointUriTemplate">
             <summary>Gets the reply endpoint URI template.</summary>
            
             <value>The reply endpoint URI template.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Templates.WsdlTemplateBase.OneWayEndpointUriTemplate">
             <summary>Gets the one way endpoint URI template.</summary>
            
             <value>The one way endpoint URI template.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Templates.Soap12WsdlTemplate.WsdlName">
             <summary>Gets the name of the wsdl.</summary>
            
             <value>The name of the wsdl.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Templates.Soap12WsdlTemplate.ReplyActionsTemplate">
             <summary>Gets the reply actions template.</summary>
            
             <value>The reply actions template.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Templates.Soap12WsdlTemplate.OneWayActionsTemplate">
             <summary>Gets the one way actions template.</summary>
            
             <value>The one way actions template.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Templates.Soap12WsdlTemplate.ReplyBindingContainerTemplate">
             <summary>Gets the reply binding container template.</summary>
            
             <value>The reply binding container template.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Templates.Soap12WsdlTemplate.OneWayBindingContainerTemplate">
             <summary>Gets the one way binding container template.</summary>
            
             <value>The one way binding container template.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Templates.Soap12WsdlTemplate.ReplyEndpointUriTemplate">
             <summary>Gets the reply endpoint URI template.</summary>
            
             <value>The reply endpoint URI template.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Templates.Soap12WsdlTemplate.OneWayEndpointUriTemplate">
             <summary>Gets the one way endpoint URI template.</summary>
            
             <value>The one way endpoint URI template.</value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Metadata.Soap11WsdlMetadataHandler">
            <summary>A SOAP 11 wsdl metadata handler.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Metadata.Soap11WsdlMetadataHandler.GetWsdlTemplate">
             <summary>Gets wsdl template.</summary>
            
             <returns>The wsdl template.</returns>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Support.Templates.Soap11WsdlTemplate">
            <summary>A SOAP 11 wsdl template.</summary>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Templates.Soap11WsdlTemplate.WsdlName">
             <summary>Gets the name of the wsdl.</summary>
            
             <value>The name of the wsdl.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Templates.Soap11WsdlTemplate.ReplyActionsTemplate">
             <summary>Gets the reply actions template.</summary>
            
             <value>The reply actions template.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Templates.Soap11WsdlTemplate.OneWayActionsTemplate">
             <summary>Gets the one way actions template.</summary>
            
             <value>The one way actions template.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Templates.Soap11WsdlTemplate.ReplyBindingContainerTemplate">
             <summary>Gets the reply binding container template.</summary>
            
             <value>The reply binding container template.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Templates.Soap11WsdlTemplate.OneWayBindingContainerTemplate">
             <summary>Gets the one way binding container template.</summary>
            
             <value>The one way binding container template.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Templates.Soap11WsdlTemplate.ReplyEndpointUriTemplate">
             <summary>Gets the reply endpoint URI template.</summary>
            
             <value>The reply endpoint URI template.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Templates.Soap11WsdlTemplate.OneWayEndpointUriTemplate">
             <summary>Gets the one way endpoint URI template.</summary>
            
             <value>The one way endpoint URI template.</value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Soap12Handler">
            <summary>A SOAP 12 handler.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Soap12Handler.#ctor(NServiceKit.ServiceHost.EndpointAttributes)">
             <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.Soap12Handler class.</summary>
            
             <param name="soapType">Type of the SOAP.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Soap12Handler.GetRequestMessageFromStream(System.IO.Stream)">
             <summary>Gets request message from stream.</summary>
            
             <param name="requestStream">The request stream.</param>
            
             <returns>The request message from stream.</returns>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Soap12Handlers">
            <summary>A SOAP 12 handlers.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Soap12Handlers.#ctor">
            <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.Soap12Handlers class.</summary>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Soap12AsyncOneWayHandler">
            <summary>A SOAP 12 asynchronous one way handler.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Soap12AsyncOneWayHandler.#ctor">
            <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.Soap12AsyncOneWayHandler class.</summary>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Soap12MessageAsyncOneWayHttpHandler">
            <summary>A SOAP 12 message asynchronous one way HTTP handler.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Soap12MessageAsyncOneWayHttpHandler.#ctor">
            <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.Soap12MessageAsyncOneWayHttpHandler class.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Soap12MessageAsyncOneWayHttpHandler.ProcessRequest(System.Web.HttpContext)">
             <summary>Enables processing of HTTP Web requests by a custom HttpHandler that implements the <see cref="T:System.Web.IHttpHandler" /> interface.</summary>
            
             <param name="context">An <see cref="T:System.Web.HttpContext" /> object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) used to
             service HTTP requests.
             </param>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Soap12MessageSyncReplyHttpHandler">
            <summary>A SOAP 12 message synchronise reply HTTP handler.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Soap12MessageSyncReplyHttpHandler.#ctor">
            <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.Soap12MessageSyncReplyHttpHandler class.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Soap12MessageSyncReplyHttpHandler.ProcessRequest(System.Web.HttpContext)">
             <summary>Enables processing of HTTP Web requests by a custom HttpHandler that implements the <see cref="T:System.Web.IHttpHandler" /> interface.</summary>
            
             <param name="context">An <see cref="T:System.Web.HttpContext" /> object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) used to
             service HTTP requests.
             </param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Soap12MessageSyncReplyHttpHandler.ProcessRequest(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse,System.String)">
             <summary>Process the request.</summary>
            
             <param name="httpReq">      The HTTP request.</param>
             <param name="httpRes">      The HTTP resource.</param>
             <param name="operationName">Name of the operation.</param>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.JsonAsyncOneWayHandler">
            <summary>A JSON asynchronous one way handler.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.JsonAsyncOneWayHandler.#ctor">
            <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.JsonAsyncOneWayHandler class.</summary>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.JsonSyncReplyHandler">
            <summary>A JSON synchronise reply handler.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.JsonSyncReplyHandler.#ctor">
            <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.JsonSyncReplyHandler class.</summary>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.EndpointHost">
            <summary>An endpoint host.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.EndpointHost.ConfigureHost(NServiceKit.WebHost.Endpoints.IAppHost,System.String,NServiceKit.ServiceHost.ServiceManager)">
             <summary>Pre user config.</summary>
            
             <param name="appHost">       The application host.</param>
             <param name="serviceName">   Name of the service.</param>
             <param name="serviceManager">The service manager.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.EndpointHost.AfterInit">
            <summary>After configure called.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.EndpointHost.TryResolve``1">
             <summary>Try resolve.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
            
             <returns>A T.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.EndpointHost.GetPlugin``1">
             <summary>Gets the plugin.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
            
             <returns>The plugin.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.EndpointHost.AddPlugin(NServiceKit.WebHost.Endpoints.IPlugin[])">
             <summary>Adds a plugin.</summary>
            
             <param name="plugins">A variable-length parameters list containing plugins.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.EndpointHost.AssertTestConfig(System.Reflection.Assembly[])">
             <summary>Assert test configuration.</summary>
            
             <param name="assemblies">A variable-length parameters list containing assemblies.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.EndpointHost.ApplyPreRequestFilters(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse)">
            <summary>
            Applies the raw request filters. Returns whether or not the request has been handled 
            and no more processing should be done.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.EndpointHost.ApplyRequestFilters(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse,System.Object)">
            <summary>
            Applies the request filters. Returns whether or not the request has been handled 
            and no more processing should be done.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.EndpointHost.ApplyResponseFilters(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse,System.Object)">
            <summary>
            Applies the response filters. Returns whether or not the request has been handled 
            and no more processing should be done.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.EndpointHost.CreateServiceRunner``1(NServiceKit.WebHost.Endpoints.ActionContext)">
             <summary>Creates service runner.</summary>
            
             <typeparam name="TRequest">Type of the request.</typeparam>
             <param name="actionContext">Context for the action.</param>
            
             <returns>The new service runner.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.EndpointHost.CompleteRequest">
            <summary>
            Call to signal the completion of a NServiceKit-handled Request
            </summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.EndpointHost.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHost.AppHost">
             <summary>Gets the application host.</summary>
            
             <value>The application host.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHost.ContentTypeFilter">
             <summary>Gets or sets the content type filter.</summary>
            
             <value>The content type filter.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHost.RawRequestFilters">
             <summary>Gets the raw request filters.</summary>
            
             <value>The raw request filters.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHost.RequestFilters">
             <summary>Gets the request filters.</summary>
            
             <value>The request filters.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHost.ResponseFilters">
             <summary>Gets the response filters.</summary>
            
             <value>The response filters.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHost.ViewEngines">
             <summary>Gets or sets the view engines.</summary>
            
             <value>The view engines.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHost.ExceptionHandler">
             <summary>TODO: rename to UncaughtExceptionsHandler.</summary>
            
             <value>The exception handler.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHost.ServiceExceptionHandler">
             <summary>TODO: rename to ServiceExceptionsHandler.</summary>
            
             <value>The service exception handler.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHost.CatchAllHandlers">
             <summary>Gets or sets the catch all handlers.</summary>
            
             <value>The catch all handlers.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHost.Plugins">
             <summary>Gets or sets the plugins.</summary>
            
             <value>The plugins.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHost.VirtualPathProvider">
             <summary>Gets or sets the virtual path provider.</summary>
            
             <value>The virtual path provider.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHost.StartedAt">
             <summary>Gets or sets the Date/Time of the started at.</summary>
            
             <value>The started at.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHost.ReadyAt">
             <summary>Gets or sets the Date/Time of the ready at.</summary>
            
             <value>The ready at.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHost.Container">
            <summary>
            The AppHost.Container. Note: it is not thread safe to register dependencies after AppStart.
            </summary>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHost.ServiceManager">
             <summary>Gets or sets the manager for service.</summary>
            
             <value>The service manager.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHost.Config">
             <summary>Gets or sets the configuration.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <value>The configuration.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHost.DebugMode">
             <summary>Gets a value indicating whether the debug mode.</summary>
            
             <value>true if debug mode, false if not.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHost.Metadata">
             <summary>Gets the metadata.</summary>
            
             <value>The metadata.</value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.EndpointHostConfig">
            <summary>An endpoint host configuration.</summary>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.EndpointHostConfig.PublicKey">
            <summary>The public key.</summary>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.EndpointHostConfig.LicensePublicKey">
            <summary>.</summary>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.EndpointHostConfig.SkipPathValidation">
            <summary>The skip path validation.</summary>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.EndpointHostConfig.SkipRouteValidation">
            <summary>
            Use: \[Route\("[^\/]  regular expression to find violating routes in your sln
            </summary>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.EndpointHostConfig.NServiceKitPath">
            <summary>Full pathname of the service kit file.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.EndpointHostConfig.#ctor(System.String,NServiceKit.ServiceHost.ServiceManager)">
             <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.EndpointHostConfig class.</summary>
            
             <param name="serviceName">   The name of the service.</param>
             <param name="serviceManager">The service manager.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.EndpointHostConfig.#ctor">
            <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.EndpointHostConfig class.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.EndpointHostConfig.GetAppConfigPath">
             <summary>Gets application configuration path.</summary>
            
             <returns>The application configuration path.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.EndpointHostConfig.HasFeature(NServiceKit.ServiceHost.Feature)">
             <summary>Query if 'feature' has feature.</summary>
            
             <param name="feature">The feature.</param>
            
             <returns>true if feature, false if not.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.EndpointHostConfig.AssertFeatures(NServiceKit.ServiceHost.Feature)">
             <summary>Assert features.</summary>
            
             <exception cref="T:System.UnauthorizedAccessException">Thrown when an Unauthorized Access error condition occurs.</exception>
            
             <param name="usesFeatures">The uses features.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.EndpointHostConfig.UnauthorizedAccess(NServiceKit.ServiceHost.EndpointAttributes)">
             <summary>Unauthorized access.</summary>
            
             <param name="requestAttrs">The request attributes.</param>
            
             <returns>An UnauthorizedAccessException.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.EndpointHostConfig.AssertContentType(System.String)">
             <summary>Assert content type.</summary>
            
             <param name="contentType">Type of the content.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.EndpointHostConfig.HasAccessToMetadata(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse)">
             <summary>Query if 'httpReq' has access to metadata.</summary>
            
             <param name="httpReq">The HTTP request.</param>
             <param name="httpRes">The HTTP resource.</param>
            
             <returns>true if access to metadata, false if not.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.EndpointHostConfig.HandleErrorResponse(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse,System.Net.HttpStatusCode,System.String)">
             <summary>Handles the error response.</summary>
            
             <param name="httpReq">               The HTTP request.</param>
             <param name="httpRes">               The HTTP resource.</param>
             <param name="errorStatus">           The error status.</param>
             <param name="errorStatusDescription">Information describing the error status.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.EndpointHostConfig.GetHandlerForErrorStatus(System.Net.HttpStatusCode)">
             <summary>Gets handler for error status.</summary>
            
             <param name="errorStatus">The error status.</param>
            
             <returns>The handler for error status.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.EndpointHostConfig.GetCustomErrorHandler(System.Int32)">
             <summary>Handler, called when the get custom error.</summary>
            
             <param name="errorStatusCode">The error status code.</param>
            
             <returns>The custom error handler.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.EndpointHostConfig.GetCustomErrorHandler(System.Net.HttpStatusCode)">
             <summary>Handler, called when the get custom error.</summary>
            
             <param name="errorStatus">The error status.</param>
            
             <returns>The custom error handler.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.EndpointHostConfig.GetCustomErrorHttpHandler(System.Net.HttpStatusCode)">
             <summary>Handler, called when the get custom error HTTP.</summary>
            
             <param name="errorStatus">The error status.</param>
            
             <returns>The custom error HTTP handler.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.EndpointHostConfig.HasValidAuthSecret(NServiceKit.ServiceHost.IHttpRequest)">
             <summary>Query if 'req' has valid authentication secret.</summary>
            
             <param name="req">The request.</param>
            
             <returns>true if valid authentication secret, false if not.</returns>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.Instance">
             <summary>Gets the instance.</summary>
            
             <value>The instance.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.RazorNamespaces">
             <summary>Gets the razor namespaces.</summary>
            
             <value>The razor namespaces.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.ServiceManager">
             <summary>Gets the manager for service.</summary>
            
             <value>The service manager.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.Metadata">
             <summary>Gets the metadata.</summary>
            
             <value>The metadata.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.ServiceController">
             <summary>Gets the service controller.</summary>
            
             <value>The service controller.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.MetadataTypesConfig">
             <summary>Gets or sets the metadata types configuration.</summary>
            
             <value>The metadata types configuration.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.WsdlServiceNamespace">
             <summary>Gets or sets the wsdl service namespace.</summary>
            
             <value>The wsdl service namespace.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.WsdlSoapActionNamespace">
             <summary>Gets or sets the wsdl SOAP action namespace.</summary>
            
             <value>The wsdl SOAP action namespace.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.MetadataVisibility">
             <summary>Gets or sets the metadata visibility.</summary>
            
             <value>The metadata visibility.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.MetadataPageBodyHtml">
             <summary>Gets or sets the metadata page body HTML.</summary>
            
             <value>The metadata page body HTML.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.MetadataOperationPageBodyHtml">
             <summary>Gets or sets the metadata operation page body HTML.</summary>
            
             <value>The metadata operation page body HTML.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.MetadataCustomPath">
             <summary>Gets or sets the full pathname of the metadata custom file.</summary>
            
             <value>The full pathname of the metadata custom file.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.UseCustomMetadataTemplates">
             <summary>Gets or sets a value indicating whether this object use custom metadata templates.</summary>
            
             <value>true if use custom metadata templates, false if not.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.ServiceName">
             <summary>Gets or sets the name of the service.</summary>
            
             <value>The name of the service.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.SoapServiceName">
             <summary>Gets or sets the name of the SOAP service.</summary>
            
             <value>The name of the SOAP service.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.DefaultContentType">
             <summary>Gets or sets the default content type.</summary>
            
             <value>The default content type.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.AllowJsonpRequests">
             <summary>Gets or sets a value indicating whether we allow jsonp requests.</summary>
            
             <value>true if allow jsonp requests, false if not.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.AllowRouteContentTypeExtensions">
             <summary>Gets or sets a value indicating whether we allow route content type extensions.</summary>
            
             <value>true if allow route content type extensions, false if not.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.DebugMode">
             <summary>Gets or sets a value indicating whether the debug mode.</summary>
            
             <value>true if debug mode, false if not.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.DebugOnlyReturnRequestInfo">
             <summary>Gets or sets a value indicating whether the debug only return request information.</summary>
            
             <value>true if debug only return request information, false if not.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.DebugAspNetHostEnvironment">
             <summary>Gets or sets the debug ASP net host environment.</summary>
            
             <value>The debug ASP net host environment.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.DebugHttpListenerHostEnvironment">
             <summary>Gets or sets the debug HTTP listener host environment.</summary>
            
             <value>The debug HTTP listener host environment.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.DefaultDocuments">
             <summary>Gets the default documents.</summary>
            
             <value>The default documents.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.IgnoreWarningsOnPropertyNames">
             <summary>Gets a list of names of the ignore warnings on properties.</summary>
            
             <value>A list of names of the ignore warnings on properties.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.IgnoreFormatsInMetadata">
             <summary>Gets or sets the ignore formats in metadata.</summary>
            
             <value>The ignore formats in metadata.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.AllowFileExtensions">
             <summary>Gets or sets the allow file extensions.</summary>
            
             <value>The allow file extensions.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.WebHostUrl">
             <summary>Gets or sets URL of the web host.</summary>
            
             <value>The web host URL.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.WebHostPhysicalPath">
             <summary>Gets or sets the full pathname of the web host physical file.</summary>
            
             <value>The full pathname of the web host physical file.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.NServiceKitHandlerFactoryPath">
             <summary>Gets or sets the full pathname of the service kit handler factory file.</summary>
            
             <value>The full pathname of the service kit handler factory file.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.DefaultRedirectPath">
             <summary>Gets or sets the default redirect path.</summary>
            
             <value>The default redirect path.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.MetadataRedirectPath">
             <summary>Gets or sets the full pathname of the metadata redirect file.</summary>
            
             <value>The full pathname of the metadata redirect file.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.ServiceEndpointsMetadataConfig">
             <summary>Gets or sets the service endpoints metadata configuration.</summary>
            
             <value>The service endpoints metadata configuration.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.LogFactory">
             <summary>Gets or sets the log factory.</summary>
            
             <value>The log factory.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.EnableAccessRestrictions">
             <summary>Gets or sets a value indicating whether the access restrictions is enabled.</summary>
            
             <value>true if enable access restrictions, false if not.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.UseBclJsonSerializers">
             <summary>Gets or sets a value indicating whether this object use bcl JSON serializers.</summary>
            
             <value>true if use bcl JSON serializers, false if not.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.GlobalResponseHeaders">
             <summary>Gets or sets the global response headers.</summary>
            
             <value>The global response headers.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.EnableFeatures">
             <summary>Gets or sets the enable features.</summary>
            
             <value>The enable features.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.ReturnsInnerException">
             <summary>Gets or sets a value indicating whether the returns inner exception.</summary>
            
             <value>true if returns inner exception, false if not.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.WriteErrorsToResponse">
             <summary>Gets or sets a value indicating whether the errors to response should be written.</summary>
            
             <value>true if write errors to response, false if not.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.MarkdownOptions">
             <summary>Gets or sets options for controlling the markdown.</summary>
            
             <value>Options that control the markdown.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.MarkdownBaseType">
             <summary>Gets or sets the type of the markdown base.</summary>
            
             <value>The type of the markdown base.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.MarkdownGlobalHelpers">
             <summary>Gets or sets the markdown global helpers.</summary>
            
             <value>The markdown global helpers.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.HtmlReplaceTokens">
             <summary>Gets or sets the HTML replace tokens.</summary>
            
             <value>The HTML replace tokens.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.AppendUtf8CharsetOnContentTypes">
             <summary>Gets or sets a list of types of the append UTF 8 charset on contents.</summary>
            
             <value>A list of types of the append UTF 8 charset on contents.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.AddMaxAgeForStaticMimeTypes">
             <summary>Gets or sets a list of types of the add maximum age for static mimes.</summary>
            
             <value>A list of types of the add maximum age for static mimes.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.RawHttpHandlers">
             <summary>Gets or sets the raw HTTP handlers.</summary>
            
             <value>The raw HTTP handlers.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.RouteNamingConventions">
             <summary>Gets or sets the route naming conventions.</summary>
            
             <value>The route naming conventions.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.CustomHttpHandlers">
             <summary>Gets or sets the custom HTTP handlers.</summary>
            
             <value>The custom HTTP handlers.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.GlobalHtmlErrorHttpHandler">
             <summary>Gets or sets the global HTML error HTTP handler.</summary>
            
             <value>The global HTML error HTTP handler.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.MapExceptionToStatusCode">
             <summary>Gets or sets the map exception to status code.</summary>
            
             <value>The map exception to status code.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.OnlySendSessionCookiesSecurely">
             <summary>Gets or sets a value indicating whether the only send session cookies securely.</summary>
            
             <value>true if only send session cookies securely, false if not.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.RestrictAllCookiesToDomain">
             <summary>Gets or sets the restrict all cookies to domain.</summary>
            
             <value>The restrict all cookies to domain.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.DefaultJsonpCacheExpiration">
             <summary>Gets or sets the default jsonp cache expiration.</summary>
            
             <value>The default jsonp cache expiration.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.Return204NoContentForEmptyResponse">
             <summary>Gets or sets a value indicating whether the return 204 no content for empty response.</summary>
            
             <value>true if return 204 no content for empty response, false if not.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.AllowPartialResponses">
             <summary>Gets or sets a value indicating whether we allow partial responses.</summary>
            
             <value>true if allow partial responses, false if not.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.AllowNonHttpOnlyCookies">
             <summary>Gets or sets a value indicating whether we allow non HTTP only cookies.</summary>
            
             <value>true if allow non HTTP only cookies, false if not.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.AllowAclUrlReservation">
             <summary>Gets or sets a value indicating whether we allow ACL URL reservation.</summary>
            
             <value>true if allow ACL URL reservation, false if not.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.UseHttpsLinks">
             <summary>Gets or sets a value indicating whether this object use HTTPS links.</summary>
            
             <value>true if use HTTPS links, false if not.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.AdminAuthSecret">
             <summary>Gets or sets the admin authentication secret.</summary>
            
             <value>The admin authentication secret.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.DefaultOperationNamespace">
             <summary>Gets or sets the default operation namespace.</summary>
            
             <value>The default operation namespace.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.MetadataPagesConfig">
             <summary>Gets the metadata pages configuration.</summary>
            
             <value>The metadata pages configuration.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.PreExecuteServiceFilter">
             <summary>Gets or sets the pre execute service filter.</summary>
            
             <value>The pre execute service filter.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.PostExecuteServiceFilter">
             <summary>Gets or sets the post execute service filter.</summary>
            
             <value>The post execute service filter.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.EndpointHostConfig.FallbackRestPath">
             <summary>Gets or sets the full pathname of the fallback rest file.</summary>
            
             <value>The full pathname of the fallback rest file.</value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Utils.FilterAttributeCache">
            <summary>
            
            </summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Utils.FilterAttributeCache.GetRequestFilterAttributes(System.Type)">
            <summary>
            
            </summary>
            <param name="requestDtoType"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Utils.FilterAttributeCache.GetResponseFilterAttributes(System.Type)">
            <summary>
            
            </summary>
            <param name="responseDtoType"></param>
            <returns></returns>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.WebServerType">
            <summary>
            
            </summary>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.WebServerType.IIS6">
            <summary>
            
            </summary>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.WebServerType.IIS7">
            <summary>
            
            </summary>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.WebServerType.HttpListener">
            <summary>
            
            </summary>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.WebServerType.ModMono">
            <summary>
            
            </summary>
        </member>
        <member name="F:NServiceKit.WebHost.Endpoints.WebServerType.MonoFastCgi">
            <summary>
            
            </summary>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.XmlAsyncOneWayHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.XmlAsyncOneWayHandler.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.XmlSyncReplyHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.XmlSyncReplyHandler.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Metadata.IndexMetadataHandler">
            <summary>An index metadata handler.</summary>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Metadata.BaseSoapMetadataHandler">
            <summary>A base SOAP metadata handler.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Metadata.BaseSoapMetadataHandler.#ctor">
            <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.Metadata.BaseSoapMetadataHandler class.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Metadata.BaseSoapMetadataHandler.Execute(System.Web.HttpContext)">
             <summary>Executes the given context.</summary>
            
             <param name="context">The context.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Metadata.BaseSoapMetadataHandler.ProcessRequest(NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.IHttpResponse,System.String)">
             <summary>Process the request.</summary>
            
             <exception cref="T:System.ArgumentOutOfRangeException">Thrown when one or more arguments are outside the required range.</exception>
            
             <param name="httpReq">      The HTTP request.</param>
             <param name="httpRes">      The HTTP resource.</param>
             <param name="operationName">Name of the operation.</param>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Metadata.BaseSoapMetadataHandler.RenderOperations(System.Web.UI.HtmlTextWriter,NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.ServiceMetadata)">
             <summary>Renders the operations.</summary>
            
             <param name="writer">  The writer.</param>
             <param name="httpReq"> The HTTP request.</param>
             <param name="metadata">The metadata.</param>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Metadata.BaseSoapMetadataHandler.OperationName">
             <summary>Gets or sets the name of the operation.</summary>
            
             <value>The name of the operation.</value>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Metadata.IndexMetadataHandler.CreateMessage(System.Type)">
             <summary>Creates a message.</summary>
            
             <param name="dtoType">Type of the dto.</param>
            
             <returns>The new message.</returns>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Metadata.IndexMetadataHandler.Format">
             <summary>Gets the format to use.</summary>
            
             <value>The format.</value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Metadata.Soap11MetadataHandler">
            <summary>A SOAP 11 metadata handler.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Metadata.Soap11MetadataHandler.CreateMessage(System.Type)">
             <summary>Creates a message.</summary>
            
             <param name="dtoType">Type of the dto.</param>
            
             <returns>The new message.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Metadata.Soap11MetadataHandler.RenderOperation(System.Web.UI.HtmlTextWriter,NServiceKit.ServiceHost.IHttpRequest,System.String,System.String,System.String,System.String)">
             <summary>Renders the operation.</summary>
            
             <param name="writer">         The writer.</param>
             <param name="httpReq">        The HTTP request.</param>
             <param name="operationName">  Name of the operation.</param>
             <param name="requestMessage"> Message describing the request.</param>
             <param name="responseMessage">Message describing the response.</param>
             <param name="metadataHtml">   The metadata HTML.</param>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Metadata.Soap11MetadataHandler.Format">
             <summary>Gets the format to use.</summary>
            
             <value>The format.</value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Metadata.Soap12MetadataHandler">
            <summary>A SOAP 12 metadata handler.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Metadata.Soap12MetadataHandler.CreateMessage(System.Type)">
             <summary>Creates a message.</summary>
            
             <param name="dtoType">Type of the dto.</param>
            
             <returns>The new message.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Metadata.Soap12MetadataHandler.RenderOperation(System.Web.UI.HtmlTextWriter,NServiceKit.ServiceHost.IHttpRequest,System.String,System.String,System.String,System.String)">
             <summary>Renders the operation.</summary>
            
             <param name="writer">         The writer.</param>
             <param name="httpReq">        The HTTP request.</param>
             <param name="operationName">  Name of the operation.</param>
             <param name="requestMessage"> Message describing the request.</param>
             <param name="responseMessage">Message describing the response.</param>
             <param name="metadataHtml">   The metadata HTML.</param>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Metadata.Soap12MetadataHandler.Format">
             <summary>Gets the format to use.</summary>
            
             <value>The format.</value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Metadata.JsonMetadataHandler">
            <summary>A JSON metadata handler.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Metadata.JsonMetadataHandler.CreateMessage(System.Type)">
             <summary>Creates a message.</summary>
            
             <param name="dtoType">Type of the dto.</param>
            
             <returns>The new message.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Metadata.JsonMetadataHandler.RenderOperations(System.Web.UI.HtmlTextWriter,NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.ServiceMetadata)">
             <summary>Renders the operations.</summary>
            
             <param name="writer">  The writer.</param>
             <param name="httpReq"> The HTTP request.</param>
             <param name="metadata">The metadata.</param>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Metadata.JsonMetadataHandler.Format">
             <summary>Gets the format to use.</summary>
            
             <value>The format.</value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Metadata.BaseWsdlPage">
            <summary>A base wsdl page.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Metadata.BaseWsdlPage.DataBind(System.Web.UI.WebControls.Repeater[])">
             <summary>Data bind.</summary>
            
             <param name="repeaters">A variable-length parameters list containing repeaters.</param>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Metadata.XmlMetadataHandler">
            <summary>An XML metadata handler.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Metadata.XmlMetadataHandler.CreateMessage(System.Type)">
             <summary>Creates a message.</summary>
            
             <param name="dtoType">Type of the dto.</param>
            
             <returns>The new message.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Metadata.XmlMetadataHandler.RenderOperations(System.Web.UI.HtmlTextWriter,NServiceKit.ServiceHost.IHttpRequest,NServiceKit.ServiceHost.ServiceMetadata)">
             <summary>Renders the operations.</summary>
            
             <param name="writer">  The writer.</param>
             <param name="httpReq"> The HTTP request.</param>
             <param name="metadata">The metadata.</param>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Metadata.XmlMetadataHandler.Format">
             <summary>Gets the format to use.</summary>
            
             <value>The format.</value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Metadata.XsdGenerator">
            <summary>An XSD generator.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Metadata.XsdGenerator.ToString">
             <summary>Returns a string that represents the current object.</summary>
            
             <returns>A string that represents the current object.</returns>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Metadata.XsdGenerator.OptimizeForFlash">
             <summary>Gets or sets a value indicating whether the optimize for flash.</summary>
            
             <value>true if optimize for flash, false if not.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Metadata.XsdGenerator.OperationTypes">
             <summary>Gets or sets a list of types of the operations.</summary>
            
             <value>A list of types of the operations.</value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Support.Metadata.Controls.OperationControl">
            <summary>An operation control.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Metadata.Controls.OperationControl.Render(System.Web.UI.HtmlTextWriter)">
             <summary>Renders the given output.</summary>
            
             <param name="output">The output.</param>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Metadata.Controls.OperationControl.MetadataConfig">
             <summary>Gets or sets the metadata configuration.</summary>
            
             <value>The metadata configuration.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Metadata.Controls.OperationControl.Format">
             <summary>Sets the format to use.</summary>
            
             <value>The format.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Metadata.Controls.OperationControl.HttpRequest">
             <summary>Gets or sets the HTTP request.</summary>
            
             <value>The HTTP request.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Metadata.Controls.OperationControl.ContentType">
             <summary>Gets or sets the type of the content.</summary>
            
             <value>The type of the content.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Metadata.Controls.OperationControl.ContentFormat">
             <summary>Gets or sets the content format.</summary>
            
             <value>The content format.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Metadata.Controls.OperationControl.Title">
             <summary>Gets or sets the title.</summary>
            
             <value>The title.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Metadata.Controls.OperationControl.OperationName">
             <summary>Gets or sets the name of the operation.</summary>
            
             <value>The name of the operation.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Metadata.Controls.OperationControl.HostName">
             <summary>Gets or sets the name of the host.</summary>
            
             <value>The name of the host.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Metadata.Controls.OperationControl.RequestMessage">
             <summary>Gets or sets a message describing the request.</summary>
            
             <value>A message describing the request.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Metadata.Controls.OperationControl.ResponseMessage">
             <summary>Gets or sets a message describing the response.</summary>
            
             <value>A message describing the response.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Metadata.Controls.OperationControl.MetadataHtml">
             <summary>Gets or sets the metadata HTML.</summary>
            
             <value>The metadata HTML.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Metadata.Controls.OperationControl.RequestUri">
             <summary>Gets URI of the request.</summary>
            
             <value>The request URI.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Metadata.Controls.OperationControl.HttpRequestTemplate">
             <summary>Gets the HTTP request template.</summary>
            
             <value>The HTTP request template.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Metadata.Controls.OperationControl.ResponseTemplate">
             <summary>Gets the response template.</summary>
            
             <value>The response template.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Metadata.Controls.OperationControl.HttpResponseTemplate">
             <summary>Gets the HTTP response template.</summary>
            
             <value>The HTTP response template.</value>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Metadata.Controls.Soap12OperationControl.#ctor">
            <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.Support.Metadata.Controls.Soap12OperationControl class.</summary>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Metadata.Controls.Soap12OperationControl.RequestUri">
             <summary>Gets URI of the request.</summary>
            
             <value>The request URI.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Metadata.Controls.Soap12OperationControl.HttpRequestTemplate">
             <summary>Gets the HTTP request template.</summary>
            
             <value>The HTTP request template.</value>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Metadata.Controls.OperationsControl.Render(System.Web.UI.HtmlTextWriter)">
             <summary>Sends server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object, which writes the content to be rendered on the client.</summary>
            
             <param name="output">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the server control content.</param>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Metadata.Controls.OperationsControl.Title">
             <summary>Gets or sets the title.</summary>
            
             <value>The title.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Metadata.Controls.OperationsControl.OperationNames">
             <summary>Gets or sets a list of names of the operations.</summary>
            
             <value>A list of names of the operations.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Metadata.Controls.OperationsControl.MetadataOperationPageBodyHtml">
             <summary>Gets or sets the metadata operation page body HTML.</summary>
            
             <value>The metadata operation page body HTML.</value>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Metadata.Controls.Soap11OperationControl.#ctor">
            <summary>Initializes a new instance of the NServiceKit.WebHost.Endpoints.Support.Metadata.Controls.Soap11OperationControl class.</summary>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Metadata.Controls.Soap11OperationControl.RequestUri">
             <summary>Gets URI of the request.</summary>
            
             <value>The request URI.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Metadata.Controls.Soap11OperationControl.HttpRequestTemplate">
             <summary>Gets the HTTP request template.</summary>
            
             <value>The HTTP request template.</value>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Metadata.Controls.IndexOperationsControl.RenderRow(System.String)">
             <summary>Renders the row described by operation.</summary>
            
             <param name="operation">The operation.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Metadata.Controls.IndexOperationsControl.Render(System.Web.UI.HtmlTextWriter)">
             <summary>Sends server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object, which writes the content to be rendered on the client.</summary>
            
             <param name="output">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the server control content.</param>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Metadata.Controls.IndexOperationsControl.HttpRequest">
             <summary>Gets or sets the HTTP request.</summary>
            
             <value>The HTTP request.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Metadata.Controls.IndexOperationsControl.Title">
             <summary>Gets or sets the title.</summary>
            
             <value>The title.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Metadata.Controls.IndexOperationsControl.OperationNames">
             <summary>Gets or sets a list of names of the operations.</summary>
            
             <value>A list of names of the operations.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Metadata.Controls.IndexOperationsControl.MetadataPageBodyHtml">
             <summary>Gets or sets the metadata page body HTML.</summary>
            
             <value>The metadata page body HTML.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Metadata.Controls.IndexOperationsControl.Xsds">
             <summary>Gets or sets the xsds.</summary>
            
             <value>The xsds.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Metadata.Controls.IndexOperationsControl.XsdServiceTypesIndex">
             <summary>Gets or sets the zero-based index of the XSD service types.</summary>
            
             <value>The XSD service types index.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Metadata.Controls.IndexOperationsControl.MetadataConfig">
             <summary>Gets or sets the metadata configuration.</summary>
            
             <value>The metadata configuration.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Metadata.XsdTypes.Xsds">
             <summary>Gets the xsds.</summary>
            
             <value>The xsds.</value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.Utils.XsdUtils">
            <summary>
            
            </summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Utils.XsdUtils.GetXmlSchemaSet(System.Collections.Generic.ICollection{System.Type})">
            <summary>
            
            </summary>
            <param name="operationTypes"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Utils.XsdUtils.GetXsd(System.Xml.Schema.XmlSchemaSet)">
            <summary>
            
            </summary>
            <param name="schemaSet"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Utils.XsdUtils.GetXsd(System.Type)">
            <summary>
            
            </summary>
            <param name="operationType"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.Support.Templates.ListTemplate.ToString">
             <summary>Returns a string that represents the current object.</summary>
            
             <returns>A string that represents the current object.</returns>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Templates.ListTemplate.Title">
             <summary>Gets or sets the title.</summary>
            
             <value>The title.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Templates.ListTemplate.ListItems">
             <summary>Gets or sets the list items.</summary>
            
             <value>The list items.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Templates.ListTemplate.ListItemsMap">
             <summary>Gets or sets the list items map.</summary>
            
             <value>The list items map.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Templates.ListTemplate.ListItemsIntMap">
             <summary>Gets or sets the list items int map.</summary>
            
             <value>The list items int map.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Templates.ListTemplate.ForEachListItem">
             <summary>Gets or sets for each list item.</summary>
            
             <value>for each list item.</value>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.Support.Templates.ListTemplate.ListItemTemplate">
             <summary>Gets or sets the list item template.</summary>
            
             <value>The list item template.</value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.IHasAppHost">
            <summary>Interface for has application host.</summary>
        </member>
        <member name="P:NServiceKit.WebHost.Endpoints.IHasAppHost.AppHost">
             <summary>Gets the application host.</summary>
            
             <value>The application host.</value>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.IPreInitPlugin">
            <summary>Interface for pre initialise plugin.</summary>
        </member>
        <member name="M:NServiceKit.WebHost.Endpoints.IPreInitPlugin.Configure(NServiceKit.WebHost.Endpoints.IAppHost)">
             <summary>Configures the given application host.</summary>
            
             <param name="appHost">The application host.</param>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.IProtoBufPlugin">
            <summary>Interface for prototype buffer plugin.</summary>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.IMsgPackPlugin">
            <summary>Interface for message pack plugin.</summary>
        </member>
        <member name="T:NServiceKit.WebHost.Endpoints.IRazorPlugin">
            <summary>Interface for razor plugin.</summary>
        </member>
        <member name="T:NServiceKit.Html.TemplateProvider">
            <summary>A template provider.</summary>
        </member>
        <member name="M:NServiceKit.Html.TemplateProvider.#ctor(System.String)">
             <summary>Initializes a new instance of the NServiceKit.Html.TemplateProvider class.</summary>
            
             <param name="defaultTemplateName">The default template name.</param>
        </member>
        <member name="M:NServiceKit.Html.TemplateProvider.GetTemplatePath(NServiceKit.IO.IVirtualDirectory)">
             <summary>Gets template path.</summary>
            
             <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            
             <param name="fileDir">The file dir.</param>
            
             <returns>The template path.</returns>
        </member>
        <member name="M:NServiceKit.Html.TemplateProvider.QueuePageToCompile(NServiceKit.IViewPage)">
             <summary>Queue page to compile.</summary>
            
             <param name="pageToCompile">The page to compile.</param>
        </member>
        <member name="M:NServiceKit.Html.TemplateProvider.CompileQueuedPages">
            <summary>Compile queued pages.</summary>
        </member>
        <member name="M:NServiceKit.Html.TemplateProvider.EnsureAllCompiled">
            <summary>Ensures that all compiled.</summary>
        </member>
        <member name="P:NServiceKit.Html.TemplateProvider.CompileInParallelWithNoOfThreads">
             <summary>Gets or sets the compile in parallel with no of threads.</summary>
            
             <value>The compile in parallel with no of threads.</value>
        </member>
        <member name="M:MarkdownDeep.Abbreviation.#ctor(System.String,System.String)">
             <summary>Initializes a new instance of the MarkdownDeep.Abbreviation class.</summary>
            
             <param name="abbr"> The abbr.</param>
             <param name="title">The title.</param>
        </member>
        <member name="F:MarkdownDeep.Abbreviation.Abbr">
            <summary>The abbr.</summary>
        </member>
        <member name="F:MarkdownDeep.Abbreviation.Title">
            <summary>The title.</summary>
        </member>
        <member name="M:MarkdownDeep.Block.RevertToPlain">
            <summary>Revert to plain.</summary>
        </member>
        <member name="M:MarkdownDeep.Block.ToString">
             <summary>Returns a string that represents the current object.</summary>
            
             <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:MarkdownDeep.Block.CopyFrom(MarkdownDeep.Block)">
             <summary>Copies from described by other.</summary>
            
             <param name="other">Another instance to copy.</param>
            
             <returns>A Block.</returns>
        </member>
        <member name="P:MarkdownDeep.Block.Content">
             <summary>Gets the content.</summary>
            
             <value>The content.</value>
        </member>
        <member name="P:MarkdownDeep.Block.LineStart">
             <summary>Gets the line start.</summary>
            
             <value>The line start.</value>
        </member>
        <member name="P:MarkdownDeep.Block.contentEnd">
             <summary>Gets or sets the content end.</summary>
            
             <value>The content end.</value>
        </member>
        <member name="T:MarkdownDeep.BlockProcessor">
            <summary>A block processor.</summary>
        </member>
        <member name="T:MarkdownDeep.StringScanner">
            <summary>A string scanner.</summary>
        </member>
        <member name="M:MarkdownDeep.StringScanner.SkipFootnoteID(System.String@)">
             <summary>Skip footnote identifier.</summary>
            
             <param name="id">The identifier.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:MarkdownDeep.BlockProcessor.#ctor(MarkdownDeep.Markdown,System.Boolean)">
             <summary>Initializes a new instance of the MarkdownDeep.BlockProcessor class.</summary>
            
             <param name="m">             The Markdown to process.</param>
             <param name="MarkdownInHtml">true to markdown in HTML.</param>
        </member>
        <member name="T:MarkdownDeep.HtmlTagFlags">
            <summary>Bitfield of flags for specifying HtmlTagFlags.</summary>
        </member>
        <member name="F:MarkdownDeep.HtmlTagFlags.Block">
            <summary>A binary constant representing the block flag.</summary>
        </member>
        <member name="F:MarkdownDeep.HtmlTagFlags.Inline">
            <summary>A binary constant representing the inline flag.</summary>
        </member>
        <member name="F:MarkdownDeep.HtmlTagFlags.NoClosing">
            <summary>A binary constant representing the no closing flag.</summary>
        </member>
        <member name="F:MarkdownDeep.HtmlTagFlags.ContentAsSpan">
            <summary>A binary constant representing the content as span flag.</summary>
        </member>
        <member name="T:MarkdownDeep.HtmlTag">
            <summary>A HTML tag.</summary>
        </member>
        <member name="M:MarkdownDeep.HtmlTag.#ctor(System.String)">
             <summary>Initializes a new instance of the MarkdownDeep.HtmlTag class.</summary>
            
             <param name="name">The name.</param>
        </member>
        <member name="M:MarkdownDeep.HtmlTag.Parse(System.String,System.Int32@)">
             <summary>Parses the given p.</summary>
            
             <param name="str">The.</param>
             <param name="pos">The position.</param>
            
             <returns>A HtmlTag.</returns>
        </member>
        <member name="M:MarkdownDeep.HtmlTag.Parse(MarkdownDeep.StringScanner)">
             <summary>Parses the given p.</summary>
            
             <param name="p">The StringScanner to process.</param>
            
             <returns>A HtmlTag.</returns>
        </member>
        <member name="P:MarkdownDeep.HtmlTag.Flags">
             <summary>Gets the flags.</summary>
            
             <value>The flags.</value>
        </member>
        <member name="M:MarkdownDeep.FootnoteReference.#ctor(System.Int32,System.String)">
             <summary>Initializes a new instance of the MarkdownDeep.FootnoteReference class.</summary>
            
             <param name="index">Zero-based index of the.</param>
             <param name="id">   The identifier.</param>
        </member>
        <member name="F:MarkdownDeep.FootnoteReference.index">
            <summary>Zero-based index of the.</summary>
        </member>
        <member name="F:MarkdownDeep.FootnoteReference.id">
            <summary>The identifier.</summary>
        </member>
        <member name="T:MarkdownDeep.LinkDefinition">
            <summary>A link definition.</summary>
        </member>
        <member name="M:MarkdownDeep.LinkDefinition.#ctor(System.String)">
             <summary>Initializes a new instance of the MarkdownDeep.LinkDefinition class.</summary>
            
             <param name="id">The identifier.</param>
        </member>
        <member name="M:MarkdownDeep.LinkDefinition.#ctor(System.String,System.String)">
             <summary>Initializes a new instance of the MarkdownDeep.LinkDefinition class.</summary>
            
             <param name="id"> The identifier.</param>
             <param name="url">The URL.</param>
        </member>
        <member name="M:MarkdownDeep.LinkDefinition.#ctor(System.String,System.String,System.String)">
             <summary>Initializes a new instance of the MarkdownDeep.LinkDefinition class.</summary>
            
             <param name="id">   The identifier.</param>
             <param name="url">  The URL.</param>
             <param name="title">The title.</param>
        </member>
        <member name="P:MarkdownDeep.LinkDefinition.id">
             <summary>Gets or sets the identifier.</summary>
            
             <value>The identifier.</value>
        </member>
        <member name="P:MarkdownDeep.LinkDefinition.url">
             <summary>Gets or sets URL of the document.</summary>
            
             <value>The URL.</value>
        </member>
        <member name="P:MarkdownDeep.LinkDefinition.title">
             <summary>Gets or sets the title.</summary>
            
             <value>The title.</value>
        </member>
        <member name="M:MarkdownDeep.LinkInfo.#ctor(MarkdownDeep.LinkDefinition,System.String)">
             <summary>Initializes a new instance of the MarkdownDeep.LinkInfo class.</summary>
            
             <param name="def">      The definition.</param>
             <param name="link_text">The link text.</param>
        </member>
        <member name="F:MarkdownDeep.LinkInfo.def">
            <summary>The definition.</summary>
        </member>
        <member name="F:MarkdownDeep.LinkInfo.link_text">
            <summary>The link text.</summary>
        </member>
        <member name="T:MarkdownDeep.ImageInfo">
            <summary>Information about the image.</summary>
        </member>
        <member name="F:MarkdownDeep.ImageInfo.url">
            <summary>URL of the document.</summary>
        </member>
        <member name="F:MarkdownDeep.ImageInfo.titled_image">
            <summary>true to titled image.</summary>
        </member>
        <member name="F:MarkdownDeep.ImageInfo.width">
            <summary>The width.</summary>
        </member>
        <member name="F:MarkdownDeep.ImageInfo.height">
            <summary>The height.</summary>
        </member>
        <member name="T:MarkdownDeep.Markdown">
            <summary>A markdown.</summary>
        </member>
        <member name="M:MarkdownDeep.Markdown.Transform(System.String)">
             <summary>Transforms.</summary>
            
             <param name="str">The.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="F:MarkdownDeep.Markdown.QualifyUrl">
            <summary>URL of the qualify.</summary>
        </member>
        <member name="F:MarkdownDeep.Markdown.GetImageSize">
            <summary>Size of the get image.</summary>
        </member>
        <member name="F:MarkdownDeep.Markdown.PrepareLink">
            <summary>The prepare link.</summary>
        </member>
        <member name="F:MarkdownDeep.Markdown.PrepareImage">
            <summary>The prepare image.</summary>
        </member>
        <member name="M:MarkdownDeep.Markdown.OnSectionHeader(System.Text.StringBuilder,System.Int32)">
             <summary>Executes the section header action.</summary>
            
             <param name="dest"> Destination for the.</param>
             <param name="Index">Zero-based index of the.</param>
        </member>
        <member name="M:MarkdownDeep.Markdown.OnSectionHeadingSuffix(System.Text.StringBuilder,System.Int32)">
             <summary>Executes the section heading suffix action.</summary>
            
             <param name="dest"> Destination for the.</param>
             <param name="Index">Zero-based index of the.</param>
        </member>
        <member name="M:MarkdownDeep.Markdown.OnSectionFooter(System.Text.StringBuilder,System.Int32)">
             <summary>Executes the section footer action.</summary>
            
             <param name="dest"> Destination for the.</param>
             <param name="Index">Zero-based index of the.</param>
        </member>
        <member name="P:MarkdownDeep.Markdown.SummaryLength">
             <summary>Gets or sets the length of the summary.</summary>
            
             <value>The length of the summary.</value>
        </member>
        <member name="P:MarkdownDeep.Markdown.HtmlClassFootnotes">
             <summary>Gets or sets the HTML class footnotes.</summary>
            
             <value>The HTML class footnotes.</value>
        </member>
        <member name="M:MarkdownDeep.TableSpec.#ctor">
            <summary>Initializes a new instance of the MarkdownDeep.TableSpec class.</summary>
        </member>
        <member name="F:MarkdownDeep.TableSpec.LeadingBar">
            <summary>true to leading bar.</summary>
        </member>
        <member name="F:MarkdownDeep.TableSpec.TrailingBar">
            <summary>true to trailing bar.</summary>
        </member>
        <member name="F:MarkdownDeep.TableSpec.Columns">
            <summary>The columns.</summary>
        </member>
        <member name="F:MarkdownDeep.TableSpec.Headers">
            <summary>The headers.</summary>
        </member>
        <member name="F:MarkdownDeep.TableSpec.Rows">
            <summary>The rows.</summary>
        </member>
        <member name="M:MarkdownDeep.TableSpec.ParseRow(MarkdownDeep.StringScanner)">
             <summary>Parse row.</summary>
            
             <param name="p">The StringScanner to process.</param>
            
             <returns>A List&lt;string&gt;</returns>
        </member>
        <member name="M:MarkdownDeep.TableSpec.Render(MarkdownDeep.Markdown,System.Text.StringBuilder)">
             <summary>Renders this object.</summary>
            
             <param name="m">The Markdown to process.</param>
             <param name="b">The StringBuilder to process.</param>
        </member>
        <member name="M:MarkdownDeep.TableSpec.Parse(MarkdownDeep.StringScanner)">
             <summary>Parses the given p.</summary>
            
             <param name="p">The StringScanner to process.</param>
            
             <returns>A TableSpec.</returns>
        </member>
        <member name="M:MarkdownDeep.Token.ToString">
             <summary>Returns a string that represents the current object.</summary>
            
             <returns>A string that represents the current object.</returns>
        </member>
        <member name="F:MarkdownDeep.Token.type">
            <summary>The type.</summary>
        </member>
        <member name="F:MarkdownDeep.Token.startOffset">
            <summary>The start offset.</summary>
        </member>
        <member name="F:MarkdownDeep.Token.length">
            <summary>The length.</summary>
        </member>
        <member name="F:MarkdownDeep.Token.data">
            <summary>The data.</summary>
        </member>
        <member name="M:MarkdownDeep.Utils.HtmlRandomize(System.Text.StringBuilder,System.String)">
             <summary>HTML randomize.</summary>
            
             <param name="dest">Destination for the.</param>
             <param name="str"> The.</param>
        </member>
        <member name="M:MarkdownDeep.Utils.NormalizeLineEnds(System.String)">
             <summary>Normalize line ends.</summary>
            
             <param name="str">The.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:MarkdownDeep.Utils.IsUrlFullyQualified(System.String)">
             <summary>Query if 'url' is URL fully qualified.</summary>
            
             <param name="url">URL of the document.</param>
            
             <returns>true if URL fully qualified, false if not.</returns>
        </member>
    </members>
</doc>
